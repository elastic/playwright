{"version":3,"sources":["../../src/server/playwright.ts"],"names":["Playwright","SdkObject","constructor","isInternal","attribution","instrumentation","undefined","selectors","chromium","android","electron","firefox","webkit","options","_portForwardingServer","addListener","onCallLog","logName","message","sdkObject","metadata","debugLogger","log","rootSdkObject","Selectors","Chromium","Firefox","WebKit","Electron","Android","AdbBackend","_enablePortForwarding","PortForwardingServer","create","loopbackProxyOverride","proxyServer","on","socket","emit","_disablePortForwarding","stop","_setForwardedPorts","ports","Error","setForwardedPorts","createPlaywright"],"mappings":";;;;;;;;AAgBA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AA5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBO,MAAMA,UAAN,SAAyBC,0BAAzB,CAAmC;AAUxCC,EAAAA,WAAW,CAACC,UAAD,EAAsB;AAC/B,UAAM;AAAEC,MAAAA,WAAW,EAAE;AAAED,QAAAA;AAAF,OAAf;AAA+BE,MAAAA,eAAe,EAAE;AAAhD,KAAN,EAAwFC,SAAxF,EAAmG,YAAnG;AAD+B,SATxBC,SASwB;AAAA,SARxBC,QAQwB;AAAA,SAPxBC,OAOwB;AAAA,SANxBC,QAMwB;AAAA,SALxBC,OAKwB;AAAA,SAJxBC,MAIwB;AAAA,SAHxBC,OAGwB;AAAA,SAFzBC,qBAEyB;AAE/B,SAAKT,eAAL,CAAqBU,WAArB,CAAiC;AAC/BC,MAAAA,SAAS,EAAE,CAACC,OAAD,EAAkBC,OAAlB,EAAmCC,SAAnC,EAAyDC,QAAzD,KAAoF;AAC7FC,iCAAYC,GAAZ,CAAgBL,OAAhB,EAAgCC,OAAhC;AACD;AAH8B,KAAjC;AAKA,SAAKL,OAAL,GAAe;AACbU,MAAAA,aAAa,EAAE,IADF;AAEbhB,MAAAA,SAAS,EAAE,IAAIiB,oBAAJ;AAFE,KAAf;AAIA,SAAKhB,QAAL,GAAgB,IAAIiB,kBAAJ,CAAa,KAAKZ,OAAlB,CAAhB;AACA,SAAKF,OAAL,GAAe,IAAIe,gBAAJ,CAAY,KAAKb,OAAjB,CAAf;AACA,SAAKD,MAAL,GAAc,IAAIe,cAAJ,CAAW,KAAKd,OAAhB,CAAd;AACA,SAAKH,QAAL,GAAgB,IAAIkB,kBAAJ,CAAa,KAAKf,OAAlB,CAAhB;AACA,SAAKJ,OAAL,GAAe,IAAIoB,gBAAJ,CAAY,IAAIC,sBAAJ,EAAZ,EAA8B,KAAKjB,OAAnC,CAAf;AACA,SAAKN,SAAL,GAAiB,KAAKM,OAAL,CAAaN,SAA9B;AACD;;AAE0B,QAArBwB,qBAAqB,GAAG;AAC5B,uBAAO,CAAC,KAAKjB,qBAAb;AACA,SAAKA,qBAAL,GAA6B,MAAMkB,kCAAqBC,MAArB,CAA4B,IAA5B,CAAnC;;AACA,SAAKpB,OAAL,CAAaqB,qBAAb,GAAqC,MAAM,KAAKpB,qBAAL,CAA4BqB,WAA5B,EAA3C;;AACA,SAAKrB,qBAAL,CAA2BsB,EAA3B,CAA8B,qBAA9B,EAAsDC,MAAD,IAA2C;AAC9F,WAAKC,IAAL,CAAU,qBAAV,EAAiCD,MAAjC;AACD,KAFD;AAGD;;AAEDE,EAAAA,sBAAsB,GAAG;AACvB,QAAI,CAAC,KAAKzB,qBAAV,EACE;;AACF,SAAKA,qBAAL,CAA2B0B,IAA3B;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,KAAD,EAAkB;AAClC,QAAI,CAAC,KAAK5B,qBAAV,EACE,MAAM,IAAI6B,KAAJ,CAAW,6FAAX,CAAN;;AACF,SAAK7B,qBAAL,CAA2B8B,iBAA3B,CAA6CF,KAA7C;AACD;;AAhDuC;;;;AAmDnC,SAASG,gBAAT,CAA0B1C,UAAU,GAAG,KAAvC,EAA8C;AACnD,SAAO,IAAIH,UAAJ,CAAeG,UAAf,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Android } from './android/android';\nimport { AdbBackend } from './android/backendAdb';\nimport { PlaywrightOptions } from './browser';\nimport { Chromium } from './chromium/chromium';\nimport { Electron } from './electron/electron';\nimport { Firefox } from './firefox/firefox';\nimport { Selectors } from './selectors';\nimport { WebKit } from './webkit/webkit';\nimport { CallMetadata, createInstrumentation, SdkObject } from './instrumentation';\nimport { debugLogger } from '../utils/debugLogger';\nimport { PortForwardingServer } from './socksSocket';\nimport { SocksInterceptedSocketHandler } from './socksServer';\nimport { assert } from '../utils/utils';\n\nexport class Playwright extends SdkObject {\n  readonly selectors: Selectors;\n  readonly chromium: Chromium;\n  readonly android: Android;\n  readonly electron: Electron;\n  readonly firefox: Firefox;\n  readonly webkit: WebKit;\n  readonly options: PlaywrightOptions;\n  private _portForwardingServer: PortForwardingServer | undefined;\n\n  constructor(isInternal: boolean) {\n    super({ attribution: { isInternal }, instrumentation: createInstrumentation() } as any, undefined, 'Playwright');\n    this.instrumentation.addListener({\n      onCallLog: (logName: string, message: string, sdkObject: SdkObject, metadata: CallMetadata) => {\n        debugLogger.log(logName as any, message);\n      }\n    });\n    this.options = {\n      rootSdkObject: this,\n      selectors: new Selectors(),\n    };\n    this.chromium = new Chromium(this.options);\n    this.firefox = new Firefox(this.options);\n    this.webkit = new WebKit(this.options);\n    this.electron = new Electron(this.options);\n    this.android = new Android(new AdbBackend(), this.options);\n    this.selectors = this.options.selectors;\n  }\n\n  async _enablePortForwarding() {\n    assert(!this._portForwardingServer);\n    this._portForwardingServer = await PortForwardingServer.create(this);\n    this.options.loopbackProxyOverride = () => this._portForwardingServer!.proxyServer();\n    this._portForwardingServer.on('incomingSocksSocket', (socket: SocksInterceptedSocketHandler) => {\n      this.emit('incomingSocksSocket', socket);\n    });\n  }\n\n  _disablePortForwarding() {\n    if (!this._portForwardingServer)\n      return;\n    this._portForwardingServer.stop();\n  }\n\n  _setForwardedPorts(ports: number[]) {\n    if (!this._portForwardingServer)\n      throw new Error(`Port forwarding needs to be enabled when launching the server via BrowserType.launchServer.`);\n    this._portForwardingServer.setForwardedPorts(ports);\n  }\n}\n\nexport function createPlaywright(isInternal = false) {\n  return new Playwright(isInternal);\n}\n"],"file":"playwright.js"}