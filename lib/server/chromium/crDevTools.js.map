{"version":3,"sources":["../../../src/server/chromium/crDevTools.ts"],"names":["kBindingName","CRDevTools","constructor","preferencesPath","_preferencesPath","_prefs","_savePromise","__testHookOnBinding","Promise","resolve","install","session","on","event","name","parsed","JSON","parse","payload","result","undefined","method","json","fs","promises","readFile","e","params","_save","send","expression","id","stringify","contextId","executionContextId","catch","all","source","then","writeFile"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport { CRSession } from './crConnection';\n\nconst kBindingName = '__pw_devtools__';\n\n// This class intercepts preferences-related DevTools embedder methods\n// and stores preferences as a json file in the browser installation directory.\nexport class CRDevTools {\n  private _preferencesPath: string;\n  private _prefs: any;\n  private _savePromise: Promise<any>;\n  __testHookOnBinding?: (parsed: any) => any;\n\n  constructor(preferencesPath: string) {\n    this._preferencesPath = preferencesPath;\n    this._savePromise = Promise.resolve();\n  }\n\n  install(session: CRSession) {\n    session.on('Runtime.bindingCalled', async event => {\n      if (event.name !== kBindingName)\n        return;\n      const parsed = JSON.parse(event.payload);\n      let result = undefined;\n      if (this.__testHookOnBinding)\n        this.__testHookOnBinding(parsed);\n      if (parsed.method === 'getPreferences') {\n        if (this._prefs === undefined) {\n          try {\n            const json = await fs.promises.readFile(this._preferencesPath, 'utf8');\n            this._prefs = JSON.parse(json);\n          } catch (e) {\n            this._prefs = {};\n          }\n        }\n        result = this._prefs;\n      } else if (parsed.method === 'setPreference') {\n        this._prefs[parsed.params[0]] = parsed.params[1];\n        this._save();\n      } else if (parsed.method === 'removePreference') {\n        delete this._prefs[parsed.params[0]];\n        this._save();\n      } else if (parsed.method === 'clearPreferences') {\n        this._prefs = {};\n        this._save();\n      }\n      session.send('Runtime.evaluate', {\n        expression: `window.DevToolsAPI.embedderMessageAck(${parsed.id}, ${JSON.stringify(result)})`,\n        contextId: event.executionContextId\n      }).catch(e => null);\n    });\n    Promise.all([\n      session.send('Runtime.enable'),\n      session.send('Runtime.addBinding', { name: kBindingName }),\n      session.send('Page.enable'),\n      session.send('Page.addScriptToEvaluateOnNewDocument', { source: `\n        (() => {\n          const init = () => {\n            // Lazy init happens when InspectorFrontendHost is initialized.\n            // At this point DevToolsHost is ready to be used.\n            const host = window.DevToolsHost;\n            const old = host.sendMessageToEmbedder.bind(host);\n            host.sendMessageToEmbedder = message => {\n              if (['getPreferences', 'setPreference', 'removePreference', 'clearPreferences'].includes(JSON.parse(message).method))\n                window.${kBindingName}(message);\n              else\n                old(message);\n            };\n          };\n          let value;\n          Object.defineProperty(window, 'InspectorFrontendHost', {\n            configurable: true,\n            enumerable: true,\n            get() { return value; },\n            set(v) { value = v; init(); },\n          });\n        })()\n      ` }),\n      session.send('Runtime.runIfWaitingForDebugger'),\n    ]).catch(e => null);\n  }\n\n  _save() {\n    // Serialize saves to avoid corruption.\n    this._savePromise = this._savePromise.then(async () => {\n      await fs.promises.writeFile(this._preferencesPath, JSON.stringify(this._prefs)).catch(e => null);\n    });\n  }\n}\n"],"file":"crDevTools.js"}