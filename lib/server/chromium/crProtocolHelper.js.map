{"version":3,"sources":["../../../src/server/chromium/crProtocolHelper.ts"],"names":["getExceptionMessage","exceptionDetails","exception","description","String","value","message","text","stackTrace","callframe","callFrames","location","url","lineNumber","columnNumber","functionName","releaseObject","client","objectId","send","catch","error","readProtocolStream","handle","path","eof","fd","fs","promises","open","bufs","response","buf","Buffer","from","data","base64Encoded","undefined","push","write","close","concat","toConsoleMessageLocation","length","exceptionToError","messageWithStack","lines","split","firstStackTraceLine","findIndex","line","startsWith","messageWithName","stack","slice","join","name","err","Error","toModifiersMask","modifiers","mask","has"],"mappings":";;;;;;;;;;;;AAmBA;;AAEA;;AACA;;;;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASO,SAASA,mBAAT,CAA6BC,gBAA7B,EAA0F;AAC/F,MAAIA,gBAAgB,CAACC,SAArB,EACE,OAAOD,gBAAgB,CAACC,SAAjB,CAA2BC,WAA3B,IAA0CC,MAAM,CAACH,gBAAgB,CAACC,SAAjB,CAA2BG,KAA5B,CAAvD;AACF,MAAIC,OAAO,GAAGL,gBAAgB,CAACM,IAA/B;;AACA,MAAIN,gBAAgB,CAACO,UAArB,EAAiC;AAC/B,SAAK,MAAMC,SAAX,IAAwBR,gBAAgB,CAACO,UAAjB,CAA4BE,UAApD,EAAgE;AAC9D,YAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAV,GAAgB,GAAhB,GAAsBH,SAAS,CAACI,UAAhC,GAA6C,GAA7C,GAAmDJ,SAAS,CAACK,YAA9E;AACA,YAAMC,YAAY,GAAGN,SAAS,CAACM,YAAV,IAA0B,aAA/C;AACAT,MAAAA,OAAO,IAAK,YAAWS,YAAa,KAAIJ,QAAS,GAAjD;AACD;AACF;;AACD,SAAOL,OAAP;AACD;;AAEM,eAAeU,aAAf,CAA6BC,MAA7B,EAAgDC,QAAhD,EAAkE;AACvE,QAAMD,MAAM,CAACE,IAAP,CAAY,uBAAZ,EAAqC;AAAED,IAAAA;AAAF,GAArC,EAAmDE,KAAnD,CAAyDC,KAAK,IAAI,CAAE,CAApE,CAAN;AACD;;AAEM,eAAeC,kBAAf,CAAkCL,MAAlC,EAAqDM,MAArD,EAAqEC,IAArE,EAA2G;AAChH,MAAIC,GAAG,GAAG,KAAV;AACA,MAAIC,EAAJ;;AACA,MAAIF,IAAJ,EAAU;AACR,UAAM,0BAAcA,IAAd,CAAN;AACAE,IAAAA,EAAE,GAAG,MAAMC,YAAGC,QAAH,CAAYC,IAAZ,CAAiBL,IAAjB,EAAuB,GAAvB,CAAX;AACD;;AACD,QAAMM,IAAI,GAAG,EAAb;;AACA,SAAO,CAACL,GAAR,EAAa;AACX,UAAMM,QAAQ,GAAG,MAAMd,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAuB;AAACI,MAAAA;AAAD,KAAvB,CAAvB;AACAE,IAAAA,GAAG,GAAGM,QAAQ,CAACN,GAAf;AACA,UAAMO,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACI,IAArB,EAA2BJ,QAAQ,CAACK,aAAT,GAAyB,QAAzB,GAAoCC,SAA/D,CAAZ;AACAP,IAAAA,IAAI,CAACQ,IAAL,CAAUN,GAAV;AACA,QAAIN,EAAJ,EACE,MAAMA,EAAE,CAACa,KAAH,CAASP,GAAT,CAAN;AACH;;AACD,MAAIN,EAAJ,EACE,MAAMA,EAAE,CAACc,KAAH,EAAN;AACF,QAAMvB,MAAM,CAACE,IAAP,CAAY,UAAZ,EAAwB;AAACI,IAAAA;AAAD,GAAxB,CAAN;AACA,SAAOU,MAAM,CAACQ,MAAP,CAAcX,IAAd,CAAP;AACD;;AAEM,SAASY,wBAAT,CAAkClC,UAAlC,EAAqH;AAC1H,SAAOA,UAAU,IAAIA,UAAU,CAACE,UAAX,CAAsBiC,MAApC,GAA6C;AAClD/B,IAAAA,GAAG,EAAEJ,UAAU,CAACE,UAAX,CAAsB,CAAtB,EAAyBE,GADoB;AAElDC,IAAAA,UAAU,EAAEL,UAAU,CAACE,UAAX,CAAsB,CAAtB,EAAyBG,UAFa;AAGlDC,IAAAA,YAAY,EAAEN,UAAU,CAACE,UAAX,CAAsB,CAAtB,EAAyBI;AAHW,GAA7C,GAIH;AAAEF,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,UAAU,EAAE,CAAvB;AAA0BC,IAAAA,YAAY,EAAE;AAAxC,GAJJ;AAKD;;AAEM,SAAS8B,gBAAT,CAA0B3C,gBAA1B,EAAsF;AAC3F,QAAM4C,gBAAgB,GAAG7C,mBAAmB,CAACC,gBAAD,CAA5C;AACA,QAAM6C,KAAK,GAAGD,gBAAgB,CAACE,KAAjB,CAAuB,IAAvB,CAAd;AACA,QAAMC,mBAAmB,GAAGF,KAAK,CAACG,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACC,UAAL,CAAgB,QAAhB,CAAxB,CAA5B;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAIL,mBAAmB,KAAK,CAAC,CAA7B,EAAgC;AAC9BI,IAAAA,eAAe,GAAGP,gBAAlB;AACD,GAFD,MAEO;AACLO,IAAAA,eAAe,GAAGN,KAAK,CAACQ,KAAN,CAAY,CAAZ,EAAeN,mBAAf,EAAoCO,IAApC,CAAyC,IAAzC,CAAlB;AACAF,IAAAA,KAAK,GAAGR,gBAAR;AACD;;AACD,QAAM;AAACW,IAAAA,IAAD;AAAOlD,IAAAA;AAAP,MAAkB,mCAAkB8C,eAAlB,CAAxB;AAEA,QAAMK,GAAG,GAAG,IAAIC,KAAJ,CAAUpD,OAAV,CAAZ;AACAmD,EAAAA,GAAG,CAACJ,KAAJ,GAAYA,KAAZ;AACAI,EAAAA,GAAG,CAACD,IAAJ,GAAWA,IAAX;AACA,SAAOC,GAAP;AACD;;AAEM,SAASE,eAAT,CAAyBC,SAAzB,EAAyE;AAC9E,MAAIC,IAAI,GAAG,CAAX;AACA,MAAID,SAAS,CAACE,GAAV,CAAc,KAAd,CAAJ,EACED,IAAI,IAAI,CAAR;AACF,MAAID,SAAS,CAACE,GAAV,CAAc,SAAd,CAAJ,EACED,IAAI,IAAI,CAAR;AACF,MAAID,SAAS,CAACE,GAAV,CAAc,MAAd,CAAJ,EACED,IAAI,IAAI,CAAR;AACF,MAAID,SAAS,CAACE,GAAV,CAAc,OAAd,CAAJ,EACED,IAAI,IAAI,CAAR;AACF,SAAOA,IAAP;AACD","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CRSession } from './crConnection';\nimport { Protocol } from './protocol';\nimport fs from 'fs';\nimport * as types from '../types';\nimport { mkdirIfNeeded } from '../../utils/utils';\nimport { splitErrorMessage } from '../../utils/stackTrace';\n\nexport function getExceptionMessage(exceptionDetails: Protocol.Runtime.ExceptionDetails): string {\n  if (exceptionDetails.exception)\n    return exceptionDetails.exception.description || String(exceptionDetails.exception.value);\n  let message = exceptionDetails.text;\n  if (exceptionDetails.stackTrace) {\n    for (const callframe of exceptionDetails.stackTrace.callFrames) {\n      const location = callframe.url + ':' + callframe.lineNumber + ':' + callframe.columnNumber;\n      const functionName = callframe.functionName || '<anonymous>';\n      message += `\\n    at ${functionName} (${location})`;\n    }\n  }\n  return message;\n}\n\nexport async function releaseObject(client: CRSession, objectId: string) {\n  await client.send('Runtime.releaseObject', { objectId }).catch(error => {});\n}\n\nexport async function readProtocolStream(client: CRSession, handle: string, path: string | null): Promise<Buffer> {\n  let eof = false;\n  let fd: fs.promises.FileHandle | undefined;\n  if (path) {\n    await mkdirIfNeeded(path);\n    fd = await fs.promises.open(path, 'w');\n  }\n  const bufs = [];\n  while (!eof) {\n    const response = await client.send('IO.read', {handle});\n    eof = response.eof;\n    const buf = Buffer.from(response.data, response.base64Encoded ? 'base64' : undefined);\n    bufs.push(buf);\n    if (fd)\n      await fd.write(buf);\n  }\n  if (fd)\n    await fd.close();\n  await client.send('IO.close', {handle});\n  return Buffer.concat(bufs);\n}\n\nexport function toConsoleMessageLocation(stackTrace: Protocol.Runtime.StackTrace | undefined): types.ConsoleMessageLocation {\n  return stackTrace && stackTrace.callFrames.length ? {\n    url: stackTrace.callFrames[0].url,\n    lineNumber: stackTrace.callFrames[0].lineNumber,\n    columnNumber: stackTrace.callFrames[0].columnNumber,\n  } : { url: '', lineNumber: 0, columnNumber: 0 };\n}\n\nexport function exceptionToError(exceptionDetails: Protocol.Runtime.ExceptionDetails): Error {\n  const messageWithStack = getExceptionMessage(exceptionDetails);\n  const lines = messageWithStack.split('\\n');\n  const firstStackTraceLine = lines.findIndex(line => line.startsWith('    at'));\n  let messageWithName = '';\n  let stack = '';\n  if (firstStackTraceLine === -1) {\n    messageWithName = messageWithStack;\n  } else {\n    messageWithName = lines.slice(0, firstStackTraceLine).join('\\n');\n    stack = messageWithStack;\n  }\n  const {name, message} = splitErrorMessage(messageWithName);\n\n  const err = new Error(message);\n  err.stack = stack;\n  err.name = name;\n  return err;\n}\n\nexport function toModifiersMask(modifiers: Set<types.KeyboardModifier>): number {\n  let mask = 0;\n  if (modifiers.has('Alt'))\n    mask |= 1;\n  if (modifiers.has('Control'))\n    mask |= 2;\n  if (modifiers.has('Meta'))\n    mask |= 4;\n  if (modifiers.has('Shift'))\n    mask |= 8;\n  return mask;\n}\n"],"file":"crProtocolHelper.js"}