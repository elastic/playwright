{"version":3,"sources":["../../../src/server/chromium/crConnection.ts"],"names":["ConnectionEvents","Disconnected","Symbol","kBrowserCloseMessageId","CRConnection","EventEmitter","constructor","transport","protocolLogger","browserLogsCollector","_lastId","_transport","_sessions","Map","_protocolLogger","_browserLogsCollector","rootSession","_closed","setMaxListeners","onmessage","_onMessage","bind","onclose","_onClose","CRSession","set","fromSession","session","_connection","sessionId","get","_rawSend","method","params","id","message","send","rootSessionId","targetInfo","type","_onClosed","undefined","delete","browserDisconnectedLogs","helper","formatBrowserLogs","recentLogs","values","clear","Promise","resolve","then","emit","close","createSession","targetId","flatten","createBrowserSession","CRSessionEvents","connection","targetType","_eventListener","_callbacks","_targetType","_sessionId","_rootSessionId","_crashed","_browserDisconnectedLogs","on","addListener","off","removeListener","once","guid","_markAsCrashed","Error","reject","error","_sendMayFail","catch","debugLogger","log","object","has","callback","createProtocolError","result","detach","errorMessage","protocolError","data"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../../utils/utils';\nimport { ConnectionTransport, ProtocolRequest, ProtocolResponse } from '../transport';\nimport { Protocol } from './protocol';\nimport { EventEmitter } from 'events';\nimport { rewriteErrorMessage } from '../../utils/stackTrace';\nimport { debugLogger, RecentLogsCollector } from '../../utils/debugLogger';\nimport { ProtocolLogger } from '../types';\nimport { helper } from '../helper';\n\nexport const ConnectionEvents = {\n  Disconnected: Symbol('ConnectionEvents.Disconnected')\n};\n\n// CRPlaywright uses this special id to issue Browser.close command which we\n// should ignore.\nexport const kBrowserCloseMessageId = -9999;\n\nexport class CRConnection extends EventEmitter {\n  private _lastId = 0;\n  private readonly _transport: ConnectionTransport;\n  private readonly _sessions = new Map<string, CRSession>();\n  private readonly _protocolLogger: ProtocolLogger;\n  private readonly _browserLogsCollector: RecentLogsCollector;\n  readonly rootSession: CRSession;\n  _closed = false;\n\n  constructor(transport: ConnectionTransport, protocolLogger: ProtocolLogger, browserLogsCollector: RecentLogsCollector) {\n    super();\n    this.setMaxListeners(0);\n    this._transport = transport;\n    this._protocolLogger = protocolLogger;\n    this._browserLogsCollector = browserLogsCollector;\n    this._transport.onmessage = this._onMessage.bind(this);\n    this._transport.onclose = this._onClose.bind(this);\n    this.rootSession = new CRSession(this, '', 'browser', '');\n    this._sessions.set('', this.rootSession);\n  }\n\n  static fromSession(session: CRSession): CRConnection {\n    return session._connection!;\n  }\n\n  session(sessionId: string): CRSession | null {\n    return this._sessions.get(sessionId) || null;\n  }\n\n  _rawSend(sessionId: string, method: string, params: any): number {\n    const id = ++this._lastId;\n    const message: ProtocolRequest = { id, method, params };\n    if (sessionId)\n      message.sessionId = sessionId;\n    this._protocolLogger('send', message);\n    this._transport.send(message);\n    return id;\n  }\n\n  async _onMessage(message: ProtocolResponse) {\n    this._protocolLogger('receive', message);\n    if (message.id === kBrowserCloseMessageId)\n      return;\n    if (message.method === 'Target.attachedToTarget') {\n      const sessionId = message.params.sessionId;\n      const rootSessionId = message.sessionId || '';\n      const session = new CRSession(this, rootSessionId, message.params.targetInfo.type, sessionId);\n      this._sessions.set(sessionId, session);\n    } else if (message.method === 'Target.detachedFromTarget') {\n      const session = this._sessions.get(message.params.sessionId);\n      if (session) {\n        session._onClosed(undefined);\n        this._sessions.delete(message.params.sessionId);\n      }\n    }\n    const session = this._sessions.get(message.sessionId || '');\n    if (session)\n      session._onMessage(message);\n  }\n\n  _onClose() {\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n    const browserDisconnectedLogs = helper.formatBrowserLogs(this._browserLogsCollector.recentLogs());\n    for (const session of this._sessions.values())\n      session._onClosed(browserDisconnectedLogs);\n    this._sessions.clear();\n    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));\n  }\n\n  close() {\n    if (!this._closed)\n      this._transport.close();\n  }\n\n  async createSession(targetInfo: Protocol.Target.TargetInfo): Promise<CRSession> {\n    const { sessionId } = await this.rootSession.send('Target.attachToTarget', { targetId: targetInfo.targetId, flatten: true });\n    return this._sessions.get(sessionId)!;\n  }\n\n  async createBrowserSession(): Promise<CRSession> {\n    const { sessionId } = await this.rootSession.send('Target.attachToBrowserTarget');\n    return this._sessions.get(sessionId)!;\n  }\n}\n\nexport const CRSessionEvents = {\n  Disconnected: Symbol('Events.CDPSession.Disconnected')\n};\n\nexport class CRSession extends EventEmitter {\n  _connection: CRConnection | null;\n  _eventListener?: (method: string, params?: Object) => void;\n  private readonly _callbacks = new Map<number, {resolve: (o: any) => void, reject: (e: Error) => void, error: Error, method: string}>();\n  private readonly _targetType: string;\n  private readonly _sessionId: string;\n  private readonly _rootSessionId: string;\n  private _crashed: boolean = false;\n  private _browserDisconnectedLogs: string | undefined;\n  on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  readonly guid: string;\n\n  constructor(connection: CRConnection, rootSessionId: string, targetType: string, sessionId: string) {\n    super();\n    this.guid = `cdp-session@${sessionId}`;\n    this.setMaxListeners(0);\n    this._connection = connection;\n    this._rootSessionId = rootSessionId;\n    this._targetType = targetType;\n    this._sessionId = sessionId;\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  _markAsCrashed() {\n    this._crashed = true;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    if (this._crashed)\n      throw new Error('Target crashed');\n    if (this._browserDisconnectedLogs !== undefined)\n      throw new Error(`Protocol error (${method}): Browser closed.` + this._browserDisconnectedLogs);\n    if (!this._connection)\n      throw new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`);\n    const id = this._connection._rawSend(this._sessionId, method, params);\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {resolve, reject, error: new Error(), method});\n    });\n  }\n\n  _sendMayFail<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T] | void> {\n    return this.send(method, params).catch((error: Error) => debugLogger.log('error', error));\n  }\n\n  _onMessage(object: ProtocolResponse) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id)!;\n      this._callbacks.delete(object.id);\n      if (object.error)\n        callback.reject(createProtocolError(callback.error, callback.method, object.error));\n      else\n        callback.resolve(object.result);\n    } else {\n      assert(!object.id);\n      Promise.resolve().then(() => {\n        if (this._eventListener)\n          this._eventListener(object.method!, object.params);\n        this.emit(object.method!, object.params);\n      });\n    }\n  }\n\n  async detach() {\n    if (!this._connection)\n      throw new Error(`Session already detached. Most likely the ${this._targetType} has been closed.`);\n    const rootSession = this._connection.session(this._rootSessionId);\n    if (!rootSession)\n      throw new Error('Root session has been closed');\n    await rootSession.send('Target.detachFromTarget', { sessionId: this._sessionId });\n  }\n\n  _onClosed(browserDisconnectedLogs: string | undefined) {\n    this._browserDisconnectedLogs = browserDisconnectedLogs;\n    const errorMessage = browserDisconnectedLogs !== undefined ? 'Browser closed.' + browserDisconnectedLogs : 'Target closed.';\n    for (const callback of this._callbacks.values())\n      callback.reject(rewriteErrorMessage(callback.error, `Protocol error (${callback.method}): ` + errorMessage));\n    this._callbacks.clear();\n    this._connection = null;\n    Promise.resolve().then(() => this.emit(CRSessionEvents.Disconnected));\n  }\n}\n\nfunction createProtocolError(error: Error, method: string, protocolError: { message: string; data: any; }): Error {\n  let message = `Protocol error (${method}): ${protocolError.message}`;\n  if ('data' in protocolError)\n    message += ` ${protocolError.data}`;\n  return rewriteErrorMessage(error, message);\n}\n"],"file":"crConnection.js"}