{"version":3,"sources":["../../../src/server/chromium/crInput.ts"],"names":["RawKeyboardImpl","constructor","_client","_isMac","_dragManger","_commandsForCode","code","modifiers","parts","modifier","has","push","shortcut","join","commands","macEditingCommands","filter","x","startsWith","map","c","substring","length","keydown","keyCode","keyCodeWithoutLocation","key","location","autoRepeat","text","cancelDrag","send","type","windowsVirtualKeyCode","unmodifiedText","isKeypad","input","keypadLocation","keyup","sendText","RawMouseImpl","page","client","dragManager","_page","_dragManager","move","y","button","buttons","interceptDragCausedByMove","down","clickCount","isDragging","up","drop","RawTouchscreenImpl","tap","Promise","all","touchPoints"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as input from '../input';\nimport * as types from '../types';\nimport { CRSession } from './crConnection';\nimport { macEditingCommands } from '../macEditingCommands';\nimport { isString } from '../../utils/utils';\nimport { DragManager } from './crDragDrop';\nimport { CRPage } from './crPage';\nimport { toModifiersMask } from './crProtocolHelper';\n\nexport class RawKeyboardImpl implements input.RawKeyboard {\n  constructor(\n    private _client: CRSession,\n    private _isMac: boolean,\n    private _dragManger: DragManager,\n  ) { }\n\n  _commandsForCode(code: string, modifiers: Set<types.KeyboardModifier>) {\n    if (!this._isMac)\n      return [];\n    const parts = [];\n    for (const modifier of (['Shift', 'Control', 'Alt', 'Meta']) as types.KeyboardModifier[]) {\n      if (modifiers.has(modifier))\n        parts.push(modifier);\n    }\n    parts.push(code);\n    const shortcut = parts.join('+');\n    let commands = macEditingCommands[shortcut] || [];\n    if (isString(commands))\n      commands = [commands];\n    // Commands that insert text are not supported\n    commands = commands.filter(x => !x.startsWith('insert'));\n    // remove the trailing : to match the Chromium command names.\n    return commands.map(c => c.substring(0, c.length - 1));\n  }\n\n  async keydown(modifiers: Set<types.KeyboardModifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void> {\n    if (code === 'Escape' && await this._dragManger.cancelDrag())\n      return;\n    const commands = this._commandsForCode(code, modifiers);\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: toModifiersMask(modifiers),\n      windowsVirtualKeyCode: keyCodeWithoutLocation,\n      code,\n      commands,\n      key,\n      text,\n      unmodifiedText: text,\n      autoRepeat,\n      location,\n      isKeypad: location === input.keypadLocation\n    });\n  }\n\n  async keyup(modifiers: Set<types.KeyboardModifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void> {\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: toModifiersMask(modifiers),\n      key,\n      windowsVirtualKeyCode: keyCodeWithoutLocation,\n      code,\n      location\n    });\n  }\n\n  async sendText(text: string): Promise<void> {\n    await this._client.send('Input.insertText', { text });\n  }\n}\n\nexport class RawMouseImpl implements input.RawMouse {\n  private _client: CRSession;\n  private _page: CRPage;\n  private _dragManager: DragManager;\n\n  constructor(page: CRPage, client: CRSession, dragManager: DragManager) {\n    this._page = page;\n    this._client = client;\n    this._dragManager = dragManager;\n  }\n\n  async move(x: number, y: number, button: types.MouseButton | 'none', buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>): Promise<void> {\n    await this._dragManager.interceptDragCausedByMove(x, y, button, buttons, modifiers, async () => {\n      await this._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button,\n        x,\n        y,\n        modifiers: toModifiersMask(modifiers)\n      });\n    });\n  }\n\n  async down(x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    if (this._dragManager.isDragging())\n      return;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    });\n  }\n\n  async up(x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    if (this._dragManager.isDragging()) {\n      await this._dragManager.drop(x, y, modifiers);\n      return;\n    }\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    });\n  }\n}\n\nexport class RawTouchscreenImpl implements input.RawTouchscreen {\n  private _client: CRSession;\n\n  constructor(client: CRSession) {\n    this._client = client;\n  }\n  async tap(x: number, y: number, modifiers: Set<types.KeyboardModifier>) {\n    await Promise.all([\n      this._client.send('Input.dispatchTouchEvent', {\n        type: 'touchStart',\n        modifiers: toModifiersMask(modifiers),\n        touchPoints: [{\n          x, y\n        }]\n      }),\n      this._client.send('Input.dispatchTouchEvent', {\n        type: 'touchEnd',\n        modifiers: toModifiersMask(modifiers),\n        touchPoints: []\n      }),\n    ]);\n  }\n}\n"],"file":"crInput.js"}