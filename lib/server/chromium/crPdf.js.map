{"version":3,"sources":["../../../src/server/chromium/crPdf.ts"],"names":["PagePaperFormats","letter","width","height","legal","tabloid","ledger","a0","a1","a2","a3","a4","a5","a6","unitToPixels","convertPrintParameterToInches","text","undefined","unit","substring","length","toLowerCase","valueText","hasOwnProperty","value","Number","isNaN","pixels","CRPDF","constructor","client","_client","generate","options","scale","displayHeaderFooter","headerTemplate","footerTemplate","printBackground","landscape","pageRanges","preferCSSPageSize","margin","paperWidth","paperHeight","format","marginTop","top","marginLeft","left","marginBottom","bottom","marginRight","right","result","send","transferMode","stream"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '../../utils/utils';\nimport * as types from '../types';\nimport { CRSession } from './crConnection';\nimport { readProtocolStream } from './crProtocolHelper';\n\nconst PagePaperFormats: { [key: string]: { width: number, height: number }} = {\n  letter: {width: 8.5, height: 11},\n  legal: {width: 8.5, height: 14},\n  tabloid: {width: 11, height: 17},\n  ledger: {width: 17, height: 11},\n  a0: {width: 33.1, height: 46.8 },\n  a1: {width: 23.4, height: 33.1 },\n  a2: {width: 16.54, height: 23.4 },\n  a3: {width: 11.7, height: 16.54 },\n  a4: {width: 8.27, height: 11.7 },\n  a5: {width: 5.83, height: 8.27 },\n  a6: {width: 4.13, height: 5.83 },\n};\n\nconst unitToPixels: { [key: string]: number } = {\n  'px': 1,\n  'in': 96,\n  'cm': 37.8,\n  'mm': 3.78\n};\n\nfunction convertPrintParameterToInches(text: string | undefined): number | undefined {\n  if (text === undefined)\n    return undefined;\n  let unit = text.substring(text.length - 2).toLowerCase();\n  let valueText = '';\n  if (unitToPixels.hasOwnProperty(unit)) {\n    valueText = text.substring(0, text.length - 2);\n  } else {\n    // In case of unknown unit try to parse the whole parameter as number of pixels.\n    // This is consistent with phantom's paperSize behavior.\n    unit = 'px';\n    valueText = text;\n  }\n  const value = Number(valueText);\n  assert(!isNaN(value), 'Failed to parse parameter value: ' + text);\n  const pixels = value * unitToPixels[unit];\n  return pixels / 96;\n}\n\nexport class CRPDF {\n  private _client: CRSession;\n\n  constructor(client: CRSession) {\n    this._client = client;\n  }\n\n  async generate(options: types.PDFOptions = {}): Promise<Buffer> {\n    const {\n      scale = 1,\n      displayHeaderFooter = false,\n      headerTemplate = '',\n      footerTemplate = '',\n      printBackground = false,\n      landscape = false,\n      pageRanges = '',\n      preferCSSPageSize = false,\n      margin = {},\n    } = options;\n\n    let paperWidth = 8.5;\n    let paperHeight = 11;\n    if (options.format) {\n      const format = PagePaperFormats[options.format.toLowerCase()];\n      assert(format, 'Unknown paper format: ' + options.format);\n      paperWidth = format.width;\n      paperHeight = format.height;\n    } else {\n      paperWidth = convertPrintParameterToInches(options.width) || paperWidth;\n      paperHeight = convertPrintParameterToInches(options.height) || paperHeight;\n    }\n\n    const marginTop = convertPrintParameterToInches(margin.top) || 0;\n    const marginLeft = convertPrintParameterToInches(margin.left) || 0;\n    const marginBottom = convertPrintParameterToInches(margin.bottom) || 0;\n    const marginRight = convertPrintParameterToInches(margin.right) || 0;\n\n    const result = await this._client.send('Page.printToPDF', {\n      transferMode: 'ReturnAsStream',\n      landscape,\n      displayHeaderFooter,\n      headerTemplate,\n      footerTemplate,\n      printBackground,\n      scale,\n      paperWidth,\n      paperHeight,\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      pageRanges,\n      preferCSSPageSize\n    });\n    return await readProtocolStream(this._client, result.stream!, null);\n  }\n}\n"],"file":"crPdf.js"}