{"version":3,"sources":["../../../src/server/chromium/videoRecorder.ts"],"names":["fps","VideoRecorder","launch","page","ffmpegPath","options","outputFile","endsWith","Error","controller","ProgressController","setLogName","run","progress","recorder","_launch","constructor","_process","_gracefullyClose","_lastWritePromise","Promise","resolve","_lastFrameTimestamp","_lastFrameBuffer","_lastWriteTimestamp","_progress","_frameQueue","_isStopped","_ffmpegPath","on","Page","Events","ScreencastFrame","frame","writeFrame","buffer","timestamp","w","width","h","height","args","split","push","launchedProcess","gracefullyClose","command","stdio","log","message","tempDirectories","attemptToGracefullyClose","stdin","end","onExit","exitCode","signal","durationSec","repeatCount","Math","max","round","i","then","_sendFrames","length","_sendFrame","shift","f","write","error","stop","Buffer","from"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildProcess } from 'child_process';\nimport { assert, monotonicTime } from '../../utils/utils';\nimport { Page } from '../page';\nimport { launchProcess } from '../../utils/processLauncher';\nimport { Progress, ProgressController } from '../progress';\nimport { internalCallMetadata } from '../instrumentation';\nimport * as types from '../types';\n\nconst fps = 25;\n\nexport class VideoRecorder {\n  private _process: ChildProcess | null = null;\n  private _gracefullyClose: (() => Promise<void>) | null = null;\n  private _lastWritePromise: Promise<void> = Promise.resolve();\n  private _lastFrameTimestamp: number = 0;\n  private _lastFrameBuffer: Buffer | null = null;\n  private _lastWriteTimestamp: number = 0;\n  private readonly _progress: Progress;\n  private _frameQueue: Buffer[] = [];\n  private _isStopped = false;\n  private _ffmpegPath: string;\n\n  static async launch(page: Page, ffmpegPath: string, options: types.PageScreencastOptions): Promise<VideoRecorder> {\n    if (!options.outputFile.endsWith('.webm'))\n      throw new Error('File must have .webm extension');\n\n    const controller = new ProgressController(internalCallMetadata(), page);\n    controller.setLogName('browser');\n    return await controller.run(async progress => {\n      const recorder = new VideoRecorder(page, ffmpegPath, progress);\n      await recorder._launch(options);\n      return recorder;\n    });\n  }\n\n  private constructor(page: Page, ffmpegPath: string, progress: Progress) {\n    this._progress = progress;\n    this._ffmpegPath = ffmpegPath;\n    page.on(Page.Events.ScreencastFrame, frame => this.writeFrame(frame.buffer, frame.timestamp));\n  }\n\n  private async _launch(options: types.PageScreencastOptions) {\n    // How to tune the codec:\n    // 1. Read vp8 documentation to figure out the options.\n    //   https://www.webmproject.org/docs/encoder-parameters/\n    // 2. Use the following command to map the options to ffmpeg arguments.\n    //   $ ./third_party/ffmpeg/ffmpeg-mac -h encoder=vp8\n    // 3. A bit more about passing vp8 options to ffmpeg.\n    //   https://trac.ffmpeg.org/wiki/Encode/VP8\n    //\n    // We use the following vp8 options:\n    //   \"-qmin 0 -qmax 50\" - quality variation from 0 to 50.\n    //     Suggested here: https://trac.ffmpeg.org/wiki/Encode/VP8\n    //   \"-crf 8\" - constant quality mode, 4-63, lower means better quality.\n    //   \"-deadline realtime\" - do not use too much cpu to keep up with incoming frames.\n    //   \"-b:v 1M\" - video bitrate. Default value is too low for vp8\n    //     Suggested here: https://trac.ffmpeg.org/wiki/Encode/VP8\n    //\n    // We use \"pad\" and \"crop\" video filters (-vf option) to resize incoming frames\n    // that might be of the different size to the desired video size.\n    //   https://ffmpeg.org/ffmpeg-filters.html#pad-1\n    //   https://ffmpeg.org/ffmpeg-filters.html#crop\n    //\n    // We use \"image2pipe\" mode to pipe frames and get a single video.\n    // \"-f image2pipe -c:v mjpeg -i -\" forces input to be read from standard input, and forces\n    // mjpeg input image format.\n    //   https://trac.ffmpeg.org/wiki/Slideshow\n    //\n    // \"-y\" means overwrite output.\n    // \"-an\" means no audio.\n\n    const w = options.width;\n    const h = options.height;\n    const args = `-loglevel error -f image2pipe -c:v mjpeg -i - -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -b:v 1M -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(' ');\n    args.push(options.outputFile);\n    const progress = this._progress;\n\n    const { launchedProcess, gracefullyClose } = await launchProcess({\n      command: this._ffmpegPath,\n      args,\n      stdio: 'stdin',\n      log: (message: string) => progress.log(message),\n      tempDirectories: [],\n      attemptToGracefullyClose: async () => {\n        progress.log('Closing stdin...');\n        launchedProcess.stdin.end();\n      },\n      onExit: (exitCode, signal) => {\n        progress.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);\n      },\n    });\n    launchedProcess.stdin.on('finish', () => {\n      progress.log('ffmpeg finished input.');\n    });\n    launchedProcess.stdin.on('error', () => {\n      progress.log('ffmpeg error.');\n    });\n    this._process = launchedProcess;\n    this._gracefullyClose = gracefullyClose;\n  }\n\n  writeFrame(frame: Buffer, timestamp: number) {\n    assert(this._process);\n    if (this._isStopped)\n      return;\n    this._progress.log(`writing frame ` + timestamp);\n\n    if (this._lastFrameBuffer) {\n      const durationSec = timestamp - this._lastFrameTimestamp;\n      const repeatCount = Math.max(1, Math.round(fps * durationSec));\n      for (let i = 0; i < repeatCount; ++i)\n        this._frameQueue.push(this._lastFrameBuffer);\n      this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());\n    }\n\n    this._lastFrameBuffer = frame;\n    this._lastFrameTimestamp = timestamp;\n    this._lastWriteTimestamp = monotonicTime();\n  }\n\n  private async _sendFrames() {\n    while (this._frameQueue.length)\n      await this._sendFrame(this._frameQueue.shift()!);\n  }\n\n  private async _sendFrame(frame: Buffer) {\n    return new Promise(f => this._process!.stdin.write(frame, f)).then(error => {\n      if (error)\n        this._progress.log(`ffmpeg failed to write: ${error}`);\n    });\n  }\n\n  async stop() {\n    if (this._isStopped)\n      return;\n    this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000);\n    this._isStopped = true;\n    await this._lastWritePromise;\n    await this._gracefullyClose!();\n  }\n}\n"],"file":"videoRecorder.js"}