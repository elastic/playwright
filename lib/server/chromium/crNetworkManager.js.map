{"version":3,"sources":["../../../src/server/chromium/crNetworkManager.ts"],"names":["CRNetworkManager","constructor","client","page","parentManager","_client","_page","_parentManager","_requestIdToRequest","Map","_requestIdToRequestWillBeSentEvent","_credentials","_attemptedAuthentications","Set","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","_requestIdToRequestPausedEvent","_eventListeners","_requestIdToExtraInfo","instrumentNetworkEvents","session","workerFrame","eventsHelper","addEventListener","_onRequestPaused","bind","_onAuthRequired","_onRequestWillBeSent","_onRequestWillBeSentExtraInfo","_onResponseReceived","_onLoadingFinished","_onLoadingFailed","e","_frameManager","onWebSocketCreated","requestId","url","onWebSocketRequest","onWebSocketResponse","response","status","statusText","payloadData","onWebSocketFrameSent","opcode","webSocketFrameReceived","webSocketClosed","webSocketError","errorMessage","initialize","send","dispose","removeEventListeners","authenticate","credentials","_updateProtocolRequestInterception","setOffline","offline","latency","downloadThroughput","uploadThroughput","setRequestInterception","value","enabled","Promise","all","cacheDisabled","handleAuthRequests","patterns","urlPattern","requestStage","event","request","startsWith","requestPausedEvent","get","_onRequest","delete","set","extraInfo","updateWithRawHeaders","headers","has","add","username","password","undefined","_sendMayFail","authChallengeResponse","networkId","errorReason","responseStatusCode","responseErrorReason","isRedirect","route","_routeForRedirectChain","_interceptingResponse","_responseInterceptedCallback","requestWillBeSentEvent","redirectedFrom","redirectResponse","_handleRequestRedirect","timestamp","frame","frameId","_delegate","_targetId","frameAttached","method","_needsRequestInterception","requestHeaders","responseHeaders","name","push","responseCode","responsePhrase","network","STATUS_TEXTS","body","RouteImpl","isNavigationRequest","loaderId","type","documentId","InterceptableRequest","requestStarted","_createResponse","responsePayload","getResponseBody","_requestId","Buffer","from","base64Encoded","timingPayload","timing","startTime","requestTime","_timestamp","_wallTime","domainLookupStart","dnsStart","domainLookupEnd","dnsEnd","connectStart","secureConnectionStart","sslStart","connectEnd","requestStart","sendStart","responseStart","receiveHeadersEnd","Response","protocol","remoteIPAddress","remotePort","_serverAddrFinished","ipAddress","port","_securityDetailsFinished","securityDetails","subjectName","issuer","validFrom","validTo","_requestFinished","_interceptionId","requestReceivedResponse","requestFinished","_maybeAdoptMainRequest","_existingResponse","helper","secondsToRoundishMillis","encodedDataLength","_setFailureText","errorText","requestFailed","canceled","_documentId","options","_route","_redirectedFrom","wallTime","postDataEntries","toLowerCase","postDataBuffer","length","bytes","Request","interceptionId","_responseInterceptedPromise","resolve","responseBody","continue","overrides","interceptResponse","postData","toString","Error","InterceptedResponse","fulfill","isBase64","String","abort","errorCode","errorReasons"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CRSession } from './crConnection';\nimport { Page } from '../page';\nimport { helper } from '../helper';\nimport { eventsHelper, RegisteredListener } from '../../utils/eventsHelper';\nimport { Protocol } from './protocol';\nimport * as network from '../network';\nimport * as frames from '../frames';\nimport * as types from '../types';\nimport { CRPage } from './crPage';\nimport { assert, headersObjectToArray } from '../../utils/utils';\n\nexport class CRNetworkManager {\n  private _client: CRSession;\n  private _page: Page;\n  private _parentManager: CRNetworkManager | null;\n  private _requestIdToRequest = new Map<string, InterceptableRequest>();\n  private _requestIdToRequestWillBeSentEvent = new Map<string, Protocol.Network.requestWillBeSentPayload>();\n  private _credentials: {username: string, password: string} | null = null;\n  private _attemptedAuthentications = new Set<string>();\n  private _userRequestInterceptionEnabled = false;\n  private _protocolRequestInterceptionEnabled = false;\n  private _requestIdToRequestPausedEvent = new Map<string, Protocol.Fetch.requestPausedPayload>();\n  private _eventListeners: RegisteredListener[];\n  private _requestIdToExtraInfo = new Map<string, Protocol.Network.requestWillBeSentExtraInfoPayload>();\n\n  constructor(client: CRSession, page: Page, parentManager: CRNetworkManager | null) {\n    this._client = client;\n    this._page = page;\n    this._parentManager = parentManager;\n    this._eventListeners = this.instrumentNetworkEvents(client);\n  }\n\n  instrumentNetworkEvents(session: CRSession, workerFrame?: frames.Frame): RegisteredListener[] {\n    return [\n      eventsHelper.addEventListener(session, 'Fetch.requestPaused', this._onRequestPaused.bind(this, workerFrame)),\n      eventsHelper.addEventListener(session, 'Fetch.authRequired', this._onAuthRequired.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.requestWillBeSent', this._onRequestWillBeSent.bind(this, workerFrame)),\n      eventsHelper.addEventListener(session, 'Network.requestWillBeSentExtraInfo', this._onRequestWillBeSentExtraInfo.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.responseReceived', this._onResponseReceived.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.loadingFinished', this._onLoadingFinished.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.loadingFailed', this._onLoadingFailed.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.webSocketCreated', e => this._page._frameManager.onWebSocketCreated(e.requestId, e.url)),\n      eventsHelper.addEventListener(session, 'Network.webSocketWillSendHandshakeRequest', e => this._page._frameManager.onWebSocketRequest(e.requestId)),\n      eventsHelper.addEventListener(session, 'Network.webSocketHandshakeResponseReceived', e => this._page._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)),\n      eventsHelper.addEventListener(session, 'Network.webSocketFrameSent', e => e.response.payloadData && this._page._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)),\n      eventsHelper.addEventListener(session, 'Network.webSocketFrameReceived', e => e.response.payloadData && this._page._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)),\n      eventsHelper.addEventListener(session, 'Network.webSocketClosed', e => this._page._frameManager.webSocketClosed(e.requestId)),\n      eventsHelper.addEventListener(session, 'Network.webSocketFrameError', e => this._page._frameManager.webSocketError(e.requestId, e.errorMessage)),\n    ];\n  }\n\n  async initialize() {\n    await this._client.send('Network.enable');\n  }\n\n  dispose() {\n    eventsHelper.removeEventListeners(this._eventListeners);\n  }\n\n  async authenticate(credentials: types.Credentials | null) {\n    this._credentials = credentials;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async setOffline(offline: boolean) {\n    await this._client.send('Network.emulateNetworkConditions', {\n      offline,\n      // values of 0 remove any active throttling. crbug.com/456324#c9\n      latency: 0,\n      downloadThroughput: -1,\n      uploadThroughput: -1\n    });\n  }\n\n  async setRequestInterception(value: boolean) {\n    this._userRequestInterceptionEnabled = value;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async _updateProtocolRequestInterception() {\n    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;\n    if (enabled === this._protocolRequestInterceptionEnabled)\n      return;\n    this._protocolRequestInterceptionEnabled = enabled;\n    if (enabled) {\n      await Promise.all([\n        this._client.send('Network.setCacheDisabled', { cacheDisabled: true }),\n        this._client.send('Fetch.enable', {\n          handleAuthRequests: true,\n          patterns: [{urlPattern: '*', requestStage: 'Request'}, {urlPattern: '*', requestStage: 'Response'}],\n        }),\n      ]);\n    } else {\n      await Promise.all([\n        this._client.send('Network.setCacheDisabled', { cacheDisabled: false }),\n        this._client.send('Fetch.disable')\n      ]);\n    }\n  }\n\n  _onRequestWillBeSent(workerFrame: frames.Frame | undefined, event: Protocol.Network.requestWillBeSentPayload) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith('data:')) {\n      const requestId = event.requestId;\n      const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);\n      if (requestPausedEvent) {\n        this._onRequest(workerFrame, event, requestPausedEvent);\n        this._requestIdToRequestPausedEvent.delete(requestId);\n      } else {\n        this._requestIdToRequestWillBeSentEvent.set(event.requestId, event);\n      }\n    } else {\n      this._onRequest(workerFrame, event, null);\n    }\n    const extraInfo = this._requestIdToExtraInfo.get(event.requestId);\n    if (extraInfo)\n      this._onRequestWillBeSentExtraInfo(extraInfo);\n  }\n\n  _onRequestWillBeSentExtraInfo(event: Protocol.Network.requestWillBeSentExtraInfoPayload) {\n    const request = this._requestIdToRequest.get(event.requestId);\n    if (request) {\n      request.request.updateWithRawHeaders(headersObjectToArray(event.headers));\n      this._requestIdToExtraInfo.delete(event.requestId);\n    } else {\n      this._requestIdToExtraInfo.set(event.requestId, event);\n    }\n  }\n\n  _onAuthRequired(event: Protocol.Fetch.authRequiredPayload) {\n    let response: 'Default' | 'CancelAuth' | 'ProvideCredentials' = 'Default';\n    if (this._attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this._credentials) {\n      response = 'ProvideCredentials';\n      this._attemptedAuthentications.add(event.requestId);\n    }\n    const {username, password} = this._credentials || {username: undefined, password: undefined};\n    this._client._sendMayFail('Fetch.continueWithAuth', {\n      requestId: event.requestId,\n      authChallengeResponse: { response, username, password },\n    });\n  }\n\n  _onRequestPaused(workerFrame: frames.Frame | undefined, event: Protocol.Fetch.requestPausedPayload) {\n    if (!this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {\n      this._client._sendMayFail('Fetch.continueRequest', {\n        requestId: event.requestId\n      });\n    }\n    if (!event.networkId) {\n      // Fetch without networkId means that request was not recongnized by inspector, and\n      // it will never receive Network.requestWillBeSent. Most likely, this is an internal request\n      // that we can safely fail.\n      this._client._sendMayFail('Fetch.failRequest', {\n        requestId: event.requestId,\n        errorReason: 'Aborted',\n      });\n      return;\n    }\n    if (event.request.url.startsWith('data:'))\n      return;\n\n    if (event.responseStatusCode || event.responseErrorReason) {\n      const isRedirect = event.responseStatusCode && event.responseStatusCode >= 300 && event.responseStatusCode < 400;\n      const request = this._requestIdToRequest.get(event.networkId!);\n      const route = request?._routeForRedirectChain();\n      if (isRedirect || !route || !route._interceptingResponse) {\n        this._client._sendMayFail('Fetch.continueRequest', {\n          requestId: event.requestId\n        });\n        return;\n      }\n      route._responseInterceptedCallback(event);\n      return;\n    }\n\n    const requestId = event.networkId;\n    const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);\n    if (requestWillBeSentEvent) {\n      this._onRequest(workerFrame, requestWillBeSentEvent, event);\n      this._requestIdToRequestWillBeSentEvent.delete(requestId);\n    } else {\n      this._requestIdToRequestPausedEvent.set(requestId, event);\n    }\n  }\n\n  _onRequest(workerFrame: frames.Frame | undefined, requestWillBeSentEvent: Protocol.Network.requestWillBeSentPayload, requestPausedEvent: Protocol.Fetch.requestPausedPayload | null) {\n    if (requestWillBeSentEvent.request.url.startsWith('data:'))\n      return;\n    let redirectedFrom: InterceptableRequest | null = null;\n    if (requestWillBeSentEvent.redirectResponse) {\n      const request = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);\n      // If we connect late to the target, we could have missed the requestWillBeSent event.\n      if (request) {\n        this._handleRequestRedirect(request, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp);\n        redirectedFrom = request;\n      }\n    }\n    let frame = requestWillBeSentEvent.frameId ? this._page._frameManager.frame(requestWillBeSentEvent.frameId) : workerFrame;\n    // Requests from workers lack frameId, because we receive Network.requestWillBeSent\n    // on the worker target. However, we receive Fetch.requestPaused on the page target,\n    // and lack workerFrame there. Luckily, Fetch.requestPaused provides a frameId.\n    if (!frame && requestPausedEvent && requestPausedEvent.frameId)\n      frame = this._page._frameManager.frame(requestPausedEvent.frameId);\n\n    // Check if it's main resource request interception (targetId === main frame id).\n    if (!frame && requestWillBeSentEvent.frameId === (this._page._delegate as CRPage)._targetId) {\n      // Main resource request for the page is being intercepted so the Frame is not created\n      // yet. Precreate it here for the purposes of request interception. It will be updated\n      // later as soon as the request continues and we receive frame tree from the page.\n      frame = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);\n    }\n\n    // CORS options request is generated by the network stack. If interception is enabled,\n    // we accept all CORS options, assuming that this was intended when setting route.\n    //\n    // Note: it would be better to match the URL against interception patterns, but\n    // that information is only available to the client. Perhaps we can just route to the client?\n    if (requestPausedEvent && requestPausedEvent.request.method === 'OPTIONS' && this._page._needsRequestInterception()) {\n      const requestHeaders = requestPausedEvent.request.headers;\n      const responseHeaders: Protocol.Fetch.HeaderEntry[] = [\n        { name: 'Access-Control-Allow-Origin', value: requestHeaders['Origin'] || '*' },\n        { name: 'Access-Control-Allow-Methods', value: requestHeaders['Access-Control-Request-Method'] || 'GET, POST, OPTIONS, DELETE' },\n        { name: 'Access-Control-Allow-Credentials', value: 'true' }\n      ];\n      if (requestHeaders['Access-Control-Request-Headers'])\n        responseHeaders.push({ name: 'Access-Control-Allow-Headers', value: requestHeaders['Access-Control-Request-Headers'] });\n      this._client._sendMayFail('Fetch.fulfillRequest', {\n        requestId: requestPausedEvent.requestId,\n        responseCode: 204,\n        responsePhrase: network.STATUS_TEXTS['204'],\n        responseHeaders,\n        body: '',\n      });\n      return;\n    }\n\n    if (!frame) {\n      if (requestPausedEvent)\n        this._client._sendMayFail('Fetch.continueRequest', { requestId: requestPausedEvent.requestId });\n      return;\n    }\n\n    let route = null;\n    if (requestPausedEvent) {\n      // We do not support intercepting redirects.\n      if (redirectedFrom)\n        this._client._sendMayFail('Fetch.continueRequest', { requestId: requestPausedEvent.requestId });\n      else\n        route = new RouteImpl(this._client, requestPausedEvent.requestId);\n    }\n    const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === 'Document';\n    const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : undefined;\n    const request = new InterceptableRequest({\n      frame,\n      documentId,\n      route,\n      requestWillBeSentEvent,\n      requestPausedEvent,\n      redirectedFrom\n    });\n    this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);\n    this._page._frameManager.requestStarted(request.request, route || undefined);\n  }\n\n  _createResponse(request: InterceptableRequest, responsePayload: Protocol.Network.Response): network.Response {\n    const getResponseBody = async () => {\n      const response = await this._client.send('Network.getResponseBody', { requestId: request._requestId });\n      return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n    };\n    const timingPayload = responsePayload.timing!;\n    let timing: network.ResourceTiming;\n    if (timingPayload) {\n      timing = {\n        startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1000,\n        domainLookupStart: timingPayload.dnsStart,\n        domainLookupEnd: timingPayload.dnsEnd,\n        connectStart: timingPayload.connectStart,\n        secureConnectionStart: timingPayload.sslStart,\n        connectEnd: timingPayload.connectEnd,\n        requestStart: timingPayload.sendStart,\n        responseStart: timingPayload.receiveHeadersEnd,\n      };\n    } else {\n      timing = {\n        startTime: request._wallTime * 1000,\n        domainLookupStart: -1,\n        domainLookupEnd: -1,\n        connectStart: -1,\n        secureConnectionStart: -1,\n        connectEnd: -1,\n        requestStart: -1,\n        responseStart: -1,\n      };\n    }\n    const response = new network.Response(request.request, responsePayload.status, responsePayload.statusText, headersObjectToArray(responsePayload.headers), timing, getResponseBody, responsePayload.protocol);\n    if (responsePayload?.remoteIPAddress && typeof responsePayload?.remotePort === 'number') {\n      response._serverAddrFinished({\n        ipAddress: responsePayload.remoteIPAddress,\n        port: responsePayload.remotePort,\n      });\n    } else {\n      response._serverAddrFinished();\n    }\n    response._securityDetailsFinished({\n      protocol: responsePayload?.securityDetails?.protocol,\n      subjectName: responsePayload?.securityDetails?.subjectName,\n      issuer: responsePayload?.securityDetails?.issuer,\n      validFrom: responsePayload?.securityDetails?.validFrom,\n      validTo: responsePayload?.securityDetails?.validTo,\n    });\n    return response;\n  }\n\n  _handleRequestRedirect(request: InterceptableRequest, responsePayload: Protocol.Network.Response, timestamp: number) {\n    const response = this._createResponse(request, responsePayload);\n    response._requestFinished((timestamp - request._timestamp) * 1000, 'Response body is unavailable for redirect responses');\n    this._requestIdToRequest.delete(request._requestId);\n    if (request._interceptionId)\n      this._attemptedAuthentications.delete(request._interceptionId);\n    this._page._frameManager.requestReceivedResponse(response);\n    this._page._frameManager.requestFinished(request.request);\n  }\n\n  _onResponseReceived(event: Protocol.Network.responseReceivedPayload) {\n    const request = this._requestIdToRequest.get(event.requestId);\n    // FileUpload sends a response without a matching request.\n    if (!request)\n      return;\n    const response = this._createResponse(request, event.response);\n    this._page._frameManager.requestReceivedResponse(response);\n  }\n\n  _onLoadingFinished(event: Protocol.Network.loadingFinishedPayload) {\n    let request = this._requestIdToRequest.get(event.requestId);\n    if (!request)\n      request = this._maybeAdoptMainRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request)\n      return;\n\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    const response = request.request._existingResponse();\n    if (response)\n      response._requestFinished(helper.secondsToRoundishMillis(event.timestamp - request._timestamp), undefined, event.encodedDataLength);\n    this._requestIdToRequest.delete(request._requestId);\n    if (request._interceptionId)\n      this._attemptedAuthentications.delete(request._interceptionId);\n    this._page._frameManager.requestFinished(request.request);\n  }\n\n  _onLoadingFailed(event: Protocol.Network.loadingFailedPayload) {\n    let request = this._requestIdToRequest.get(event.requestId);\n    if (!request)\n      request = this._maybeAdoptMainRequest(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request)\n      return;\n    const response = request.request._existingResponse();\n    if (response)\n      response._requestFinished(helper.secondsToRoundishMillis(event.timestamp - request._timestamp));\n    this._requestIdToRequest.delete(request._requestId);\n    if (request._interceptionId)\n      this._attemptedAuthentications.delete(request._interceptionId);\n    request.request._setFailureText(event.errorText);\n    this._page._frameManager.requestFailed(request.request, !!event.canceled);\n  }\n\n  private _maybeAdoptMainRequest(requestId: Protocol.Network.RequestId): InterceptableRequest | undefined {\n    // OOPIF has a main request that starts in the parent session but finishes in the child session.\n    if (!this._parentManager)\n      return;\n    const request = this._parentManager._requestIdToRequest.get(requestId);\n    // Main requests have matching loaderId and requestId.\n    if (!request || request._documentId !== requestId)\n      return;\n    this._requestIdToRequest.set(requestId, request);\n    this._parentManager._requestIdToRequest.delete(requestId);\n    if (request._interceptionId && this._parentManager._attemptedAuthentications.has(request._interceptionId)) {\n      this._parentManager._attemptedAuthentications.delete(request._interceptionId);\n      this._attemptedAuthentications.add(request._interceptionId);\n    }\n    return request;\n  }\n}\n\nclass InterceptableRequest {\n  readonly request: network.Request;\n  _requestId: string;\n  _interceptionId: string | null;\n  _documentId: string | undefined;\n  _timestamp: number;\n  _wallTime: number;\n  private _route: RouteImpl | null;\n  private _redirectedFrom: InterceptableRequest | null;\n\n  constructor(options: {\n    frame: frames.Frame;\n    documentId?: string;\n    route: RouteImpl | null;\n    requestWillBeSentEvent: Protocol.Network.requestWillBeSentPayload;\n    requestPausedEvent: Protocol.Fetch.requestPausedPayload | null;\n    redirectedFrom: InterceptableRequest | null;\n  }) {\n    const { frame, documentId, route, requestWillBeSentEvent, requestPausedEvent, redirectedFrom } = options;\n    this._timestamp = requestWillBeSentEvent.timestamp;\n    this._wallTime = requestWillBeSentEvent.wallTime;\n    this._requestId = requestWillBeSentEvent.requestId;\n    this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;\n    this._documentId = documentId;\n    this._route = route;\n    this._redirectedFrom = redirectedFrom;\n\n    const {\n      headers,\n      method,\n      url,\n      postDataEntries = null,\n    } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;\n    const type = (requestWillBeSentEvent.type || '').toLowerCase();\n    let postDataBuffer = null;\n    if (postDataEntries && postDataEntries.length && postDataEntries[0].bytes)\n      postDataBuffer = Buffer.from(postDataEntries[0].bytes, 'base64');\n\n    this.request = new network.Request(frame, redirectedFrom?.request || null, documentId, url, type, method, postDataBuffer, headersObjectToArray(headers));\n  }\n\n  _routeForRedirectChain(): RouteImpl | null {\n    let request: InterceptableRequest = this;\n    while (request._redirectedFrom)\n      request = request._redirectedFrom;\n    return request._route;\n  }\n}\n\nclass RouteImpl implements network.RouteDelegate {\n  private readonly _client: CRSession;\n  private _interceptionId: string;\n  private _responseInterceptedPromise: Promise<Protocol.Fetch.requestPausedPayload>;\n  _responseInterceptedCallback: ((event: Protocol.Fetch.requestPausedPayload) => void) = () => {};\n  _interceptingResponse: boolean = false;\n\n  constructor(client: CRSession, interceptionId: string) {\n    this._client = client;\n    this._interceptionId = interceptionId;\n    this._responseInterceptedPromise = new Promise(resolve => this._responseInterceptedCallback = resolve);\n  }\n\n  async responseBody(): Promise<Buffer> {\n    const response = await this._client.send('Fetch.getResponseBody', { requestId: this._interceptionId! });\n    return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n  }\n\n  async continue(request: network.Request, overrides: types.NormalizedContinueOverrides): Promise<network.InterceptedResponse|null> {\n    this._interceptingResponse = !!overrides.interceptResponse;\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._client._sendMayFail('Fetch.continueRequest', {\n      requestId: this._interceptionId!,\n      url: overrides.url,\n      headers: overrides.headers,\n      method: overrides.method,\n      postData: overrides.postData ? overrides.postData.toString('base64') : undefined\n    });\n    if (!this._interceptingResponse)\n      return null;\n    const event = await this._responseInterceptedPromise;\n    this._interceptionId = event.requestId;\n    // FIXME: plumb status text from browser\n    if (event.responseErrorReason) {\n      this._client._sendMayFail('Fetch.continueRequest', {\n        requestId: event.requestId\n      });\n      throw new Error(`Request failed: ${event.responseErrorReason}`);\n    }\n    return new network.InterceptedResponse(request, event.responseStatusCode!, '', event.responseHeaders!);\n  }\n\n  async fulfill(response: types.NormalizedFulfillResponse) {\n    const body = response.isBase64 ? response.body : Buffer.from(response.body).toString('base64');\n\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._client._sendMayFail('Fetch.fulfillRequest', {\n      requestId: this._interceptionId!,\n      responseCode: response.status,\n      responsePhrase: network.STATUS_TEXTS[String(response.status)],\n      responseHeaders: response.headers,\n      body,\n    });\n  }\n\n  async abort(errorCode: string = 'failed') {\n    const errorReason = errorReasons[errorCode];\n    assert(errorReason, 'Unknown error code: ' + errorCode);\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._client._sendMayFail('Fetch.failRequest', {\n      requestId: this._interceptionId!,\n      errorReason\n    });\n  }\n}\n\nconst errorReasons: { [reason: string]: Protocol.Network.ErrorReason } = {\n  'aborted': 'Aborted',\n  'accessdenied': 'AccessDenied',\n  'addressunreachable': 'AddressUnreachable',\n  'blockedbyclient': 'BlockedByClient',\n  'blockedbyresponse': 'BlockedByResponse',\n  'connectionaborted': 'ConnectionAborted',\n  'connectionclosed': 'ConnectionClosed',\n  'connectionfailed': 'ConnectionFailed',\n  'connectionrefused': 'ConnectionRefused',\n  'connectionreset': 'ConnectionReset',\n  'internetdisconnected': 'InternetDisconnected',\n  'namenotresolved': 'NameNotResolved',\n  'timedout': 'TimedOut',\n  'failed': 'Failed',\n};\n"],"file":"crNetworkManager.js"}