{"version":3,"sources":["../../../src/server/android/backendAdb.ts"],"names":["AdbBackend","devices","result","runCommand","lines","toString","trim","split","map","line","serial","status","AdbDevice","constructor","init","close","command","open","becomeSocket","socket","BufferedSocketWrapper","net","createConnection","port","write","encodeMessage","read","commandOutput","startsWith","remainingLength","parseInt","readAll","message","lenHex","length","repeat","Buffer","from","EventEmitter","guid","_socket","_buffer","_isSocket","_notifyReader","_connectPromise","_isClosed","_command","Promise","f","on","data","emit","concat","error","substring","destroy","slice"],"mappings":"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","sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport assert from 'assert';\nimport debug from 'debug';\nimport * as net from 'net';\nimport { EventEmitter } from 'events';\nimport { Backend, DeviceBackend, SocketBackend } from './android';\nimport { createGuid } from '../../utils/utils';\n\nexport class AdbBackend implements Backend {\n  async devices(): Promise<DeviceBackend[]> {\n    const result = await runCommand('host:devices');\n    const lines = result.toString().trim().split('\\n');\n    return lines.map(line => {\n      const [serial, status] = line.trim().split('\\t');\n      return new AdbDevice(serial, status);\n    });\n  }\n}\n\nclass AdbDevice implements DeviceBackend {\n  readonly serial: string;\n  readonly status: string;\n\n  constructor(serial: string, status: string) {\n    this.serial = serial;\n    this.status = status;\n  }\n\n  async init() {\n  }\n\n  async close() {\n  }\n\n  runCommand(command: string): Promise<Buffer> {\n    return runCommand(command, this.serial);\n  }\n\n  async open(command: string): Promise<SocketBackend> {\n    const result = await open(command, this.serial);\n    result.becomeSocket();\n    return result;\n  }\n}\n\nasync function runCommand(command: string, serial?: string): Promise<Buffer> {\n  debug('pw:adb:runCommand')(command, serial);\n  const socket = new BufferedSocketWrapper(command, net.createConnection({ port: 5037 }));\n  if (serial) {\n    await socket.write(encodeMessage(`host:transport:${serial}`));\n    const status = await socket.read(4);\n    assert(status.toString() === 'OKAY', status.toString());\n  }\n  await socket.write(encodeMessage(command));\n  const status = await socket.read(4);\n  assert(status.toString() === 'OKAY', status.toString());\n  let commandOutput: Buffer;\n  if (!command.startsWith('shell:')) {\n    const remainingLength = parseInt((await socket.read(4)).toString(), 16);\n    commandOutput = await socket.read(remainingLength);\n  } else {\n    commandOutput = await socket.readAll();\n  }\n  socket.close();\n  return commandOutput;\n}\n\nasync function open(command: string, serial?: string): Promise<BufferedSocketWrapper> {\n  const socket = new BufferedSocketWrapper(command, net.createConnection({ port: 5037 }));\n  if (serial) {\n    await socket.write(encodeMessage(`host:transport:${serial}`));\n    const status = await socket.read(4);\n    assert(status.toString() === 'OKAY', status.toString());\n  }\n  await socket.write(encodeMessage(command));\n  const status = await socket.read(4);\n  assert(status.toString() === 'OKAY', status.toString());\n  return socket;\n}\n\nfunction encodeMessage(message: string): Buffer {\n  let lenHex = (message.length).toString(16);\n  lenHex = '0'.repeat(4 - lenHex.length) + lenHex;\n  return Buffer.from(lenHex + message);\n}\n\nclass BufferedSocketWrapper extends EventEmitter implements SocketBackend {\n  readonly guid = createGuid();\n  private _socket: net.Socket;\n  private _buffer = Buffer.from([]);\n  private _isSocket = false;\n  private _notifyReader: (() => void) | undefined;\n  private _connectPromise: Promise<void>;\n  private _isClosed = false;\n  private _command: string;\n\n  constructor(command: string, socket: net.Socket) {\n    super();\n    this._command = command;\n    this._socket = socket;\n    this._connectPromise = new Promise(f => this._socket.on('connect', f));\n    this._socket.on('data', data => {\n      debug('pw:adb:data')(data.toString());\n      if (this._isSocket) {\n        this.emit('data', data);\n        return;\n      }\n      this._buffer = Buffer.concat([this._buffer, data]);\n      if (this._notifyReader)\n        this._notifyReader();\n    });\n    this._socket.on('close', () => {\n      this._isClosed = true;\n      if (this._notifyReader)\n        this._notifyReader();\n      this.close();\n      this.emit('close');\n    });\n    this._socket.on('error', error => this.emit('error', error));\n  }\n\n  async write(data: Buffer) {\n    debug('pw:adb:send')(data.toString().substring(0, 100) + '...');\n    await this._connectPromise;\n    await new Promise(f => this._socket.write(data, f));\n  }\n\n  close() {\n    if (this._isClosed)\n      return;\n    debug('pw:adb')('Close ' + this._command);\n    this._socket.destroy();\n  }\n\n  async read(length: number): Promise<Buffer> {\n    await this._connectPromise;\n    assert(!this._isSocket, 'Can not read by length in socket mode');\n    while (this._buffer.length < length)\n      await new Promise<void>(f => this._notifyReader = f);\n    const result = this._buffer.slice(0, length);\n    this._buffer = this._buffer.slice(length);\n    debug('pw:adb:recv')(result.toString().substring(0, 100) + '...');\n    return result;\n  }\n\n  async readAll(): Promise<Buffer> {\n    while (!this._isClosed)\n      await new Promise<void>(f => this._notifyReader = f);\n    return this._buffer;\n  }\n\n  becomeSocket() {\n    assert(!this._buffer.length);\n    this._isSocket = true;\n  }\n}\n"],"file":"backendAdb.js"}