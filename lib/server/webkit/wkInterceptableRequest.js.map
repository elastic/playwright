{"version":3,"sources":["../../../src/server/webkit/wkInterceptableRequest.ts"],"names":["errorReasons","WKInterceptableRequest","constructor","session","route","frame","event","redirectedFrom","documentId","_session","request","_requestId","_timestamp","_wallTime","_route","_redirectedFrom","requestId","resourceType","type","toLowerCase","postDataBuffer","timestamp","walltime","postData","Buffer","from","network","Request","url","method","headers","_routeForRedirectChain","createResponse","responsePayload","getResponseBody","response","send","body","base64Encoded","timingPayload","timing","startTime","domainLookupStart","wkMillisToRoundishMillis","domainLookupEnd","connectStart","secureConnectionStart","connectEnd","requestStart","responseStart","Response","status","statusText","WKRouteImpl","page","_requestInterceptedCallback","_requestInterceptedPromise","_responseInterceptedCallback","_responseInterceptedPromise","_page","Promise","f","responseBody","abort","errorCode","errorType","isResponseIntercepted","sendMayFail","fulfill","Error","mimeType","isBase64","contentType","split","trim","STATUS_TEXTS","String","content","continue","overrides","interceptResponse","_ensureResponseInterceptionEnabled","undefined","toString","error","errorText","InterceptedResponse","value"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as frames from '../frames';\nimport * as network from '../network';\nimport * as types from '../types';\nimport { Protocol } from './protocol';\nimport { WKSession } from './wkConnection';\nimport { assert, headersObjectToArray, headersArrayToObject } from '../../utils/utils';\nimport { InterceptedResponse } from '../network';\nimport { WKPage } from './wkPage';\n\nconst errorReasons: { [reason: string]: Protocol.Network.ResourceErrorType } = {\n  'aborted': 'Cancellation',\n  'accessdenied': 'AccessControl',\n  'addressunreachable': 'General',\n  'blockedbyclient': 'Cancellation',\n  'blockedbyresponse': 'General',\n  'connectionaborted': 'General',\n  'connectionclosed': 'General',\n  'connectionfailed': 'General',\n  'connectionrefused': 'General',\n  'connectionreset': 'General',\n  'internetdisconnected': 'General',\n  'namenotresolved': 'General',\n  'timedout': 'Timeout',\n  'failed': 'General',\n};\n\nexport class WKInterceptableRequest {\n  private readonly _session: WKSession;\n  readonly request: network.Request;\n  readonly _requestId: string;\n  _timestamp: number;\n  _wallTime: number;\n  readonly _route: WKRouteImpl | null;\n  private _redirectedFrom: WKInterceptableRequest | null;\n\n  constructor(session: WKSession, route: WKRouteImpl | null, frame: frames.Frame, event: Protocol.Network.requestWillBeSentPayload, redirectedFrom: WKInterceptableRequest | null, documentId: string | undefined) {\n    this._session = session;\n    this._requestId = event.requestId;\n    this._route = route;\n    this._redirectedFrom = redirectedFrom;\n    const resourceType = event.type ? event.type.toLowerCase() : (redirectedFrom ? redirectedFrom.request.resourceType() : 'other');\n    let postDataBuffer = null;\n    this._timestamp = event.timestamp;\n    this._wallTime = event.walltime * 1000;\n    if (event.request.postData)\n      postDataBuffer = Buffer.from(event.request.postData, 'base64');\n    this.request = new network.Request(frame, redirectedFrom?.request || null, documentId, event.request.url,\n        resourceType, event.request.method, postDataBuffer, headersObjectToArray(event.request.headers));\n  }\n\n  _routeForRedirectChain(): WKRouteImpl | null {\n    let request: WKInterceptableRequest = this;\n    while (request._redirectedFrom)\n      request = request._redirectedFrom;\n    return request._route;\n  }\n\n  createResponse(responsePayload: Protocol.Network.Response): network.Response {\n    const getResponseBody = async () => {\n      const response = await this._session.send('Network.getResponseBody', { requestId: this._requestId });\n      return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n    };\n    const timingPayload = responsePayload.timing;\n    const timing: network.ResourceTiming = {\n      startTime: this._wallTime,\n      domainLookupStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupStart) : -1,\n      domainLookupEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.domainLookupEnd) : -1,\n      connectStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectStart) : -1,\n      secureConnectionStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.secureConnectionStart) : -1,\n      connectEnd: timingPayload ? wkMillisToRoundishMillis(timingPayload.connectEnd) : -1,\n      requestStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.requestStart) : -1,\n      responseStart: timingPayload ? wkMillisToRoundishMillis(timingPayload.responseStart) : -1,\n    };\n    return new network.Response(this.request, responsePayload.status, responsePayload.statusText, headersObjectToArray(responsePayload.headers), timing, getResponseBody);\n  }\n}\n\nexport class WKRouteImpl implements network.RouteDelegate {\n  private readonly _session: WKSession;\n  private readonly _requestId: string;\n  _requestInterceptedCallback: () => void = () => {};\n  private readonly _requestInterceptedPromise: Promise<unknown>;\n  _responseInterceptedCallback: ((payload: { response?: Protocol.Network.Response, error?: Protocol.Network.loadingFailedPayload }) => void) | undefined;\n  private _responseInterceptedPromise: Promise<{ response?: Protocol.Network.Response, error?: Protocol.Network.loadingFailedPayload }> | undefined;\n  private readonly _page: WKPage;\n\n  constructor(session: WKSession, page: WKPage, requestId: string) {\n    this._session = session;\n    this._page = page;\n    this._requestId = requestId;\n    this._requestInterceptedPromise = new Promise<void>(f => this._requestInterceptedCallback = f);\n  }\n\n  async responseBody(): Promise<Buffer> {\n    const response = await this._session.send('Network.getInterceptedResponseBody', { requestId: this._requestId });\n    return Buffer.from(response.body, 'base64');\n  }\n\n  async abort(errorCode: string) {\n    const errorType = errorReasons[errorCode];\n    assert(errorType, 'Unknown error code: ' + errorCode);\n    await this._requestInterceptedPromise;\n    const isResponseIntercepted = await this._responseInterceptedPromise;\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._session.sendMayFail(isResponseIntercepted ? 'Network.interceptResponseWithError' : 'Network.interceptRequestWithError', { requestId: this._requestId, errorType });\n  }\n\n  async fulfill(response: types.NormalizedFulfillResponse) {\n    if (300 <= response.status && response.status < 400)\n      throw new Error('Cannot fulfill with redirect status: ' + response.status);\n\n    await this._requestInterceptedPromise;\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    let mimeType = response.isBase64 ? 'application/octet-stream' : 'text/plain';\n    const headers = headersArrayToObject(response.headers, false /* lowerCase */);\n    const contentType = headers['content-type'];\n    if (contentType)\n      mimeType = contentType.split(';')[0].trim();\n\n    const isResponseIntercepted = await this._responseInterceptedPromise;\n    await this._session.sendMayFail(isResponseIntercepted ? 'Network.interceptWithResponse' : 'Network.interceptRequestWithResponse', {\n      requestId: this._requestId,\n      status: response.status,\n      statusText: network.STATUS_TEXTS[String(response.status)],\n      mimeType,\n      headers,\n      base64Encoded: response.isBase64,\n      content: response.body\n    });\n  }\n\n  async continue(request: network.Request, overrides: types.NormalizedContinueOverrides): Promise<network.InterceptedResponse|null> {\n    if (overrides.interceptResponse) {\n      await this._page._ensureResponseInterceptionEnabled();\n      this._responseInterceptedPromise = new Promise(f => this._responseInterceptedCallback = f);\n    }\n    await this._requestInterceptedPromise;\n    // In certain cases, protocol will return error if the request was already canceled\n    // or the page was closed. We should tolerate these errors.\n    await this._session.sendMayFail('Network.interceptWithRequest', {\n      requestId: this._requestId,\n      url: overrides.url,\n      method: overrides.method,\n      headers: overrides.headers ? headersArrayToObject(overrides.headers, false /* lowerCase */) : undefined,\n      postData: overrides.postData ? Buffer.from(overrides.postData).toString('base64') : undefined\n    });\n    if (!this._responseInterceptedPromise)\n      return null;\n    const { response, error } = await this._responseInterceptedPromise;\n    if (error)\n      throw new Error(`Request failed: ${error.errorText}`);\n    return new InterceptedResponse(request, response!.status, response!.statusText, headersObjectToArray(response!.headers));\n  }\n}\n\nfunction wkMillisToRoundishMillis(value: number): number {\n  // WebKit uses -1000 for unavailable.\n  if (value === -1000)\n    return -1;\n\n  // WebKit has a bug, instead of -1 it sends -1000 to be in ms.\n  if (value <= 0) {\n    // DNS can start before request start on Mac Network Stack\n    return -1;\n  }\n\n  return ((value * 1000) | 0) / 1000;\n}\n"],"file":"wkInterceptableRequest.js"}