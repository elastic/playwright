{"version":3,"sources":["../../../src/server/webkit/wkConnection.ts"],"names":["kBrowserCloseMessageId","kPageProxyMessageReceived","WKConnection","constructor","transport","onDisconnect","protocolLogger","browserLogsCollector","_transport","_onDisconnect","_protocolLogger","_browserLogsCollector","_lastId","_closed","browserSession","onmessage","_dispatchMessage","bind","onclose","_onClose","WKSession","kBrowserClosedError","message","rawSend","nextMessageId","send","id","pageProxyId","payload","dispatchMessage","method","params","undefined","dispose","isClosed","close","EventEmitter","connection","sessionId","errorText","_disposed","_rawSend","_callbacks","Map","_crashed","on","addListener","off","removeListener","once","setMaxListeners","Error","messageObj","Promise","resolve","reject","set","error","sendMayFail","catch","debugLogger","log","markAsCrashed","isDisposed","disconnected","helper","formatBrowserLogs","recentLogs","callback","values","clear","object","has","get","delete","createProtocolError","result","then","emit","protocolError","JSON","stringify","data"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { assert } from '../../utils/utils';\nimport { ConnectionTransport, ProtocolRequest, ProtocolResponse } from '../transport';\nimport { Protocol } from './protocol';\nimport { rewriteErrorMessage } from '../../utils/stackTrace';\nimport { debugLogger, RecentLogsCollector } from '../../utils/debugLogger';\nimport { ProtocolLogger } from '../types';\nimport { helper } from '../helper';\nimport { kBrowserClosedError } from '../../utils/errors';\n\n// WKPlaywright uses this special id to issue Browser.close command which we\n// should ignore.\nexport const kBrowserCloseMessageId = -9999;\n\n// We emulate kPageProxyMessageReceived message to unify it with Browser.pageProxyCreated\n// and Browser.pageProxyDestroyed for easier management.\nexport const kPageProxyMessageReceived = 'kPageProxyMessageReceived';\nexport type PageProxyMessageReceivedPayload = { pageProxyId: string, message: any };\n\nexport class WKConnection {\n  private readonly _transport: ConnectionTransport;\n  private readonly _onDisconnect: () => void;\n  private readonly _protocolLogger: ProtocolLogger;\n  readonly _browserLogsCollector: RecentLogsCollector;\n  private _lastId = 0;\n  private _closed = false;\n  readonly browserSession: WKSession;\n\n  constructor(transport: ConnectionTransport, onDisconnect: () => void, protocolLogger: ProtocolLogger, browserLogsCollector: RecentLogsCollector) {\n    this._transport = transport;\n    this._transport.onmessage = this._dispatchMessage.bind(this);\n    this._transport.onclose = this._onClose.bind(this);\n    this._onDisconnect = onDisconnect;\n    this._protocolLogger = protocolLogger;\n    this._browserLogsCollector = browserLogsCollector;\n    this.browserSession = new WKSession(this, '', kBrowserClosedError, (message: any) => {\n      this.rawSend(message);\n    });\n  }\n\n  nextMessageId(): number {\n    return ++this._lastId;\n  }\n\n  rawSend(message: ProtocolRequest) {\n    this._protocolLogger('send', message);\n    this._transport.send(message);\n  }\n\n  private _dispatchMessage(message: ProtocolResponse) {\n    this._protocolLogger('receive', message);\n    if (message.id === kBrowserCloseMessageId)\n      return;\n    if (message.pageProxyId) {\n      const payload: PageProxyMessageReceivedPayload = { message: message, pageProxyId: message.pageProxyId };\n      this.browserSession.dispatchMessage({ method: kPageProxyMessageReceived, params: payload });\n      return;\n    }\n    this.browserSession.dispatchMessage(message);\n  }\n\n  _onClose() {\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n    this.browserSession.dispose(true);\n    this._onDisconnect();\n  }\n\n  isClosed() {\n    return this._closed;\n  }\n\n  close() {\n    if (!this._closed)\n      this._transport.close();\n  }\n}\n\nexport class WKSession extends EventEmitter {\n  connection: WKConnection;\n  errorText: string;\n  readonly sessionId: string;\n\n  private _disposed = false;\n  private readonly _rawSend: (message: any) => void;\n  private readonly _callbacks = new Map<number, {resolve: (o: any) => void, reject: (e: Error) => void, error: Error, method: string}>();\n  private _crashed: boolean = false;\n\n  on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n\n  constructor(connection: WKConnection, sessionId: string, errorText: string, rawSend: (message: any) => void) {\n    super();\n    this.setMaxListeners(0);\n    this.connection = connection;\n    this.sessionId = sessionId;\n    this._rawSend = rawSend;\n    this.errorText = errorText;\n\n    this.on = super.on;\n    this.off = super.removeListener;\n    this.addListener = super.addListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    if (this._crashed)\n      throw new Error('Target crashed');\n    if (this._disposed)\n      throw new Error(`Protocol error (${method}): ${this.errorText}`);\n    const id = this.connection.nextMessageId();\n    const messageObj = { id, method, params };\n    this._rawSend(messageObj);\n    return new Promise<Protocol.CommandReturnValues[T]>((resolve, reject) => {\n      this._callbacks.set(id, {resolve, reject, error: new Error(), method});\n    });\n  }\n\n  sendMayFail<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T] | void> {\n    return this.send(method, params).catch(error => debugLogger.log('error', error));\n  }\n\n  markAsCrashed() {\n    this._crashed = true;\n  }\n\n  isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  dispose(disconnected: boolean) {\n    if (disconnected)\n      this.errorText = 'Browser closed.' + helper.formatBrowserLogs(this.connection._browserLogsCollector.recentLogs());\n    for (const callback of this._callbacks.values())\n      callback.reject(rewriteErrorMessage(callback.error, `Protocol error (${callback.method}): ${this.errorText}`));\n    this._callbacks.clear();\n    this._disposed = true;\n  }\n\n  dispatchMessage(object: any) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id)!;\n      this._callbacks.delete(object.id);\n      if (object.error)\n        callback.reject(createProtocolError(callback.error, callback.method, object.error));\n      else\n        callback.resolve(object.result);\n    } else if (object.id && !object.error) {\n      // Response might come after session has been disposed and rejected all callbacks.\n      assert(this.isDisposed());\n    } else {\n      Promise.resolve().then(() => this.emit(object.method, object.params));\n    }\n  }\n}\n\nexport function createProtocolError(error: Error, method: string, protocolError: { message: string; data: any; }): Error {\n  let message = `Protocol error (${method}): ${protocolError.message}`;\n  if ('data' in protocolError)\n    message += ` ${JSON.stringify(protocolError.data)}`;\n  return rewriteErrorMessage(error, message);\n}\n"],"file":"wkConnection.js"}