{"version":3,"sources":["../../src/server/instrumentation.ts"],"names":["SdkObject","EventEmitter","constructor","parent","guidPrefix","guid","attribution","instrumentation","setMaxListeners","createInstrumentation","listeners","Proxy","get","obj","prop","listener","push","splice","indexOf","startsWith","params","internalCallMetadata","id","startTime","endTime","type","method","log","snapshots"],"mappings":";;;;;;;;;;;;;;;AAgBA;;AACA;;AAkBA;;AAnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAuBO,MAAMA,SAAN,SAAwBC,oBAAxB,CAAqC;AAKhCC,EAAAA,WAAW,CAACC,MAAD,EAAoBC,UAApB,EAAyCC,IAAzC,EAAwD;AAC3E;AAD2E,SAJ7EA,IAI6E;AAAA,SAH7EC,WAG6E;AAAA,SAF7EC,eAE6E;AAE3E,SAAKF,IAAL,GAAYA,IAAI,IAAK,GAAED,UAAU,IAAI,EAAG,IAAG,wBAAa,EAAxD;AACA,SAAKI,eAAL,CAAqB,CAArB;AACA,SAAKF,WAAL,GAAmB,EAAE,GAAGH,MAAM,CAACG;AAAZ,KAAnB;AACA,SAAKC,eAAL,GAAuBJ,MAAM,CAACI,eAA9B;AACD;;AAXyC;;;;AAgCrC,SAASE,qBAAT,GAAkD;AACvD,QAAMC,SAAoC,GAAG,EAA7C;AACA,SAAO,IAAIC,KAAJ,CAAU,EAAV,EAAc;AACnBC,IAAAA,GAAG,EAAE,CAACC,GAAD,EAAWC,IAAX,KAA4B;AAC/B,UAAIA,IAAI,KAAK,aAAb,EACE,OAAQC,QAAD,IAAuCL,SAAS,CAACM,IAAV,CAAeD,QAAf,CAA9C;AACF,UAAID,IAAI,KAAK,gBAAb,EACE,OAAQC,QAAD,IAAuCL,SAAS,CAACO,MAAV,CAAiBP,SAAS,CAACQ,OAAV,CAAkBH,QAAlB,CAAjB,EAA8C,CAA9C,CAA9C;AACF,UAAI,CAACD,IAAI,CAACK,UAAL,CAAgB,IAAhB,CAAL,EACE,OAAON,GAAG,CAACC,IAAD,CAAV;AACF,aAAO,OAAO,GAAGM,MAAV,KAA4B;AACjC,aAAK,MAAML,QAAX,IAAuBL,SAAvB;AAAA;;AACE,0BAAM,QAACK,QAAD,EAAkBD,IAAlB,CAAN,0CAAM,iBAA0B,GAAGM,MAA7B,CAAN;AADF;AAED,OAHD;AAID;AAZkB,GAAd,CAAP;AAcD;;AAEM,SAASC,oBAAT,GAA8C;AACnD,SAAO;AACLC,IAAAA,EAAE,EAAE,EADC;AAELC,IAAAA,SAAS,EAAE,CAFN;AAGLC,IAAAA,OAAO,EAAE,CAHJ;AAILC,IAAAA,IAAI,EAAE,UAJD;AAKLC,IAAAA,MAAM,EAAE,EALH;AAMLN,IAAAA,MAAM,EAAE,EANH;AAOLO,IAAAA,GAAG,EAAE,EAPA;AAQLC,IAAAA,SAAS,EAAE;AARN,GAAP;AAUD","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { createGuid } from '../utils/utils';\nimport type { Browser } from './browser';\nimport type { BrowserContext } from './browserContext';\nimport type { BrowserType } from './browserType';\nimport { ElementHandle } from './dom';\nimport type { Frame } from './frames';\nimport type { Page } from './page';\n\nexport type Attribution = {\n  isInternal: boolean,\n  browserType?: BrowserType;\n  browser?: Browser;\n  context?: BrowserContext;\n  page?: Page;\n  frame?: Frame;\n};\n\nimport { CallMetadata } from '../protocol/callMetadata';\nexport { CallMetadata } from '../protocol/callMetadata';\n\nexport class SdkObject extends EventEmitter {\n  guid: string;\n  attribution: Attribution;\n  instrumentation: Instrumentation;\n\n  protected constructor(parent: SdkObject, guidPrefix?: string, guid?: string) {\n    super();\n    this.guid = guid || `${guidPrefix || ''}@${createGuid()}`;\n    this.setMaxListeners(0);\n    this.attribution = { ...parent.attribution };\n    this.instrumentation = parent.instrumentation;\n  }\n}\n\nexport interface Instrumentation {\n  addListener(listener: InstrumentationListener): void;\n  removeListener(listener: InstrumentationListener): void;\n  onBeforeCall(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onBeforeInputAction(sdkObject: SdkObject, metadata: CallMetadata, element: ElementHandle): Promise<void>;\n  onCallLog(logName: string, message: string, sdkObject: SdkObject, metadata: CallMetadata): void;\n  onAfterCall(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onEvent(sdkObject: SdkObject, metadata: CallMetadata): void;\n}\n\nexport interface InstrumentationListener {\n  onBeforeCall?(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onBeforeInputAction?(sdkObject: SdkObject, metadata: CallMetadata, element: ElementHandle): Promise<void>;\n  onCallLog?(logName: string, message: string, sdkObject: SdkObject, metadata: CallMetadata): void;\n  onAfterCall?(sdkObject: SdkObject, metadata: CallMetadata): Promise<void>;\n  onEvent?(sdkObject: SdkObject, metadata: CallMetadata): void;\n}\n\nexport function createInstrumentation(): Instrumentation {\n  const listeners: InstrumentationListener[] = [];\n  return new Proxy({}, {\n    get: (obj: any, prop: string) => {\n      if (prop === 'addListener')\n        return (listener: InstrumentationListener) => listeners.push(listener);\n      if (prop === 'removeListener')\n        return (listener: InstrumentationListener) => listeners.splice(listeners.indexOf(listener), 1);\n      if (!prop.startsWith('on'))\n        return obj[prop];\n      return async (...params: any[]) => {\n        for (const listener of listeners)\n          await (listener as any)[prop]?.(...params);\n      };\n    },\n  });\n}\n\nexport function internalCallMetadata(): CallMetadata {\n  return {\n    id: '',\n    startTime: 0,\n    endTime: 0,\n    type: 'Internal',\n    method: '',\n    params: {},\n    log: [],\n    snapshots: []\n  };\n}\n"],"file":"instrumentation.js"}