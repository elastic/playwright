{"version":3,"sources":["../../../src/server/snapshot/snapshotStorage.ts"],"names":["BaseSnapshotStorage","EventEmitter","_resources","_frameSnapshots","Map","clear","addResource","resource","push","addFrameSnapshot","snapshot","frameSnapshots","get","frameId","raw","renderer","set","isMainFrame","pageId","SnapshotRenderer","length","emit","resources","slice","snapshotByName","pageOrFrameId","snapshotName","find","r","snapshotByIndex","index"],"mappings":";;;;;;;AAgBA;;AAEA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaO,MAAeA,mBAAf,SAA2CC,oBAA3C,CAAmF;AAAA;AAAA;AAAA,SAC9EC,UAD8E,GAC7C,EAD6C;AAAA,SAE9EC,eAF8E,GAE5D,IAAIC,GAAJ,EAF4D;AAAA;;AAOxFC,EAAAA,KAAK,GAAG;AACN,SAAKH,UAAL,GAAkB,EAAlB;;AACA,SAAKC,eAAL,CAAqBE,KAArB;AACD;;AAEDC,EAAAA,WAAW,CAACC,QAAD,EAAmC;AAC5C,SAAKL,UAAL,CAAgBM,IAAhB,CAAqBD,QAArB;AACD;;AAEDE,EAAAA,gBAAgB,CAACC,QAAD,EAAgC;AAC9C,QAAIC,cAAc,GAAG,KAAKR,eAAL,CAAqBS,GAArB,CAAyBF,QAAQ,CAACG,OAAlC,CAArB;;AACA,QAAI,CAACF,cAAL,EAAqB;AACnBA,MAAAA,cAAc,GAAG;AACfG,QAAAA,GAAG,EAAE,EADU;AAEfC,QAAAA,QAAQ,EAAE;AAFK,OAAjB;;AAIA,WAAKZ,eAAL,CAAqBa,GAArB,CAAyBN,QAAQ,CAACG,OAAlC,EAA2CF,cAA3C;;AACA,UAAID,QAAQ,CAACO,WAAb,EACE,KAAKd,eAAL,CAAqBa,GAArB,CAAyBN,QAAQ,CAACQ,MAAlC,EAA0CP,cAA1C;AACH;;AACDA,IAAAA,cAAc,CAACG,GAAf,CAAmBN,IAAnB,CAAwBE,QAAxB;AACA,UAAMK,QAAQ,GAAG,IAAII,kCAAJ,CAAqB,KAAKjB,UAA1B,EAAsCS,cAAc,CAACG,GAArD,EAA0DH,cAAc,CAACG,GAAf,CAAmBM,MAAnB,GAA4B,CAAtF,CAAjB;AACAT,IAAAA,cAAc,CAACI,QAAf,CAAwBP,IAAxB,CAA6BO,QAA7B;AACA,SAAKM,IAAL,CAAU,UAAV,EAAsBN,QAAtB;AACD;;AAIDO,EAAAA,SAAS,GAAuB;AAC9B,WAAO,KAAKpB,UAAL,CAAgBqB,KAAhB,EAAP;AACD;;AAEDC,EAAAA,cAAc,CAACC,aAAD,EAAwBC,YAAxB,EAA4E;AACxF,UAAMhB,QAAQ,GAAG,KAAKP,eAAL,CAAqBS,GAArB,CAAyBa,aAAzB,CAAjB;;AACA,WAAOf,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAEK,QAAV,CAAmBY,IAAnB,CAAwBC,CAAC,IAAIA,CAAC,CAACF,YAAF,KAAmBA,YAAhD,CAAP;AACD;;AAEDG,EAAAA,eAAe,CAAChB,OAAD,EAAkBiB,KAAlB,EAA+D;AAC5E,UAAMpB,QAAQ,GAAG,KAAKP,eAAL,CAAqBS,GAArB,CAAyBC,OAAzB,CAAjB;;AACA,WAAOH,QAAP,aAAOA,QAAP,uBAAOA,QAAQ,CAAEK,QAAV,CAAmBe,KAAnB,CAAP;AACD;;AA/CuF","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { FrameSnapshot, ResourceSnapshot } from './snapshotTypes';\nimport { SnapshotRenderer } from './snapshotRenderer';\n\nexport interface SnapshotStorage {\n  resources(): ResourceSnapshot[];\n  resourceContent(sha1: string): Buffer | undefined;\n  snapshotByName(pageOrFrameId: string, snapshotName: string): SnapshotRenderer | undefined;\n  snapshotByIndex(frameId: string, index: number): SnapshotRenderer | undefined;\n}\n\nexport abstract class BaseSnapshotStorage extends EventEmitter implements SnapshotStorage {\n  protected _resources: ResourceSnapshot[] = [];\n  protected _frameSnapshots = new Map<string, {\n    raw: FrameSnapshot[],\n    renderer: SnapshotRenderer[]\n  }>();\n\n  clear() {\n    this._resources = [];\n    this._frameSnapshots.clear();\n  }\n\n  addResource(resource: ResourceSnapshot): void {\n    this._resources.push(resource);\n  }\n\n  addFrameSnapshot(snapshot: FrameSnapshot): void {\n    let frameSnapshots = this._frameSnapshots.get(snapshot.frameId);\n    if (!frameSnapshots) {\n      frameSnapshots = {\n        raw: [],\n        renderer: [],\n      };\n      this._frameSnapshots.set(snapshot.frameId, frameSnapshots);\n      if (snapshot.isMainFrame)\n        this._frameSnapshots.set(snapshot.pageId, frameSnapshots);\n    }\n    frameSnapshots.raw.push(snapshot);\n    const renderer = new SnapshotRenderer(this._resources, frameSnapshots.raw, frameSnapshots.raw.length - 1);\n    frameSnapshots.renderer.push(renderer);\n    this.emit('snapshot', renderer);\n  }\n\n  abstract resourceContent(sha1: string): Buffer | undefined;\n\n  resources(): ResourceSnapshot[] {\n    return this._resources.slice();\n  }\n\n  snapshotByName(pageOrFrameId: string, snapshotName: string): SnapshotRenderer | undefined {\n    const snapshot = this._frameSnapshots.get(pageOrFrameId);\n    return snapshot?.renderer.find(r => r.snapshotName === snapshotName);\n  }\n\n  snapshotByIndex(frameId: string, index: number): SnapshotRenderer | undefined {\n    const snapshot = this._frameSnapshots.get(frameId);\n    return snapshot?.renderer[index];\n  }\n\n}\n"],"file":"snapshotStorage.js"}