{"version":3,"sources":["../../../src/server/snapshot/inMemorySnapshotter.ts"],"names":["InMemorySnapshotter","BaseSnapshotStorage","constructor","context","_blobs","Map","_server","_snapshotter","HttpServer","SnapshotServer","Snapshotter","initialize","start","reset","clear","dispose","stop","captureSnapshot","page","snapshotName","element","_frameSnapshots","has","Error","catch","Promise","fulfill","listener","eventsHelper","addEventListener","renderer","removeEventListeners","onBlob","blob","set","sha1","buffer","onResourceSnapshot","resource","addResource","onFrameSnapshot","snapshot","addFrameSnapshot","resourceContent","get"],"mappings":";;;;;;;AAgBA;;AAEA;;AAIA;;AACA;;AACA;;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaO,MAAMA,mBAAN,SAAkCC,oCAAlC,CAAqF;AAK1FC,EAAAA,WAAW,CAACC,OAAD,EAA0B;AACnC;AADmC,SAJ7BC,MAI6B,GAJpB,IAAIC,GAAJ,EAIoB;AAAA,SAH7BC,OAG6B;AAAA,SAF7BC,YAE6B;AAEnC,SAAKD,OAAL,GAAe,IAAIE,sBAAJ,EAAf;AACA,QAAIC,8BAAJ,CAAmB,KAAKH,OAAxB,EAAiC,IAAjC;AACA,SAAKC,YAAL,GAAoB,IAAIG,wBAAJ,CAAgBP,OAAhB,EAAyB,IAAzB,CAApB;AACD;;AAEe,QAAVQ,UAAU,GAAoB;AAClC,UAAM,KAAKJ,YAAL,CAAkBK,KAAlB,EAAN;AACA,WAAO,MAAM,KAAKN,OAAL,CAAaM,KAAb,EAAb;AACD;;AAEU,QAALC,KAAK,GAAG;AACZ,UAAM,KAAKN,YAAL,CAAkBM,KAAlB,EAAN;AACA,SAAKC,KAAL;AACD;;AAEY,QAAPC,OAAO,GAAG;AACd,SAAKR,YAAL,CAAkBQ,OAAlB;;AACA,UAAM,KAAKT,OAAL,CAAaU,IAAb,EAAN;AACD;;AAEoB,QAAfC,eAAe,CAACC,IAAD,EAAaC,YAAb,EAAmCC,OAAnC,EAAuF;AAC1G,QAAI,KAAKC,eAAL,CAAqBC,GAArB,CAAyBH,YAAzB,CAAJ,EACE,MAAM,IAAII,KAAJ,CAAU,8BAA8BJ,YAAxC,CAAN;;AAEF,SAAKZ,YAAL,CAAkBU,eAAlB,CAAkCC,IAAlC,EAAwCC,YAAxC,EAAsDC,OAAtD,EAA+DI,KAA/D,CAAqE,MAAM,CAAE,CAA7E;;AACA,WAAO,IAAIC,OAAJ,CAA8BC,OAAO,IAAI;AAC9C,YAAMC,QAAQ,GAAGC,2BAAaC,gBAAb,CAA8B,IAA9B,EAAoC,UAApC,EAAiDC,QAAD,IAAgC;AAC/F,YAAIA,QAAQ,CAACX,YAAT,KAA0BA,YAA9B,EAA4C;AAC1CS,qCAAaG,oBAAb,CAAkC,CAACJ,QAAD,CAAlC;;AACAD,UAAAA,OAAO,CAACI,QAAD,CAAP;AACD;AACF,OALgB,CAAjB;AAMD,KAPM,CAAP;AAQD;;AAEDE,EAAAA,MAAM,CAACC,IAAD,EAA8B;AAClC,SAAK7B,MAAL,CAAY8B,GAAZ,CAAgBD,IAAI,CAACE,IAArB,EAA2BF,IAAI,CAACG,MAAhC;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,QAAD,EAAmC;AACnD,SAAKC,WAAL,CAAiBD,QAAjB;AACD;;AAEDE,EAAAA,eAAe,CAACC,QAAD,EAAgC;AAC7C,SAAKC,gBAAL,CAAsBD,QAAtB;AACD;;AAEDE,EAAAA,eAAe,CAACR,IAAD,EAAmC;AAChD,WAAO,KAAK/B,MAAL,CAAYwC,GAAZ,CAAgBT,IAAhB,CAAP;AACD;;AAxDyF","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpServer } from '../../utils/httpServer';\nimport { BrowserContext } from '../browserContext';\nimport { eventsHelper } from '../../utils/eventsHelper';\nimport { Page } from '../page';\nimport { FrameSnapshot, ResourceSnapshot } from './snapshotTypes';\nimport { SnapshotRenderer } from './snapshotRenderer';\nimport { SnapshotServer } from './snapshotServer';\nimport { BaseSnapshotStorage } from './snapshotStorage';\nimport { Snapshotter, SnapshotterBlob, SnapshotterDelegate } from './snapshotter';\nimport { ElementHandle } from '../dom';\n\nexport class InMemorySnapshotter extends BaseSnapshotStorage implements SnapshotterDelegate {\n  private _blobs = new Map<string, Buffer>();\n  private _server: HttpServer;\n  private _snapshotter: Snapshotter;\n\n  constructor(context: BrowserContext) {\n    super();\n    this._server = new HttpServer();\n    new SnapshotServer(this._server, this);\n    this._snapshotter = new Snapshotter(context, this);\n  }\n\n  async initialize(): Promise<string> {\n    await this._snapshotter.start();\n    return await this._server.start();\n  }\n\n  async reset() {\n    await this._snapshotter.reset();\n    this.clear();\n  }\n\n  async dispose() {\n    this._snapshotter.dispose();\n    await this._server.stop();\n  }\n\n  async captureSnapshot(page: Page, snapshotName: string, element?: ElementHandle): Promise<SnapshotRenderer> {\n    if (this._frameSnapshots.has(snapshotName))\n      throw new Error('Duplicate snapshot name: ' + snapshotName);\n\n    this._snapshotter.captureSnapshot(page, snapshotName, element).catch(() => {});\n    return new Promise<SnapshotRenderer>(fulfill => {\n      const listener = eventsHelper.addEventListener(this, 'snapshot', (renderer: SnapshotRenderer) => {\n        if (renderer.snapshotName === snapshotName) {\n          eventsHelper.removeEventListeners([listener]);\n          fulfill(renderer);\n        }\n      });\n    });\n  }\n\n  onBlob(blob: SnapshotterBlob): void {\n    this._blobs.set(blob.sha1, blob.buffer);\n  }\n\n  onResourceSnapshot(resource: ResourceSnapshot): void {\n    this.addResource(resource);\n  }\n\n  onFrameSnapshot(snapshot: FrameSnapshot): void {\n    this.addFrameSnapshot(snapshot);\n  }\n\n  resourceContent(sha1: string): Buffer | undefined {\n    return this._blobs.get(sha1);\n  }\n}\n"],"file":"inMemorySnapshotter.js"}