{"version":3,"sources":["../../../src/server/supplements/debugger.ts"],"names":["symbol","Symbol","Debugger","EventEmitter","constructor","context","_pauseOnNextStatement","_pausedCallsMetadata","Map","_enabled","_context","_muted","pauseOnNextStatement","lookup","setMuted","muted","onBeforeCall","sdkObject","metadata","shouldPauseOnCall","shouldPauseOnNonInputStep","pause","onBeforeInputAction","onCallLog","logName","message","debugLogger","log","pauseStartTime","result","Promise","resolve","set","emit","Events","PausedStateChanged","resume","step","endTime","pauseEndTime","clear","isPaused","has","size","pausedDetails","push","attribution","browser","options","headful","method","nonInputActionsToStep","Set"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { debugMode, isUnderTest, monotonicTime } from '../../utils/utils';\nimport { BrowserContext } from '../browserContext';\nimport { CallMetadata, InstrumentationListener, SdkObject } from '../instrumentation';\nimport { debugLogger } from '../../utils/debugLogger';\n\nconst symbol = Symbol('Debugger');\n\nexport class Debugger extends EventEmitter implements InstrumentationListener {\n  private _pauseOnNextStatement = false;\n  private _pausedCallsMetadata = new Map<CallMetadata, { resolve: () => void, sdkObject: SdkObject }>();\n  private _enabled: boolean;\n  private _context: BrowserContext;\n\n  static Events = {\n    PausedStateChanged: 'pausedstatechanged'\n  };\n  private _muted = false;\n\n  constructor(context: BrowserContext) {\n    super();\n    this._context = context;\n    (this._context as any)[symbol] = this;\n    this._enabled = debugMode() === 'inspector';\n    if (this._enabled)\n      this.pauseOnNextStatement();\n  }\n\n  static lookup(context?: BrowserContext): Debugger | undefined {\n    if (!context)\n      return;\n    return (context as any)[symbol] as Debugger | undefined;\n  }\n\n  async setMuted(muted: boolean) {\n    this._muted = muted;\n  }\n\n  async onBeforeCall(sdkObject: SdkObject, metadata: CallMetadata): Promise<void> {\n    if (this._muted)\n      return;\n    if (shouldPauseOnCall(sdkObject, metadata) || (this._pauseOnNextStatement && shouldPauseOnNonInputStep(sdkObject, metadata)))\n      await this.pause(sdkObject, metadata);\n  }\n\n  async onBeforeInputAction(sdkObject: SdkObject, metadata: CallMetadata): Promise<void> {\n    if (this._muted)\n      return;\n    if (this._enabled && this._pauseOnNextStatement)\n      await this.pause(sdkObject, metadata);\n  }\n\n  async onCallLog(logName: string, message: string, sdkObject: SdkObject, metadata: CallMetadata): Promise<void> {\n    debugLogger.log(logName as any, message);\n  }\n\n  async pause(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (this._muted)\n      return;\n    this._enabled = true;\n    metadata.pauseStartTime = monotonicTime();\n    const result = new Promise<void>(resolve => {\n      this._pausedCallsMetadata.set(metadata, { resolve, sdkObject });\n    });\n    this.emit(Debugger.Events.PausedStateChanged);\n    return result;\n  }\n\n  resume(step: boolean) {\n    this._pauseOnNextStatement = step;\n    const endTime = monotonicTime();\n    for (const [metadata, { resolve }] of this._pausedCallsMetadata) {\n      metadata.pauseEndTime = endTime;\n      resolve();\n    }\n    this._pausedCallsMetadata.clear();\n    this.emit(Debugger.Events.PausedStateChanged);\n  }\n\n  pauseOnNextStatement() {\n    this._pauseOnNextStatement = true;\n  }\n\n  isPaused(metadata?: CallMetadata): boolean {\n    if (metadata)\n      return this._pausedCallsMetadata.has(metadata);\n    return !!this._pausedCallsMetadata.size;\n  }\n\n  pausedDetails(): { metadata: CallMetadata, sdkObject: SdkObject }[] {\n    const result: { metadata: CallMetadata, sdkObject: SdkObject }[] = [];\n    for (const [metadata, { sdkObject }] of this._pausedCallsMetadata)\n      result.push({ metadata, sdkObject });\n    return result;\n  }\n}\n\nfunction shouldPauseOnCall(sdkObject: SdkObject, metadata: CallMetadata): boolean {\n  if (!sdkObject.attribution.browser?.options.headful && !isUnderTest())\n    return false;\n  return metadata.method === 'pause';\n}\n\nconst nonInputActionsToStep = new Set(['close', 'evaluate', 'evaluateHandle', 'goto', 'setContent']);\n\nfunction shouldPauseOnNonInputStep(sdkObject: SdkObject, metadata: CallMetadata): boolean {\n  return nonInputActionsToStep.has(metadata.method);\n}\n"],"file":"debugger.js"}