{"version":3,"sources":["../../../../src/server/supplements/injected/consoleApi.ts"],"names":["ConsoleAPI","constructor","injectedScript","_injectedScript","window","playwright","$","selector","strict","_querySelector","$$","_querySelectorAll","inspect","_inspect","element","_selector","resume","_resume","Error","parsed","parseSelector","querySelector","document","querySelectorAll","Element","_playwrightResume","catch"],"mappings":";;;;;;;AAiBA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBO,MAAMA,UAAN,CAAiB;AAGtBC,EAAAA,WAAW,CAACC,cAAD,EAAiC;AAAA,SAFpCC,eAEoC;AAC1C,SAAKA,eAAL,GAAuBD,cAAvB;AACA,QAAIE,MAAM,CAACC,UAAX,EACE;AACFD,IAAAA,MAAM,CAACC,UAAP,GAAoB;AAClBC,MAAAA,CAAC,EAAE,CAACC,QAAD,EAAmBC,MAAnB,KAAwC,KAAKC,cAAL,CAAoBF,QAApB,EAA8B,CAAC,CAACC,MAAhC,CADzB;AAElBE,MAAAA,EAAE,EAAGH,QAAD,IAAsB,KAAKI,iBAAL,CAAuBJ,QAAvB,CAFR;AAGlBK,MAAAA,OAAO,EAAGL,QAAD,IAAsB,KAAKM,QAAL,CAAcN,QAAd,CAHb;AAIlBA,MAAAA,QAAQ,EAAGO,OAAD,IAAsB,KAAKC,SAAL,CAAeD,OAAf,CAJd;AAKlBE,MAAAA,MAAM,EAAE,MAAM,KAAKC,OAAL;AALI,KAApB;AAOD;;AAEOR,EAAAA,cAAc,CAACF,QAAD,EAAmBC,MAAnB,EAA2D;AAC/E,QAAI,OAAOD,QAAP,KAAoB,QAAxB,EACE,MAAM,IAAIW,KAAJ,CAAW,oDAAX,CAAN;;AACF,UAAMC,MAAM,GAAG,KAAKhB,eAAL,CAAqBiB,aAArB,CAAmCb,QAAnC,CAAf;;AACA,WAAO,KAAKJ,eAAL,CAAqBkB,aAArB,CAAmCF,MAAnC,EAA2CG,QAA3C,EAAqDd,MAArD,CAAP;AACD;;AAEOG,EAAAA,iBAAiB,CAACJ,QAAD,EAA8B;AACrD,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EACE,MAAM,IAAIW,KAAJ,CAAW,iDAAX,CAAN;;AACF,UAAMC,MAAM,GAAG,KAAKhB,eAAL,CAAqBiB,aAArB,CAAmCb,QAAnC,CAAf;;AACA,WAAO,KAAKJ,eAAL,CAAqBoB,gBAArB,CAAsCJ,MAAtC,EAA8CG,QAA9C,CAAP;AACD;;AAEOT,EAAAA,QAAQ,CAACN,QAAD,EAAmB;AACjC,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EACE,MAAM,IAAIW,KAAJ,CAAW,sDAAX,CAAN;AACFd,IAAAA,MAAM,CAACQ,OAAP,CAAe,KAAKH,cAAL,CAAoBF,QAApB,EAA8B,KAA9B,CAAf;AACD;;AAEOQ,EAAAA,SAAS,CAACD,OAAD,EAAmB;AAClC,QAAI,EAAEA,OAAO,YAAYU,OAArB,CAAJ,EACE,MAAM,IAAIN,KAAJ,CAAW,sCAAX,CAAN;AACF,WAAO,yCAAiB,KAAKf,eAAtB,EAAuCW,OAAvC,EAAgDP,QAAvD;AACD;;AAEOU,EAAAA,OAAO,GAAG;AAChBb,IAAAA,MAAM,CAACqB,iBAAP,GAA2BC,KAA3B,CAAiC,MAAM,CAAE,CAAzC;AACD;;AA5CqB;;;eA+CT1B,U","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type InjectedScript from '../../injected/injectedScript';\nimport { generateSelector } from './selectorGenerator';\n\ntype ConsoleAPIInterface = {\n  $: (selector: string) => void;\n  $$: (selector: string) => void;\n  inspect: (selector: string) => void;\n  selector: (element: Element) => void;\n  resume: () => void;\n};\n\ndeclare global {\n  interface Window {\n    playwright?: ConsoleAPIInterface;\n    inspect: (element: Element | undefined) => void;\n    _playwrightResume: () => Promise<void>;\n  }\n}\n\nexport class ConsoleAPI {\n  private _injectedScript: InjectedScript;\n\n  constructor(injectedScript: InjectedScript) {\n    this._injectedScript = injectedScript;\n    if (window.playwright)\n      return;\n    window.playwright = {\n      $: (selector: string, strict?: boolean) => this._querySelector(selector, !!strict),\n      $$: (selector: string) => this._querySelectorAll(selector),\n      inspect: (selector: string) => this._inspect(selector),\n      selector: (element: Element) => this._selector(element),\n      resume: () => this._resume(),\n    };\n  }\n\n  private _querySelector(selector: string, strict: boolean): (Element | undefined) {\n    if (typeof selector !== 'string')\n      throw new Error(`Usage: playwright.query('Playwright >> selector').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelector(parsed, document, strict);\n  }\n\n  private _querySelectorAll(selector: string): Element[] {\n    if (typeof selector !== 'string')\n      throw new Error(`Usage: playwright.$$('Playwright >> selector').`);\n    const parsed = this._injectedScript.parseSelector(selector);\n    return this._injectedScript.querySelectorAll(parsed, document);\n  }\n\n  private _inspect(selector: string) {\n    if (typeof selector !== 'string')\n      throw new Error(`Usage: playwright.inspect('Playwright >> selector').`);\n    window.inspect(this._querySelector(selector, false));\n  }\n\n  private _selector(element: Element) {\n    if (!(element instanceof Element))\n      throw new Error(`Usage: playwright.selector(element).`);\n    return generateSelector(this._injectedScript, element).selector;\n  }\n\n  private _resume() {\n    window._playwrightResume().catch(() => {});\n  }\n}\n\nexport default ConsoleAPI;\n"],"file":"consoleApi.js"}