{"version":3,"sources":["../../src/server/socksSocket.ts"],"names":["PortForwardingServer","EventEmitter","constructor","parent","_forwardPorts","_parent","_server","setMaxListeners","SocksProxyServer","_handler","bind","create","server","listen","debugLogger","log","_port","address","port","proxyServer","info","forward","intercept","shouldProxyRequestToClient","dstAddr","includes","dstPort","srcAddr","srcPort","socket","emit","setForwardedPorts","ports","stop","close"],"mappings":";;;;;;;AAiBA;;AAGA;;AACA;;AACA;;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUO,MAAMA,oBAAN,SAAmCC,oBAAnC,CAAgD;AAIrDC,EAAAA,WAAW,CAACC,MAAD,EAAoB;AAC7B;AAD6B,SAHvBC,aAGuB,GAHG,EAGH;AAAA,SAFvBC,OAEuB;AAAA,SADvBC,OACuB;AAE7B,SAAKC,eAAL,CAAqB,CAArB;AACA,SAAKF,OAAL,GAAeF,MAAf;AACA,SAAKG,OAAL,GAAe,IAAIE,6BAAJ,CAAqB,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAArB,CAAf;AACD;;AAEkB,eAANC,MAAM,CAACR,MAAD,EAAoB;AACrC,UAAMS,MAAM,GAAG,IAAIZ,oBAAJ,CAAyBG,MAAzB,CAAf;AACA,UAAMS,MAAM,CAACN,OAAP,CAAeO,MAAf,CAAsB,CAAtB,CAAN;;AACAC,6BAAYC,GAAZ,CAAgB,OAAhB,EAA0B,2BAA0BH,MAAM,CAACI,KAAP,EAAe,GAAnE;;AACA,WAAOJ,MAAP;AACD;;AAEOI,EAAAA,KAAK,GAAW;AACtB,WAAQ,KAAKV,OAAL,CAAaM,MAAb,CAAoBK,OAApB,EAAD,CAAmDC,IAA1D;AACD;;AAEMC,EAAAA,WAAW,GAAG;AACnB,WAAQ,sBAAqB,KAAKH,KAAL,EAAa,EAA1C;AACD;;AAEOP,EAAAA,QAAQ,CAACW,IAAD,EAA4BC,OAA5B,EAAiDC,SAAjD,EAAwH;AACtI,UAAMC,0BAA0B,GAAG,6BAAiBH,IAAI,CAACI,OAAtB,KAAkC,KAAKpB,aAAL,CAAmBqB,QAAnB,CAA4BL,IAAI,CAACM,OAAjC,CAArE;;AACAZ,6BAAYC,GAAZ,CAAgB,OAAhB,EAA0B,4BAA2BK,IAAI,CAACO,OAAQ,IAAGP,IAAI,CAACQ,OAAQ,OAAMR,IAAI,CAACI,OAAQ,IAAGJ,IAAI,CAACM,OAAQ,+BAA8BH,0BAA2B,EAA9K;;AACA,QAAI,CAACA,0BAAL,EAAiC;AAC/BF,MAAAA,OAAO;AACP;AACD;;AACD,UAAMQ,MAAM,GAAGP,SAAS,CAAC,KAAKjB,OAAN,CAAxB;AACA,SAAKyB,IAAL,CAAU,qBAAV,EAAiCD,MAAjC;AACD;;AAEME,EAAAA,iBAAiB,CAACC,KAAD,EAAwB;AAC9ClB,6BAAYC,GAAZ,CAAgB,OAAhB,EAA0B,oCAAmCiB,KAAM,EAAnE;;AACA,SAAK5B,aAAL,GAAqB4B,KAArB;AACD;;AAEMC,EAAAA,IAAI,GAAS;AAClBnB,6BAAYC,GAAZ,CAAgB,OAAhB,EAAyB,iBAAzB;;AACA,SAAKT,OAAL,CAAa4B,KAAb;AACD;;AA7CoD","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport net from 'net';\nimport { EventEmitter } from 'events';\n\nimport { SdkObject } from './instrumentation';\nimport { debugLogger } from '../utils/debugLogger';\nimport { isLocalIpAddress } from '../utils/utils';\nimport { SocksProxyServer, SocksConnectionInfo, SocksInterceptedSocketHandler } from './socksServer';\n\nexport class PortForwardingServer extends EventEmitter {\n  private _forwardPorts: number[] = [];\n  private _parent: SdkObject;\n  private _server: SocksProxyServer;\n  constructor(parent: SdkObject) {\n    super();\n    this.setMaxListeners(0);\n    this._parent = parent;\n    this._server = new SocksProxyServer(this._handler.bind(this));\n  }\n\n  static async create(parent: SdkObject) {\n    const server = new PortForwardingServer(parent);\n    await server._server.listen(0);\n    debugLogger.log('proxy', `starting server on port ${server._port()})`);\n    return server;\n  }\n\n  private _port(): number {\n    return (this._server.server.address() as net.AddressInfo).port;\n  }\n\n  public proxyServer() {\n    return `socks5://127.0.0.1:${this._port()}`;\n  }\n\n  private _handler(info: SocksConnectionInfo, forward: () => void, intercept: (parent: SdkObject) => SocksInterceptedSocketHandler): void {\n    const shouldProxyRequestToClient = isLocalIpAddress(info.dstAddr) && this._forwardPorts.includes(info.dstPort);\n    debugLogger.log('proxy', `incoming connection from ${info.srcAddr}:${info.srcPort} to ${info.dstAddr}:${info.dstPort} shouldProxyRequestToClient=${shouldProxyRequestToClient}`);\n    if (!shouldProxyRequestToClient) {\n      forward();\n      return;\n    }\n    const socket = intercept(this._parent);\n    this.emit('incomingSocksSocket', socket);\n  }\n\n  public setForwardedPorts(ports: number[]): void {\n    debugLogger.log('proxy', `enable port forwarding on ports: ${ports}`);\n    this._forwardPorts = ports;\n  }\n\n  public stop(): void {\n    debugLogger.log('proxy', 'stopping server');\n    this._server.close();\n  }\n}\n"],"file":"socksSocket.js"}