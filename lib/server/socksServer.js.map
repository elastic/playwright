{"version":3,"sources":["../../src/server/socksServer.ts"],"names":["ConnectionPhases","SOCKS_AUTH_METHOD","SOCKS_CMD","SOCKS_ATYP","SOCKS_REPLY","SOCKS_VERSION","BUF_REP_INTR_SUCCESS","Buffer","from","SUCCESS","SocksV5ServerParser","constructor","socket","_dstAddrp","_dstPort","_socket","_parsingFinishedResolve","_parsingFinishedReject","_parsingFinished","_info","_phase","VERSION","_authMethods","_dstAddr","_addressType","_methodsp","srcAddr","remoteAddress","srcPort","remotePort","dstAddr","dstPort","Promise","resolve","reject","on","_onData","bind","chunk","i","readByte","closeSocketOnError","end","Error","length","DONE","NMETHODS","alloc","METHODS","copy","includes","NO_AUTH","left","chunkLeft","minLen","unshift","slice","_authWithoutPassword","REQ_CMD","cmd","CONNECT","REQ_RSV","REQ_ATYP","REQ_DSTADDR","IPv4","IPv6","NAME","REQ_DSTADDR_VARLEN","REQ_DSTPORT","undefined","removeListener","join","ipv6str","addr","b","toString","write","ready","info","forward","dstSocket","net","Socket","setKeepAlive","err","writeSocksSocketError","String","pipe","resume","connect","intercept","parent","SocksInterceptedSocketHandler","SdkObject","data","emit","connected","error","writable","body","byteLength","SocksProxyServer","incomingMessageHandler","server","createServer","_handleConnection","listen","port","host","parser","parsedSocket","debugLogger","log","stack","close"],"mappings":";;;;;;;AAeA;;AAEA;;AACA;;;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAaKA,gB;;WAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;AAAAA,EAAAA,gB,CAAAA,gB;GAAAA,gB,KAAAA,gB;;IAaAC,iB;;WAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;GAAAA,iB,KAAAA,iB;;IAIAC,S;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;IAMAC,U;;WAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;IAMAC,W;;WAAAA,W;AAAAA,EAAAA,W,CAAAA,W;GAAAA,W,KAAAA,W;;AAIL,MAAMC,aAAa,GAAG,GAAtB;AAEA,MAAMC,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAY,CACvC,IADuC,EAEvCJ,WAAW,CAACK,OAF2B,EAGvC,IAHuC,EAIvC,IAJuC,EAKvC,IALuC,EAKjC,IALiC,EAK3B,IAL2B,EAKrB,IALqB,EAMvC,IANuC,EAMjC,IANiC,CAAZ,CAA7B;AAUA;AACA;AACA;;AACA,MAAMC,mBAAN,CAA0B;AAaxBC,EAAAA,WAAW,CAACC,MAAD,EAAqB;AAAA,SAZxBC,SAYwB,GAZJ,CAYI;AAAA,SAXxBC,QAWwB;AAAA,SAVxBC,OAUwB;AAAA,SATxBC,uBASwB;AAAA,SARxBC,sBAQwB;AAAA,SAPxBC,gBAOwB;AAAA,SANxBC,KAMwB;AAAA,SALxBC,MAKwB,GALGpB,gBAAgB,CAACqB,OAKpB;AAAA,SAJxBC,YAIwB;AAAA,SAHxBC,QAGwB;AAAA,SAFxBC,YAEwB;AAAA,SADxBC,SACwB,GADJ,CACI;AAC9B,SAAKV,OAAL,GAAeH,MAAf;AACA,SAAKO,KAAL,GAAa;AAAEO,MAAAA,OAAO,EAAEd,MAAM,CAACe,aAAlB;AAAkCC,MAAAA,OAAO,EAAEhB,MAAM,CAACiB,UAAlD;AAA+DC,MAAAA,OAAO,EAAE,EAAxE;AAA4EC,MAAAA,OAAO,EAAE;AAArF,KAAb;AACA,SAAKb,gBAAL,GAAwB,IAAIc,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvD,WAAKlB,uBAAL,GAA+BiB,OAA/B;AACA,WAAKhB,sBAAL,GAA8BiB,MAA9B;AACD,KAHuB,CAAxB;AAIAtB,IAAAA,MAAM,CAACuB,EAAP,CAAU,MAAV,EAAkB,KAAKC,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAlB;AACAzB,IAAAA,MAAM,CAACuB,EAAP,CAAU,OAAV,EAAmB,MAAM,CAAE,CAA3B;AACD;;AACOC,EAAAA,OAAO,CAACE,KAAD,EAAgB;AAC7B,UAAM1B,MAAM,GAAG,KAAKG,OAApB;AACA,QAAIwB,CAAC,GAAG,CAAR;;AACA,UAAMC,QAAQ,GAAG,MAAMF,KAAK,CAACC,CAAC,EAAF,CAA5B;;AACA,UAAME,kBAAkB,GAAG,MAAM;AAC/B7B,MAAAA,MAAM,CAAC8B,GAAP;;AACA,WAAKzB,sBAAL,CAA4B,IAAI0B,KAAJ,CAAU,iBAAV,CAA5B;AACD,KAHD;;AAIA,WAAOJ,CAAC,GAAGD,KAAK,CAACM,MAAV,IAAoB,KAAKxB,MAAL,KAAgBpB,gBAAgB,CAAC6C,IAA5D,EAAkE;AAChE,cAAQ,KAAKzB,MAAb;AACE,aAAKpB,gBAAgB,CAACqB,OAAtB;AACE,cAAImB,QAAQ,OAAOnC,aAAnB,EACE,OAAOoC,kBAAkB,EAAzB;AACF,eAAKrB,MAAL,GAAcpB,gBAAgB,CAAC8C,QAA/B;AACA;;AAEF,aAAK9C,gBAAgB,CAAC8C,QAAtB;AACE,eAAKxB,YAAL,GAAoBf,MAAM,CAACwC,KAAP,CAAaP,QAAQ,EAArB,CAApB;AACA,eAAKpB,MAAL,GAAcpB,gBAAgB,CAACgD,OAA/B;AACA;;AAEF,aAAKhD,gBAAgB,CAACgD,OAAtB;AAA+B;AAC7B,gBAAI,CAAC,KAAK1B,YAAV,EACE,OAAOmB,kBAAkB,EAAzB;AACFH,YAAAA,KAAK,CAACW,IAAN,CAAW,KAAK3B,YAAhB,EAA8B,CAA9B,EAAiCiB,CAAjC,EAAoCA,CAAC,GAAGD,KAAK,CAACM,MAA9C;AACA,gBAAI,CAAC,KAAKtB,YAAL,CAAkB4B,QAAlB,CAA2BjD,iBAAiB,CAACkD,OAA7C,CAAL,EACE,OAAOV,kBAAkB,EAAzB;AACF,kBAAMW,IAAI,GAAG,KAAK9B,YAAL,CAAkBsB,MAAlB,GAA2B,KAAKnB,SAA7C;AACA,kBAAM4B,SAAS,GAAGf,KAAK,CAACM,MAAN,GAAeL,CAAjC;AACA,kBAAMe,MAAM,GAAIF,IAAI,GAAGC,SAAP,GAAmBD,IAAnB,GAA0BC,SAA1C;AACAf,YAAAA,KAAK,CAACW,IAAN,CAAW,KAAK3B,YAAhB,EAA8B,KAAKG,SAAnC,EAA8Cc,CAA9C,EAAiDA,CAAC,GAAGe,MAArD;AACA,iBAAK7B,SAAL,IAAkB6B,MAAlB;AACAf,YAAAA,CAAC,IAAIe,MAAL;AACA,gBAAI,KAAK7B,SAAL,KAAmB,KAAKH,YAAL,CAAkBsB,MAAzC,EACE,OAAOH,kBAAkB,EAAzB;AACF,gBAAIF,CAAC,GAAGD,KAAK,CAACM,MAAd,EACE,KAAK7B,OAAL,CAAawC,OAAb,CAAqBjB,KAAK,CAACkB,KAAN,CAAYjB,CAAZ,CAArB;;AACF,iBAAKkB,oBAAL,CAA0B7C,MAA1B;;AACA,iBAAKQ,MAAL,GAAcpB,gBAAgB,CAAC0D,OAA/B;AACA;AACD;;AAED,aAAK1D,gBAAgB,CAAC0D,OAAtB;AACE,cAAIlB,QAAQ,OAAOnC,aAAnB,EACE,OAAOoC,kBAAkB,EAAzB;AACF,gBAAMkB,GAAc,GAAGnB,QAAQ,EAA/B;AACA,cAAImB,GAAG,KAAKzD,SAAS,CAAC0D,OAAtB,EACE,OAAOnB,kBAAkB,EAAzB;AACF,eAAKrB,MAAL,GAAcpB,gBAAgB,CAAC6D,OAA/B;AACA;;AAEF,aAAK7D,gBAAgB,CAAC6D,OAAtB;AACErB,UAAAA,QAAQ;AACR,eAAKpB,MAAL,GAAcpB,gBAAgB,CAAC8D,QAA/B;AACA;;AAEF,aAAK9D,gBAAgB,CAAC8D,QAAtB;AACE,eAAK1C,MAAL,GAAcpB,gBAAgB,CAAC+D,WAA/B;AACA,eAAKvC,YAAL,GAAoBgB,QAAQ,EAA5B;AACA,cAAI,EAAE,KAAKhB,YAAL,IAAqBrB,UAAvB,CAAJ,EACE,OAAOsC,kBAAkB,EAAzB;AACF,cAAI,KAAKjB,YAAL,KAAsBrB,UAAU,CAAC6D,IAArC,EACE,KAAKzC,QAAL,GAAgBhB,MAAM,CAACwC,KAAP,CAAa,CAAb,CAAhB,CADF,KAEK,IAAI,KAAKvB,YAAL,KAAsBrB,UAAU,CAAC8D,IAArC,EACH,KAAK1C,QAAL,GAAgBhB,MAAM,CAACwC,KAAP,CAAa,EAAb,CAAhB,CADG,KAEA,IAAI,KAAKvB,YAAL,KAAsBrB,UAAU,CAAC+D,IAArC,EACH,KAAK9C,MAAL,GAAcpB,gBAAgB,CAACmE,kBAA/B;AACF;;AAEF,aAAKnE,gBAAgB,CAAC+D,WAAtB;AAAmC;AACjC,gBAAI,CAAC,KAAKxC,QAAV,EACE,OAAOkB,kBAAkB,EAAzB;AACF,kBAAMW,IAAI,GAAG,KAAK7B,QAAL,CAAcqB,MAAd,GAAuB,KAAK/B,SAAzC;AACA,kBAAMwC,SAAS,GAAGf,KAAK,CAACM,MAAN,GAAeL,CAAjC;AACA,kBAAMe,MAAM,GAAIF,IAAI,GAAGC,SAAP,GAAmBD,IAAnB,GAA0BC,SAA1C;AACAf,YAAAA,KAAK,CAACW,IAAN,CAAW,KAAK1B,QAAhB,EAA0B,KAAKV,SAA/B,EAA0C0B,CAA1C,EAA6CA,CAAC,GAAGe,MAAjD;AACA,iBAAKzC,SAAL,IAAkByC,MAAlB;AACAf,YAAAA,CAAC,IAAIe,MAAL;AACA,gBAAI,KAAKzC,SAAL,KAAmB,KAAKU,QAAL,CAAcqB,MAArC,EACE,KAAKxB,MAAL,GAAcpB,gBAAgB,CAACoE,WAA/B;AACF;AACD;;AAED,aAAKpE,gBAAgB,CAACmE,kBAAtB;AACE,eAAK5C,QAAL,GAAgBhB,MAAM,CAACwC,KAAP,CAAaP,QAAQ,EAArB,CAAhB;AACA,eAAKpB,MAAL,GAAcpB,gBAAgB,CAAC+D,WAA/B;AACA;;AAEF,aAAK/D,gBAAgB,CAACoE,WAAtB;AACE,cAAI,CAAC,KAAK7C,QAAV,EACE,OAAOkB,kBAAkB,EAAzB;;AACF,cAAI,KAAK3B,QAAL,KAAkBuD,SAAtB,EAAiC;AAC/B,iBAAKvD,QAAL,GAAgB0B,QAAQ,EAAxB;AACA;AACD;;AACD,eAAK1B,QAAL,KAAkB,CAAlB;AACA,eAAKA,QAAL,IAAiB0B,QAAQ,EAAzB;;AAEA,eAAKzB,OAAL,CAAauD,cAAb,CAA4B,MAA5B,EAAoC,KAAKlC,OAAzC;;AACA,cAAIG,CAAC,GAAGD,KAAK,CAACM,MAAd,EACE,KAAK7B,OAAL,CAAawC,OAAb,CAAqBjB,KAAK,CAACkB,KAAN,CAAYjB,CAAZ,CAArB;;AAEF,cAAI,KAAKf,YAAL,KAAsBrB,UAAU,CAAC6D,IAArC,EAA2C;AACzC,iBAAK7C,KAAL,CAAWW,OAAX,GAAqB,CAAC,GAAG,KAAKP,QAAT,EAAmBgD,IAAnB,CAAwB,GAAxB,CAArB;AACD,WAFD,MAEO,IAAI,KAAK/C,YAAL,KAAsBrB,UAAU,CAAC8D,IAArC,EAA2C;AAChD,gBAAIO,OAAO,GAAG,EAAd;AACA,kBAAMC,IAAI,GAAG,KAAKlD,QAAlB;;AACA,iBAAK,IAAImD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwB,EAAEA,CAA1B,EAA6B;AAC3B,kBAAIA,CAAC,GAAG,CAAJ,KAAU,CAAV,IAAeA,CAAC,GAAG,CAAvB,EACEF,OAAO,IAAI,GAAX;AACFA,cAAAA,OAAO,IAAI,CAACC,IAAI,CAACC,CAAD,CAAJ,GAAU,EAAV,GAAe,GAAf,GAAqB,EAAtB,IAA4BD,IAAI,CAACC,CAAD,CAAJ,CAAQC,QAAR,CAAiB,EAAjB,CAAvC;AACD;;AACD,iBAAKxD,KAAL,CAAWW,OAAX,GAAqB0C,OAArB;AACD,WATM,MASA;AACL,iBAAKrD,KAAL,CAAWW,OAAX,GAAqB,KAAKP,QAAL,CAAcoD,QAAd,EAArB;AACD;;AACD,eAAKxD,KAAL,CAAWY,OAAX,GAAqB,KAAKjB,QAA1B;AACA,eAAKM,MAAL,GAAcpB,gBAAgB,CAAC6C,IAA/B;;AACA,eAAK7B,uBAAL;;AACA;;AACF;AACE,iBAAOyB,kBAAkB,EAAzB;AAhHJ;AAkHD;AACF;;AAEOgB,EAAAA,oBAAoB,CAAC7C,MAAD,EAAqB;AAC/CA,IAAAA,MAAM,CAACgE,KAAP,CAAarE,MAAM,CAACC,IAAP,CAAY,CAAC,IAAD,EAAO,IAAP,CAAZ,CAAb;AACD;;AAEU,QAALqE,KAAK,GAAiI;AAC1I,UAAM,KAAK3D,gBAAX;AACA,WAAO;AACL4D,MAAAA,IAAI,EAAE,KAAK3D,KADN;AAEL4D,MAAAA,OAAO,EAAE,MAAM;AACb,cAAMC,SAAS,GAAG,IAAIC,aAAIC,MAAR,EAAlB;;AACA,aAAKnE,OAAL,CAAaoB,EAAb,CAAgB,OAAhB,EAAyB,MAAM6C,SAAS,CAACtC,GAAV,EAA/B;;AACA,aAAK3B,OAAL,CAAaoB,EAAb,CAAgB,KAAhB,EAAuB,MAAM6C,SAAS,CAACtC,GAAV,EAA7B;;AACAsC,QAAAA,SAAS,CAACG,YAAV,CAAuB,KAAvB;AACAH,QAAAA,SAAS,CAAC7C,EAAV,CAAa,OAAb,EAAuBiD,GAAD,IAAgCC,qBAAqB,CAAC,KAAKtE,OAAN,EAAeuE,MAAM,CAACF,GAAD,CAArB,CAA3E;AACAJ,QAAAA,SAAS,CAAC7C,EAAV,CAAa,SAAb,EAAwB,MAAM;AAC5B,eAAKpB,OAAL,CAAa6D,KAAb,CAAmBtE,oBAAnB;;AACA,eAAKS,OAAL,CAAawE,IAAb,CAAkBP,SAAlB,EAA6BO,IAA7B,CAAkC,KAAKxE,OAAvC;;AACA,eAAKA,OAAL,CAAayE,MAAb;AACD,SAJD,EAIGC,OAJH,CAIW,KAAKtE,KAAL,CAAWY,OAJtB,EAI+B,KAAKZ,KAAL,CAAWW,OAJ1C;AAKD,OAbI;AAcL4D,MAAAA,SAAS,EAAGC,MAAD,IAAsD;AAC/D,eAAO,IAAIC,6BAAJ,CAAkCD,MAAlC,EAA0C,KAAK5E,OAA/C,EAAwD,KAAKI,KAAL,CAAWW,OAAnE,EAA4E,KAAKX,KAAL,CAAWY,OAAvF,CAAP;AACD;AAhBI,KAAP;AAkBD;;AA7KuB;;AAgLnB,MAAM6D,6BAAN,SAA4CC,0BAA5C,CAAsD;AAI3DlF,EAAAA,WAAW,CAACgF,MAAD,EAAoB/E,MAApB,EAAwCkB,OAAxC,EAAyDC,OAAzD,EAA0E;AACnF,UAAM4D,MAAN,EAAc,aAAd;AADmF,SAHrF/E,MAGqF;AAAA,SAFrFkB,OAEqF;AAAA,SADrFC,OACqF;AAEnF,SAAKnB,MAAL,GAAcA,MAAd;AACA,SAAKkB,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AACAnB,IAAAA,MAAM,CAACuB,EAAP,CAAU,MAAV,EAAkB2D,IAAI,IAAI,KAAKC,IAAL,CAAU,MAAV,EAAkBD,IAAlB,CAA1B;AACAlF,IAAAA,MAAM,CAACuB,EAAP,CAAU,OAAV,EAAmB2D,IAAI,IAAI,KAAKC,IAAL,CAAU,OAAV,EAAmBD,IAAnB,CAA3B;AACD;;AACDE,EAAAA,SAAS,GAAG;AACV,SAAKpF,MAAL,CAAYgE,KAAZ,CAAkBtE,oBAAlB;AACA,SAAKM,MAAL,CAAY4E,MAAZ;AACD;;AACDS,EAAAA,KAAK,CAACA,KAAD,EAAgB;AACnB,SAAKrF,MAAL,CAAY4E,MAAZ;AACAH,IAAAA,qBAAqB,CAAC,KAAKzE,MAAN,EAAcqF,KAAd,CAArB;AACD;;AACDrB,EAAAA,KAAK,CAACkB,IAAD,EAAe;AAClB,SAAKlF,MAAL,CAAYgE,KAAZ,CAAkBkB,IAAlB;AACD;;AACDpD,EAAAA,GAAG,GAAG;AACJ,SAAK9B,MAAL,CAAY8B,GAAZ;AACD;;AAzB0D;;;;AA4B7D,SAAS2C,qBAAT,CAA+BzE,MAA/B,EAAmDqF,KAAnD,EAAkE;AAChE,MAAI,CAACrF,MAAM,CAACsF,QAAZ,EACE;AACFtF,EAAAA,MAAM,CAACgE,KAAP,CAAatE,oBAAb;AAEA,QAAM6F,IAAI,GAAI,qBAAoBF,KAAM,EAAxC;AACArF,EAAAA,MAAM,CAAC8B,GAAP,CAAW,CACT,iBADS,EAET,mBAFS,EAGT,0BAHS,EAIT,qBAAqBnC,MAAM,CAAC6F,UAAP,CAAkBD,IAAlB,CAJZ,EAKT,EALS,EAMTA,IANS,EAOT5B,IAPS,CAOJ,MAPI,CAAX;AAQD;;AAIM,MAAM8B,gBAAN,CAAuB;AAE5B1F,EAAAA,WAAW,CAAC2F,sBAAD,EAAsD;AAAA,SAD1DC,MAC0D;AAC/D,SAAKA,MAAL,GAActB,aAAIuB,YAAJ,CAAiB,KAAKC,iBAAL,CAAuBpE,IAAvB,CAA4B,IAA5B,EAAkCiE,sBAAlC,CAAjB,CAAd;AACD;;AAEkB,QAANI,MAAM,CAACC,IAAD,EAAeC,IAAf,EAA8B;AAC/C,UAAM,IAAI5E,OAAJ,CAAYC,OAAO,IAAI,KAAKsE,MAAL,CAAYG,MAAZ,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+B3E,OAA/B,CAAvB,CAAN;AACD;;AAEsB,QAAjBwE,iBAAiB,CAACH,sBAAD,EAAsD1F,MAAtD,EAA0E;AAC/F,UAAMiG,MAAM,GAAG,IAAInG,mBAAJ,CAAwBE,MAAxB,CAAf;AACA,QAAIkG,YAAJ;;AACA,QAAI;AACFA,MAAAA,YAAY,GAAG,MAAMD,MAAM,CAAChC,KAAP,EAArB;AACD,KAFD,CAEE,OAAOoB,KAAP,EAAc;AACdc,+BAAYC,GAAZ,CAAgB,OAAhB,EAA0B,oBAAmBf,KAAM,IAAGA,KAA7B,aAA6BA,KAA7B,uBAA6BA,KAAK,CAAEgB,KAAM,EAAnE;;AACA;AACD;;AACDX,IAAAA,sBAAsB,CAACQ,YAAY,CAAChC,IAAd,EAAoBgC,YAAY,CAAC/B,OAAjC,EAA0C+B,YAAY,CAACpB,SAAvD,CAAtB;AACD;;AAEMwB,EAAAA,KAAK,GAAG;AACb,SAAKX,MAAL,CAAYW,KAAZ;AACD;;AAxB2B","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport net from 'net';\n\nimport { debugLogger } from '../utils/debugLogger';\nimport { SdkObject } from './instrumentation';\n\nexport type SocksConnectionInfo = {\n  srcAddr: string,\n  srcPort: number,\n  dstAddr: string;\n  dstPort: number;\n};\n\nenum ConnectionPhases {\n  VERSION = 0,\n  NMETHODS,\n  METHODS,\n  REQ_CMD,\n  REQ_RSV,\n  REQ_ATYP,\n  REQ_DSTADDR,\n  REQ_DSTADDR_VARLEN,\n  REQ_DSTPORT,\n  DONE,\n}\n\nenum SOCKS_AUTH_METHOD {\n  NO_AUTH = 0\n}\n\nenum SOCKS_CMD {\n  CONNECT = 0x01,\n  BIND = 0x02,\n  UDP = 0x03\n}\n\nenum SOCKS_ATYP {\n  IPv4 = 0x01,\n  NAME = 0x03,\n  IPv6 = 0x04\n}\n\nenum SOCKS_REPLY {\n  SUCCESS = 0x00,\n}\n\nconst SOCKS_VERSION = 0x5;\n\nconst BUF_REP_INTR_SUCCESS = Buffer.from([\n  0x05,\n  SOCKS_REPLY.SUCCESS,\n  0x00,\n  0x01,\n  0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00\n]);\n\n\n/**\n * https://tools.ietf.org/html/rfc1928\n */\nclass SocksV5ServerParser {\n  private _dstAddrp: number = 0;\n  private _dstPort?: number;\n  private _socket: net.Socket;\n  private _parsingFinishedResolve!: (value?: unknown) => void;\n  private _parsingFinishedReject!: (value: Error) => void;\n  private _parsingFinished: Promise<unknown>;\n  private _info: SocksConnectionInfo;\n  private _phase: ConnectionPhases = ConnectionPhases.VERSION;\n  private _authMethods?: Buffer;\n  private _dstAddr?: Buffer;\n  private _addressType: any;\n  private _methodsp: number = 0;\n  constructor(socket: net.Socket) {\n    this._socket = socket;\n    this._info = { srcAddr: socket.remoteAddress!, srcPort: socket.remotePort!, dstAddr: '', dstPort: 0 };\n    this._parsingFinished = new Promise((resolve, reject) => {\n      this._parsingFinishedResolve = resolve;\n      this._parsingFinishedReject = reject;\n    });\n    socket.on('data', this._onData.bind(this));\n    socket.on('error', () => {});\n  }\n  private _onData(chunk: Buffer) {\n    const socket = this._socket;\n    let i = 0;\n    const readByte = () => chunk[i++];\n    const closeSocketOnError = () => {\n      socket.end();\n      this._parsingFinishedReject(new Error('Parsing aborted'));\n    };\n    while (i < chunk.length && this._phase !== ConnectionPhases.DONE) {\n      switch (this._phase) {\n        case ConnectionPhases.VERSION:\n          if (readByte() !== SOCKS_VERSION)\n            return closeSocketOnError();\n          this._phase = ConnectionPhases.NMETHODS;\n          break;\n\n        case ConnectionPhases.NMETHODS:\n          this._authMethods = Buffer.alloc(readByte());\n          this._phase = ConnectionPhases.METHODS;\n          break;\n\n        case ConnectionPhases.METHODS: {\n          if (!this._authMethods)\n            return closeSocketOnError();\n          chunk.copy(this._authMethods, 0, i, i + chunk.length);\n          if (!this._authMethods.includes(SOCKS_AUTH_METHOD.NO_AUTH))\n            return closeSocketOnError();\n          const left = this._authMethods.length - this._methodsp;\n          const chunkLeft = chunk.length - i;\n          const minLen = (left < chunkLeft ? left : chunkLeft);\n          chunk.copy(this._authMethods, this._methodsp, i, i + minLen);\n          this._methodsp += minLen;\n          i += minLen;\n          if (this._methodsp !== this._authMethods.length)\n            return closeSocketOnError();\n          if (i < chunk.length)\n            this._socket.unshift(chunk.slice(i));\n          this._authWithoutPassword(socket);\n          this._phase = ConnectionPhases.REQ_CMD;\n          break;\n        }\n\n        case ConnectionPhases.REQ_CMD:\n          if (readByte() !== SOCKS_VERSION)\n            return closeSocketOnError();\n          const cmd: SOCKS_CMD = readByte();\n          if (cmd !== SOCKS_CMD.CONNECT)\n            return closeSocketOnError();\n          this._phase = ConnectionPhases.REQ_RSV;\n          break;\n\n        case ConnectionPhases.REQ_RSV:\n          readByte();\n          this._phase = ConnectionPhases.REQ_ATYP;\n          break;\n\n        case ConnectionPhases.REQ_ATYP:\n          this._phase = ConnectionPhases.REQ_DSTADDR;\n          this._addressType = readByte();\n          if (!(this._addressType in SOCKS_ATYP))\n            return closeSocketOnError();\n          if (this._addressType === SOCKS_ATYP.IPv4)\n            this._dstAddr = Buffer.alloc(4);\n          else if (this._addressType === SOCKS_ATYP.IPv6)\n            this._dstAddr = Buffer.alloc(16);\n          else if (this._addressType === SOCKS_ATYP.NAME)\n            this._phase = ConnectionPhases.REQ_DSTADDR_VARLEN;\n          break;\n\n        case ConnectionPhases.REQ_DSTADDR: {\n          if (!this._dstAddr)\n            return closeSocketOnError();\n          const left = this._dstAddr.length - this._dstAddrp;\n          const chunkLeft = chunk.length - i;\n          const minLen = (left < chunkLeft ? left : chunkLeft);\n          chunk.copy(this._dstAddr, this._dstAddrp, i, i + minLen);\n          this._dstAddrp += minLen;\n          i += minLen;\n          if (this._dstAddrp === this._dstAddr.length)\n            this._phase = ConnectionPhases.REQ_DSTPORT;\n          break;\n        }\n\n        case ConnectionPhases.REQ_DSTADDR_VARLEN:\n          this._dstAddr = Buffer.alloc(readByte());\n          this._phase = ConnectionPhases.REQ_DSTADDR;\n          break;\n\n        case ConnectionPhases.REQ_DSTPORT:\n          if (!this._dstAddr)\n            return closeSocketOnError();\n          if (this._dstPort === undefined) {\n            this._dstPort = readByte();\n            break;\n          }\n          this._dstPort <<= 8;\n          this._dstPort += readByte();\n\n          this._socket.removeListener('data', this._onData);\n          if (i < chunk.length)\n            this._socket.unshift(chunk.slice(i));\n\n          if (this._addressType === SOCKS_ATYP.IPv4) {\n            this._info.dstAddr = [...this._dstAddr].join('.');\n          } else if (this._addressType === SOCKS_ATYP.IPv6) {\n            let ipv6str = '';\n            const addr = this._dstAddr;\n            for (let b = 0; b < 16; ++b) {\n              if (b % 2 === 0 && b > 0)\n                ipv6str += ':';\n              ipv6str += (addr[b] < 16 ? '0' : '') + addr[b].toString(16);\n            }\n            this._info.dstAddr = ipv6str;\n          } else {\n            this._info.dstAddr = this._dstAddr.toString();\n          }\n          this._info.dstPort = this._dstPort;\n          this._phase = ConnectionPhases.DONE;\n          this._parsingFinishedResolve();\n          return;\n        default:\n          return closeSocketOnError();\n      }\n    }\n  }\n\n  private _authWithoutPassword(socket: net.Socket) {\n    socket.write(Buffer.from([0x05, 0x00]));\n  }\n\n  async ready(): Promise<{ info: SocksConnectionInfo, forward: () => void, intercept: (parent: SdkObject) => SocksInterceptedSocketHandler }> {\n    await this._parsingFinished;\n    return {\n      info: this._info,\n      forward: () => {\n        const dstSocket = new net.Socket();\n        this._socket.on('close', () => dstSocket.end());\n        this._socket.on('end', () => dstSocket.end());\n        dstSocket.setKeepAlive(false);\n        dstSocket.on('error', (err: NodeJS.ErrnoException) => writeSocksSocketError(this._socket, String(err)));\n        dstSocket.on('connect', () => {\n          this._socket.write(BUF_REP_INTR_SUCCESS);\n          this._socket.pipe(dstSocket).pipe(this._socket);\n          this._socket.resume();\n        }).connect(this._info.dstPort, this._info.dstAddr);\n      },\n      intercept: (parent: SdkObject): SocksInterceptedSocketHandler => {\n        return new SocksInterceptedSocketHandler(parent, this._socket, this._info.dstAddr, this._info.dstPort);\n      },\n    };\n  }\n}\n\nexport class SocksInterceptedSocketHandler extends SdkObject {\n  socket: net.Socket;\n  dstAddr: string;\n  dstPort: number;\n  constructor(parent: SdkObject, socket: net.Socket, dstAddr: string, dstPort: number) {\n    super(parent, 'SocksSocket');\n    this.socket = socket;\n    this.dstAddr = dstAddr;\n    this.dstPort = dstPort;\n    socket.on('data', data => this.emit('data', data));\n    socket.on('close', data => this.emit('close', data));\n  }\n  connected() {\n    this.socket.write(BUF_REP_INTR_SUCCESS);\n    this.socket.resume();\n  }\n  error(error: string) {\n    this.socket.resume();\n    writeSocksSocketError(this.socket, error);\n  }\n  write(data: Buffer) {\n    this.socket.write(data);\n  }\n  end() {\n    this.socket.end();\n  }\n}\n\nfunction writeSocksSocketError(socket: net.Socket, error: string) {\n  if (!socket.writable)\n    return;\n  socket.write(BUF_REP_INTR_SUCCESS);\n\n  const body = `Connection error: ${error}`;\n  socket.end([\n    'HTTP/1.1 502 OK',\n    'Connection: close',\n    'Content-Type: text/plain',\n    'Content-Length: ' + Buffer.byteLength(body),\n    '',\n    body\n  ].join('\\r\\n'));\n}\n\ntype IncomingProxyRequestHandler = (info: SocksConnectionInfo, forward: () => void, intercept: (parent: SdkObject) => SocksInterceptedSocketHandler) => void;\n\nexport class SocksProxyServer {\n  public server: net.Server;\n  constructor(incomingMessageHandler: IncomingProxyRequestHandler) {\n    this.server = net.createServer(this._handleConnection.bind(this, incomingMessageHandler));\n  }\n\n  public async listen(port: number, host?: string) {\n    await new Promise(resolve => this.server.listen(port, host, resolve));\n  }\n\n  async _handleConnection(incomingMessageHandler: IncomingProxyRequestHandler, socket: net.Socket) {\n    const parser = new SocksV5ServerParser(socket);\n    let parsedSocket;\n    try {\n      parsedSocket = await parser.ready();\n    } catch (error) {\n      debugLogger.log('proxy', `Could not parse: ${error} ${error?.stack}`);\n      return;\n    }\n    incomingMessageHandler(parsedSocket.info, parsedSocket.forward, parsedSocket.intercept);\n  }\n\n  public close() {\n    this.server.close();\n  }\n}\n"],"file":"socksServer.js"}