{"version":3,"sources":["../../../src/server/common/selectorParser.ts"],"names":["customCSSNames","Set","parseSelector","selector","result","parseSelectorString","parts","map","part","name","body","parsedCSS","capture","index","quote","start","append","substring","trim","eqIndex","indexOf","match","length","test","startsWith","push","undefined","Error","includes","c"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CSSComplexSelectorList, parseCSS } from './cssParser';\n\nexport type ParsedSelectorPart = {\n  name: string,\n  body: string | CSSComplexSelectorList,\n};\n\nexport type ParsedSelector = {\n  parts: ParsedSelectorPart[],\n  capture?: number,\n};\n\ntype ParsedSelectorStrings = {\n  parts: { name: string, body: string }[],\n  capture?: number,\n};\n\nexport const customCSSNames = new Set(['not', 'is', 'where', 'has', 'scope', 'light', 'visible', 'text', 'text-matches', 'text-is', 'has-text', 'above', 'below', 'right-of', 'left-of', 'near', 'nth-match']);\n\nexport function parseSelector(selector: string): ParsedSelector {\n  const result = parseSelectorString(selector);\n  const parts: ParsedSelectorPart[] = result.parts.map(part => {\n    if (part.name === 'css' || part.name === 'css:light') {\n      if (part.name === 'css:light')\n        part.body = ':light(' + part.body + ')';\n      const parsedCSS = parseCSS(part.body, customCSSNames);\n      return {\n        name: 'css',\n        body: parsedCSS.selector\n      };\n    }\n    return part;\n  });\n  return {\n    capture: result.capture,\n    parts\n  };\n}\n\nfunction parseSelectorString(selector: string): ParsedSelectorStrings {\n  let index = 0;\n  let quote: string | undefined;\n  let start = 0;\n  const result: ParsedSelectorStrings = { parts: [] };\n  const append = () => {\n    const part = selector.substring(start, index).trim();\n    const eqIndex = part.indexOf('=');\n    let name: string;\n    let body: string;\n    if (eqIndex !== -1 && part.substring(0, eqIndex).trim().match(/^[a-zA-Z_0-9-+:*]+$/)) {\n      name = part.substring(0, eqIndex).trim();\n      body = part.substring(eqIndex + 1);\n    } else if (part.length > 1 && part[0] === '\"' && part[part.length - 1] === '\"') {\n      name = 'text';\n      body = part;\n    } else if (part.length > 1 && part[0] === \"'\" && part[part.length - 1] === \"'\") {\n      name = 'text';\n      body = part;\n    } else if (/^\\(*\\/\\//.test(part) || part.startsWith('..')) {\n      // If selector starts with '//' or '//' prefixed with multiple opening\n      // parenthesis, consider xpath. @see https://github.com/microsoft/playwright/issues/817\n      // If selector starts with '..', consider xpath as well.\n      name = 'xpath';\n      body = part;\n    } else {\n      name = 'css';\n      body = part;\n    }\n    let capture = false;\n    if (name[0] === '*') {\n      capture = true;\n      name = name.substring(1);\n    }\n    result.parts.push({ name, body });\n    if (capture) {\n      if (result.capture !== undefined)\n        throw new Error(`Only one of the selectors can capture using * modifier`);\n      result.capture = result.parts.length - 1;\n    }\n  };\n\n  if (!selector.includes('>>')) {\n    index = selector.length;\n    append();\n    return result;\n  }\n\n  while (index < selector.length) {\n    const c = selector[index];\n    if (c === '\\\\' && index + 1 < selector.length) {\n      index += 2;\n    } else if (c === quote) {\n      quote = undefined;\n      index++;\n    } else if (!quote && (c === '\"' || c === '\\'' || c === '`')) {\n      quote = c;\n      index++;\n    } else if (!quote && c === '>' && selector[index + 1] === '>') {\n      append();\n      index += 2;\n      start = index;\n    } else {\n      index++;\n    }\n  }\n  append();\n  return result;\n}\n"],"file":"selectorParser.js"}