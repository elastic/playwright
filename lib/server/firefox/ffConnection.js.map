{"version":3,"sources":["../../../src/server/firefox/ffConnection.ts"],"names":["ConnectionEvents","Disconnected","Symbol","kBrowserCloseMessageId","FFConnection","EventEmitter","constructor","transport","protocolLogger","browserLogsCollector","_lastId","_callbacks","_transport","_protocolLogger","_browserLogsCollector","_sessions","_closed","on","addListener","off","removeListener","once","setMaxListeners","Map","onmessage","_onMessage","bind","onclose","_onClose","send","method","params","_checkClosed","id","nextMessageId","_rawSend","Promise","resolve","reject","set","error","Error","helper","formatBrowserLogs","recentLogs","message","sessionId","session","get","dispatchMessage","callback","delete","createProtocolError","result","then","emit","undefined","formattedBrowserLogs","values","dispose","clear","close","createSession","type","FFSession","FFSessionEvents","connection","targetType","rawSend","_connection","_disposed","_targetType","_sessionId","_crashed","markAsCrashed","sendMayFail","catch","debugLogger","log","object","has","protocolError","data"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport { assert } from '../../utils/utils';\nimport { ConnectionTransport, ProtocolRequest, ProtocolResponse } from '../transport';\nimport { Protocol } from './protocol';\nimport { rewriteErrorMessage } from '../../utils/stackTrace';\nimport { debugLogger, RecentLogsCollector } from '../../utils/debugLogger';\nimport { ProtocolLogger } from '../types';\nimport { helper } from '../helper';\n\nexport const ConnectionEvents = {\n  Disconnected: Symbol('Disconnected'),\n};\n\n// FFPlaywright uses this special id to issue Browser.close command which we\n// should ignore.\nexport const kBrowserCloseMessageId = -9999;\n\nexport class FFConnection extends EventEmitter {\n  private _lastId: number;\n  private _callbacks: Map<number, {resolve: Function, reject: Function, error: Error, method: string}>;\n  private _transport: ConnectionTransport;\n  private readonly _protocolLogger: ProtocolLogger;\n  private readonly _browserLogsCollector: RecentLogsCollector;\n  readonly _sessions: Map<string, FFSession>;\n  _closed: boolean;\n\n  on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n\n  constructor(transport: ConnectionTransport, protocolLogger: ProtocolLogger, browserLogsCollector: RecentLogsCollector) {\n    super();\n    this.setMaxListeners(0);\n    this._transport = transport;\n    this._protocolLogger = protocolLogger;\n    this._browserLogsCollector = browserLogsCollector;\n    this._lastId = 0;\n    this._callbacks = new Map();\n\n    this._transport.onmessage = this._onMessage.bind(this);\n    this._transport.onclose = this._onClose.bind(this);\n    this._sessions = new Map();\n    this._closed = false;\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    this._checkClosed(method);\n    const id = this.nextMessageId();\n    this._rawSend({id, method, params});\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {resolve, reject, error: new Error(), method});\n    });\n  }\n\n  nextMessageId(): number {\n    return ++this._lastId;\n  }\n\n  _checkClosed(method: string) {\n    if (this._closed)\n      throw new Error(`Protocol error (${method}): Browser closed.` + helper.formatBrowserLogs(this._browserLogsCollector.recentLogs()));\n  }\n\n  _rawSend(message: ProtocolRequest) {\n    this._protocolLogger('send', message);\n    this._transport.send(message);\n  }\n\n  async _onMessage(message: ProtocolResponse) {\n    this._protocolLogger('receive', message);\n    if (message.id === kBrowserCloseMessageId)\n      return;\n    if (message.sessionId) {\n      const session = this._sessions.get(message.sessionId);\n      if (session)\n        session.dispatchMessage(message);\n    } else if (message.id) {\n      const callback = this._callbacks.get(message.id);\n      // Callbacks could be all rejected if someone has called `.dispose()`.\n      if (callback) {\n        this._callbacks.delete(message.id);\n        if (message.error)\n          callback.reject(createProtocolError(callback.error, callback.method, message.error));\n        else\n          callback.resolve(message.result);\n      }\n    } else {\n      Promise.resolve().then(() => this.emit(message.method!, message.params));\n    }\n  }\n\n  _onClose() {\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n    const formattedBrowserLogs = helper.formatBrowserLogs(this._browserLogsCollector.recentLogs());\n    for (const session of this._sessions.values())\n      session.dispose(formattedBrowserLogs);\n    this._sessions.clear();\n    for (const callback of this._callbacks.values())\n      callback.reject(rewriteErrorMessage(callback.error, `Protocol error (${callback.method}): Browser closed.` + formattedBrowserLogs));\n    this._callbacks.clear();\n    Promise.resolve().then(() => this.emit(ConnectionEvents.Disconnected));\n  }\n\n  close() {\n    if (!this._closed)\n      this._transport.close();\n  }\n\n  createSession(sessionId: string, type: string): FFSession {\n    const session = new FFSession(this, type, sessionId, message => this._rawSend({...message, sessionId}));\n    this._sessions.set(sessionId, session);\n    return session;\n  }\n}\n\nexport const FFSessionEvents = {\n  Disconnected: Symbol('Disconnected')\n};\n\nexport class FFSession extends EventEmitter {\n  _connection: FFConnection;\n  _disposed = false;\n  private _callbacks: Map<number, {resolve: Function, reject: Function, error: Error, method: string}>;\n  private _targetType: string;\n  private _sessionId: string;\n  private _rawSend: (message: any) => void;\n  private _crashed: boolean = false;\n  on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n  once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;\n\n  constructor(connection: FFConnection, targetType: string, sessionId: string, rawSend: (message: any) => void) {\n    super();\n    this.setMaxListeners(0);\n    this._callbacks = new Map();\n    this._connection = connection;\n    this._targetType = targetType;\n    this._sessionId = sessionId;\n    this._rawSend = rawSend;\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  markAsCrashed() {\n    this._crashed = true;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    if (this._crashed)\n      throw new Error('Page crashed');\n    this._connection._checkClosed(method);\n    if (this._disposed)\n      throw new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`);\n    const id = this._connection.nextMessageId();\n    this._rawSend({method, params, id});\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {resolve, reject, error: new Error(), method});\n    });\n  }\n\n  sendMayFail<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T] | void> {\n    return this.send(method, params).catch(error => debugLogger.log('error', error));\n  }\n\n  dispatchMessage(object: ProtocolResponse) {\n    if (object.id && this._callbacks.has(object.id)) {\n      const callback = this._callbacks.get(object.id)!;\n      this._callbacks.delete(object.id);\n      if (object.error)\n        callback.reject(createProtocolError(callback.error, callback.method, object.error));\n      else\n        callback.resolve(object.result);\n    } else {\n      assert(!object.id);\n      Promise.resolve().then(() => this.emit(object.method!, object.params));\n    }\n  }\n\n  dispose(formattedBrowserLogs?: string) {\n    for (const callback of this._callbacks.values())\n      callback.reject(rewriteErrorMessage(callback.error, `Protocol error (${callback.method}): Target closed.` + formattedBrowserLogs));\n    this._callbacks.clear();\n    this._disposed = true;\n    this._connection._sessions.delete(this._sessionId);\n    Promise.resolve().then(() => this.emit(FFSessionEvents.Disconnected));\n  }\n}\n\nfunction createProtocolError(error: Error, method: string, protocolError: { message: string; data: any; }): Error {\n  let message = `Protocol error (${method}): ${protocolError.message}`;\n  if ('data' in protocolError)\n    message += ` ${protocolError.data}`;\n  return rewriteErrorMessage(error, message);\n}\n"],"file":"ffConnection.js"}