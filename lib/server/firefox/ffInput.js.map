{"version":3,"sources":["../../../src/server/firefox/ffInput.ts"],"names":["toModifiersMask","modifiers","mask","has","toButtonNumber","button","toButtonsMask","buttons","RawKeyboardImpl","constructor","client","_client","keydown","code","keyCode","keyCodeWithoutLocation","key","location","autoRepeat","text","send","type","repeat","keyup","sendText","RawMouseImpl","move","x","y","down","clickCount","up","RawTouchscreenImpl","tap"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as input from '../input';\nimport * as types from '../types';\nimport { FFSession } from './ffConnection';\n\nfunction toModifiersMask(modifiers: Set<types.KeyboardModifier>): number {\n  let mask = 0;\n  if (modifiers.has('Alt'))\n    mask |= 1;\n  if (modifiers.has('Control'))\n    mask |= 2;\n  if (modifiers.has('Shift'))\n    mask |= 4;\n  if (modifiers.has('Meta'))\n    mask |= 8;\n  return mask;\n}\n\nfunction toButtonNumber(button: types.MouseButton): number {\n  if (button === 'left')\n    return 0;\n  if (button === 'middle')\n    return 1;\n  if (button === 'right')\n    return 2;\n  return 0;\n}\n\nfunction toButtonsMask(buttons: Set<types.MouseButton>): number {\n  let mask = 0;\n  if (buttons.has('left'))\n    mask |= 1;\n  if (buttons.has('right'))\n    mask |= 2;\n  if (buttons.has('middle'))\n    mask |= 4;\n  return mask;\n}\n\nexport class RawKeyboardImpl implements input.RawKeyboard {\n  private _client: FFSession;\n\n  constructor(client: FFSession) {\n    this._client = client;\n  }\n\n  async keydown(modifiers: Set<types.KeyboardModifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void> {\n    if (code === 'MetaLeft')\n      code = 'OSLeft';\n    if (code === 'MetaRight')\n      code = 'OSRight';\n    // Firefox will figure out Enter by itself\n    if (text === '\\r')\n      text = '';\n    await this._client.send('Page.dispatchKeyEvent', {\n      type: 'keydown',\n      keyCode: keyCodeWithoutLocation,\n      code,\n      key,\n      repeat: autoRepeat,\n      location,\n      text,\n    });\n  }\n\n  async keyup(modifiers: Set<types.KeyboardModifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void> {\n    if (code === 'MetaLeft')\n      code = 'OSLeft';\n    if (code === 'MetaRight')\n      code = 'OSRight';\n    await this._client.send('Page.dispatchKeyEvent', {\n      type: 'keyup',\n      key,\n      keyCode: keyCodeWithoutLocation,\n      code,\n      location,\n      repeat: false\n    });\n  }\n\n  async sendText(text: string): Promise<void> {\n    await this._client.send('Page.insertText', { text });\n  }\n}\n\nexport class RawMouseImpl implements input.RawMouse {\n  private _client: FFSession;\n\n  constructor(client: FFSession) {\n    this._client = client;\n  }\n\n  async move(x: number, y: number, button: types.MouseButton | 'none', buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>): Promise<void> {\n    await this._client.send('Page.dispatchMouseEvent', {\n      type: 'mousemove',\n      button: 0,\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers)\n    });\n  }\n\n  async down(x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    await this._client.send('Page.dispatchMouseEvent', {\n      type: 'mousedown',\n      button: toButtonNumber(button),\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    });\n  }\n\n  async up(x: number, y: number, button: types.MouseButton, buttons: Set<types.MouseButton>, modifiers: Set<types.KeyboardModifier>, clickCount: number): Promise<void> {\n    await this._client.send('Page.dispatchMouseEvent', {\n      type: 'mouseup',\n      button: toButtonNumber(button),\n      buttons: toButtonsMask(buttons),\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n      clickCount\n    });\n  }\n}\n\nexport class RawTouchscreenImpl implements input.RawTouchscreen {\n  private _client: FFSession;\n\n  constructor(client: FFSession) {\n    this._client = client;\n  }\n  async tap(x: number, y: number, modifiers: Set<types.KeyboardModifier>) {\n    await this._client.send('Page.dispatchTapEvent', {\n      x,\n      y,\n      modifiers: toModifiersMask(modifiers),\n    });\n  }\n}\n"],"file":"ffInput.js"}