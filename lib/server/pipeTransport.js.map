{"version":3,"sources":["../../src/server/pipeTransport.ts"],"names":["PipeTransport","constructor","pipeWrite","pipeRead","_pipeWrite","_pendingMessage","_waitForNextTask","_closed","onmessage","onclose","on","buffer","_dispatch","call","e","debugLogger","log","undefined","send","message","Error","write","JSON","stringify","close","end","indexOf","toString","parse","start"],"mappings":"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","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectionTransport, ProtocolRequest, ProtocolResponse } from './transport';\nimport { makeWaitForNextTask } from '../utils/utils';\nimport { debugLogger } from '../utils/debugLogger';\n\nexport class PipeTransport implements ConnectionTransport {\n  private _pipeWrite: NodeJS.WritableStream;\n  private _pendingMessage = '';\n  private _waitForNextTask = makeWaitForNextTask();\n  private _closed = false;\n\n  onmessage?: (message: ProtocolResponse) => void;\n  onclose?: () => void;\n\n  constructor(pipeWrite: NodeJS.WritableStream, pipeRead: NodeJS.ReadableStream) {\n    this._pipeWrite = pipeWrite;\n    pipeRead.on('data', buffer => this._dispatch(buffer));\n    pipeRead.on('close', () => {\n      this._closed = true;\n      if (this.onclose)\n        this.onclose.call(null);\n    });\n    pipeRead.on('error', e => debugLogger.log('error', e));\n    pipeWrite.on('error', e => debugLogger.log('error', e));\n    this.onmessage = undefined;\n    this.onclose = undefined;\n  }\n\n  send(message: ProtocolRequest) {\n    if (this._closed)\n      throw new Error('Pipe has been closed');\n    this._pipeWrite.write(JSON.stringify(message));\n    this._pipeWrite.write('\\0');\n  }\n\n  close() {\n    throw new Error('unimplemented');\n  }\n\n  _dispatch(buffer: Buffer) {\n    let end = buffer.indexOf('\\0');\n    if (end === -1) {\n      this._pendingMessage += buffer.toString();\n      return;\n    }\n    const message = this._pendingMessage + buffer.toString(undefined, 0, end);\n    this._waitForNextTask(() => {\n      if (this.onmessage)\n        this.onmessage.call(null, JSON.parse(message));\n    });\n\n    let start = end + 1;\n    end = buffer.indexOf('\\0', start);\n    while (end !== -1) {\n      const message = buffer.toString(undefined, start, end);\n      this._waitForNextTask(() => {\n        if (this.onmessage)\n          this.onmessage.call(null, JSON.parse(message));\n      });\n      start = end + 1;\n      end = buffer.indexOf('\\0', start);\n    }\n    this._pendingMessage = buffer.toString(undefined, start);\n  }\n}\n"],"file":"pipeTransport.js"}