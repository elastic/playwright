{"version":3,"sources":["../../src/server/accessibility.ts"],"names":["Accessibility","constructor","getAXTree","_getAXTree","snapshot","options","interestingOnly","root","tree","needle","undefined","serializeTree","interestingNodes","Set","collectInterestingNodes","has","collection","node","insideControl","isInteresting","add","isLeafNode","isControl","child","children","whitelistedNodes","push","serializedNode","serialize","length"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaO,MAAMA,aAAN,CAAoB;AAEzBC,EAAAA,WAAW,CAACC,SAAD,EAA4F;AAAA,SAD/FC,UAC+F;AACrG,SAAKA,UAAL,GAAkBD,SAAlB;AACD;;AAEa,QAARE,QAAQ,CAACC,OAGZ,GAAG,EAHQ,EAGoC;AAChD,UAAM;AACJC,MAAAA,eAAe,GAAG,IADd;AAEJC,MAAAA,IAAI,GAAG;AAFH,QAGFF,OAHJ;AAIA,UAAM;AAACG,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAiB,MAAM,KAAKN,UAAL,CAAgBI,IAAI,IAAIG,SAAxB,CAA7B;;AACA,QAAI,CAACJ,eAAL,EAAsB;AACpB,UAAIC,IAAJ,EACE,OAAOE,MAAM,IAAIE,aAAa,CAACF,MAAD,CAAb,CAAsB,CAAtB,CAAjB;AACF,aAAOE,aAAa,CAACH,IAAD,CAAb,CAAoB,CAApB,CAAP;AACD;;AAED,UAAMI,gBAA6B,GAAG,IAAIC,GAAJ,EAAtC;AACAC,IAAAA,uBAAuB,CAACF,gBAAD,EAAmBJ,IAAnB,EAAyB,KAAzB,CAAvB;AACA,QAAID,IAAI,KAAK,CAACE,MAAD,IAAW,CAACG,gBAAgB,CAACG,GAAjB,CAAqBN,MAArB,CAAjB,CAAR,EACE,OAAO,IAAP;AACF,WAAOE,aAAa,CAACF,MAAM,IAAID,IAAX,EAAiBI,gBAAjB,CAAb,CAAgD,CAAhD,CAAP;AACD;;AA1BwB;;;;AA6B3B,SAASE,uBAAT,CAAiCE,UAAjC,EAA0DC,IAA1D,EAAwEC,aAAxE,EAAgG;AAC9F,MAAID,IAAI,CAACE,aAAL,CAAmBD,aAAnB,CAAJ,EACEF,UAAU,CAACI,GAAX,CAAeH,IAAf;AACF,MAAIA,IAAI,CAACI,UAAL,EAAJ,EACE;AACFH,EAAAA,aAAa,GAAGA,aAAa,IAAID,IAAI,CAACK,SAAL,EAAjC;;AACA,OAAK,MAAMC,KAAX,IAAoBN,IAAI,CAACO,QAAL,EAApB,EACEV,uBAAuB,CAACE,UAAD,EAAaO,KAAb,EAAoBL,aAApB,CAAvB;AACH;;AAED,SAASP,aAAT,CAAuBM,IAAvB,EAAqCQ,gBAArC,EAA+F;AAC7F,QAAMD,QAAkC,GAAG,EAA3C;;AACA,OAAK,MAAMD,KAAX,IAAoBN,IAAI,CAACO,QAAL,EAApB,EACEA,QAAQ,CAACE,IAAT,CAAc,GAAGf,aAAa,CAACY,KAAD,EAAQE,gBAAR,CAA9B;;AAEF,MAAIA,gBAAgB,IAAI,CAACA,gBAAgB,CAACV,GAAjB,CAAqBE,IAArB,CAAzB,EACE,OAAOO,QAAP;AAEF,QAAMG,cAAc,GAAGV,IAAI,CAACW,SAAL,EAAvB;AACA,MAAIJ,QAAQ,CAACK,MAAb,EACEF,cAAc,CAACH,QAAf,GAA0BA,QAA1B;AACF,SAAO,CAACG,cAAD,CAAP;AACD","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as dom from './dom';\nimport * as types from './types';\n\nexport interface AXNode {\n    isInteresting(insideControl: boolean): boolean;\n    isLeafNode(): boolean;\n    isControl(): boolean;\n    serialize(): types.SerializedAXNode;\n    children(): Iterable<AXNode>;\n}\n\nexport class Accessibility {\n  private _getAXTree:  (needle?: dom.ElementHandle) => Promise<{tree: AXNode, needle: AXNode | null}>;\n  constructor(getAXTree: (needle?: dom.ElementHandle) => Promise<{tree: AXNode, needle: AXNode | null}>) {\n    this._getAXTree = getAXTree;\n  }\n\n  async snapshot(options: {\n      interestingOnly?: boolean;\n      root?: dom.ElementHandle;\n    } = {}): Promise<types.SerializedAXNode | null> {\n    const {\n      interestingOnly = true,\n      root = null,\n    } = options;\n    const {tree, needle} = await this._getAXTree(root || undefined);\n    if (!interestingOnly) {\n      if (root)\n        return needle && serializeTree(needle)[0];\n      return serializeTree(tree)[0];\n    }\n\n    const interestingNodes: Set<AXNode> = new Set();\n    collectInterestingNodes(interestingNodes, tree, false);\n    if (root && (!needle || !interestingNodes.has(needle)))\n      return null;\n    return serializeTree(needle || tree, interestingNodes)[0];\n  }\n}\n\nfunction collectInterestingNodes(collection: Set<AXNode>, node: AXNode, insideControl: boolean) {\n  if (node.isInteresting(insideControl))\n    collection.add(node);\n  if (node.isLeafNode())\n    return;\n  insideControl = insideControl || node.isControl();\n  for (const child of node.children())\n    collectInterestingNodes(collection, child, insideControl);\n}\n\nfunction serializeTree(node: AXNode, whitelistedNodes?: Set<AXNode>): types.SerializedAXNode[] {\n  const children: types.SerializedAXNode[] = [];\n  for (const child of node.children())\n    children.push(...serializeTree(child, whitelistedNodes));\n\n  if (whitelistedNodes && !whitelistedNodes.has(node))\n    return children;\n\n  const serializedNode = node.serialize();\n  if (children.length)\n    serializedNode.children = children;\n  return [serializedNode];\n}\n"],"file":"accessibility.js"}