{"version":3,"sources":["../../src/remote/playwrightServer.ts"],"names":["debugLog","PlaywrightServer","startDefault","acceptForwardedPorts","onDisconnect","cleanup","catch","e","delegate","path","allowMultipleClients","onClose","onConnect","connection","playwright","Root","rootScope","_enablePortForwarding","PlaywrightDispatcher","_disablePortForwarding","selectors","unregisterAll","constructor","_wsServer","_clientsCount","_delegate","listen","port","server","http","createServer","request","response","end","on","error","wsEndpoint","Promise","resolve","reject","address","ws","Server","socket","close","DispatcherConnection","onmessage","message","readyState","CLOSING","send","JSON","stringify","dispatch","parse","Buffer","from","toString","forceDisconnect","disconnected","f","options","undefined"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport debug from 'debug';\nimport * as http from 'http';\nimport * as ws from 'ws';\nimport { DispatcherConnection, Root } from '../dispatchers/dispatcher';\nimport { PlaywrightDispatcher } from '../dispatchers/playwrightDispatcher';\nimport { createPlaywright, Playwright } from '../server/playwright';\nimport { gracefullyCloseAll } from '../utils/processLauncher';\n\nconst debugLog = debug('pw:server');\n\nexport interface PlaywrightServerDelegate {\n  path: string;\n  allowMultipleClients: boolean;\n  onConnect(connection: DispatcherConnection, forceDisconnect: () => void): Promise<() => any>;\n  onClose: () => any;\n}\n\nexport type PlaywrightServerOptions = {\n  acceptForwardedPorts?: boolean\n  onDisconnect?: () => void;\n};\n\nexport class PlaywrightServer {\n  private _wsServer: ws.Server | undefined;\n  private _clientsCount = 0;\n  private _delegate: PlaywrightServerDelegate;\n\n  static async startDefault({ acceptForwardedPorts, onDisconnect }: PlaywrightServerOptions = {}): Promise<PlaywrightServer> {\n    const cleanup = async () => {\n      await gracefullyCloseAll().catch(e => {});\n    };\n    const delegate: PlaywrightServerDelegate = {\n      path: '/ws',\n      allowMultipleClients: false,\n      onClose: cleanup,\n      onConnect: async (connection: DispatcherConnection) => {\n        let playwright: Playwright | undefined;\n        new Root(connection, async (rootScope): Promise<PlaywrightDispatcher> => {\n          playwright = createPlaywright();\n          if (acceptForwardedPorts)\n            await playwright._enablePortForwarding();\n          return new PlaywrightDispatcher(rootScope, playwright);\n        });\n        return () => {\n          cleanup();\n          playwright?._disablePortForwarding();\n          playwright?.selectors.unregisterAll();\n          onDisconnect?.();\n        };\n      },\n    };\n    return new PlaywrightServer(delegate);\n  }\n\n  constructor(delegate: PlaywrightServerDelegate) {\n    this._delegate = delegate;\n  }\n\n  async listen(port: number = 0): Promise<string> {\n    const server = http.createServer((request, response) => {\n      response.end('Running');\n    });\n    server.on('error', error => debugLog(error));\n\n    const path = this._delegate.path;\n    const wsEndpoint = await new Promise<string>((resolve, reject) => {\n      server.listen(port, () => {\n        const address = server.address();\n        const wsEndpoint = typeof address === 'string' ? `${address}${path}` : `ws://127.0.0.1:${address.port}${path}`;\n        resolve(wsEndpoint);\n      }).on('error', reject);\n    });\n\n    debugLog('Listening at ' + wsEndpoint);\n\n    this._wsServer = new ws.Server({ server, path });\n    this._wsServer.on('connection', async socket => {\n      if (this._clientsCount && !this._delegate.allowMultipleClients) {\n        socket.close();\n        return;\n      }\n      this._clientsCount++;\n      debugLog('Incoming connection');\n\n      const connection = new DispatcherConnection();\n      connection.onmessage = message => {\n        if (socket.readyState !== ws.CLOSING)\n          socket.send(JSON.stringify(message));\n      };\n      socket.on('message', (message: string) => {\n        connection.dispatch(JSON.parse(Buffer.from(message).toString()));\n      });\n\n      const forceDisconnect = () => socket.close();\n      let onDisconnect = () => {};\n      const disconnected = () => {\n        this._clientsCount--;\n        // Avoid sending any more messages over closed socket.\n        connection.onmessage = () => {};\n        onDisconnect();\n      };\n      socket.on('close', () => {\n        debugLog('Client closed');\n        disconnected();\n      });\n      socket.on('error', error => {\n        debugLog('Client error ' + error);\n        disconnected();\n      });\n      onDisconnect = await this._delegate.onConnect(connection, forceDisconnect);\n    });\n\n    return wsEndpoint;\n  }\n\n  async close() {\n    if (!this._wsServer)\n      return;\n    debugLog('Closing server');\n    // First disconnect all remaining clients.\n    await new Promise(f => this._wsServer!.close(f));\n    await new Promise(f => this._wsServer!.options.server!.close(f));\n    this._wsServer = undefined;\n    await this._delegate.onClose();\n  }\n}\n"],"file":"playwrightServer.js"}