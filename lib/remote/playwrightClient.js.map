{"version":3,"sources":["../../src/remote/playwrightClient.ts"],"names":["PlaywrightClient","connect","options","wsEndpoint","forwardPorts","timeout","connection","Connection","ws","WebSocket","onmessage","message","send","JSON","stringify","on","dispatch","parse","toString","errorPromise","Promise","_","reject","error","closePromise","Error","playwrightClientPromise","resolve","playwright","initializePlaywright","_enablePortForwarding","catch","timer","race","setTimeout","clearTimeout","constructor","_playwright","_ws","_closePromise","f","close"],"mappings":";;;;;;;AAgBA;;AACA;;;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYO,MAAMA,gBAAN,CAAuB;AAKR,eAAPC,OAAO,CAACC,OAAD,EAAqE;AACvF,UAAM;AAACC,MAAAA,UAAD;AAAaC,MAAAA,YAAb;AAA2BC,MAAAA,OAAO,GAAG;AAArC,QAA8CH,OAApD;AACA,UAAMI,UAAU,GAAG,IAAIC,sBAAJ,EAAnB;AACA,UAAMC,EAAE,GAAG,IAAIC,WAAJ,CAAcN,UAAd,CAAX;;AACAG,IAAAA,UAAU,CAACI,SAAX,GAAuBC,OAAO,IAAIH,EAAE,CAACI,IAAH,CAAQC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAR,CAAlC;;AACAH,IAAAA,EAAE,CAACO,EAAH,CAAM,SAAN,EAAiBJ,OAAO,IAAIL,UAAU,CAACU,QAAX,CAAoBH,IAAI,CAACI,KAAL,CAAWN,OAAO,CAACO,QAAR,EAAX,CAApB,CAA5B;AACA,UAAMC,YAAY,GAAG,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,MAAJ,KAAed,EAAE,CAACO,EAAH,CAAM,OAAN,EAAeQ,KAAK,IAAID,MAAM,CAACC,KAAD,CAA9B,CAA3B,CAArB;AACA,UAAMC,YAAY,GAAG,IAAIJ,OAAJ,CAAY,CAACC,CAAD,EAAIC,MAAJ,KAAed,EAAE,CAACO,EAAH,CAAM,OAAN,EAAe,MAAMO,MAAM,CAAC,IAAIG,KAAJ,CAAU,mBAAV,CAAD,CAA3B,CAA3B,CAArB;AACA,UAAMC,uBAAuB,GAAG,IAAIN,OAAJ,CAA8B,CAACO,OAAD,EAAUL,MAAV,KAAqB;AACjFd,MAAAA,EAAE,CAACO,EAAH,CAAM,MAAN,EAAc,YAAY;AACxB,cAAMa,UAAU,GAAG,MAAMtB,UAAU,CAACuB,oBAAX,EAAzB;AACA,YAAIzB,YAAJ,EACE,MAAMwB,UAAU,CAACE,qBAAX,CAAiC1B,YAAjC,EAA+C2B,KAA/C,CAAqDT,MAArD,CAAN;AACFK,QAAAA,OAAO,CAAC,IAAI3B,gBAAJ,CAAqB4B,UAArB,EAAiCpB,EAAjC,CAAD,CAAP;AACD,OALD;AAMD,KAP+B,CAAhC;AAQA,QAAIwB,KAAJ;;AACA,QAAI;AACF,YAAMZ,OAAO,CAACa,IAAR,CAAa,CACjBP,uBADiB,EAEjBP,YAFiB,EAGjBK,YAHiB,EAIjB,IAAIJ,OAAJ,CAAY,CAACC,CAAD,EAAIC,MAAJ,KAAeU,KAAK,GAAGE,UAAU,CAAC,MAAMZ,MAAM,CAAE,cAAajB,OAAQ,+BAAvB,CAAb,EAAqEA,OAArE,CAA7C,CAJiB,CAAb,CAAN;AAMA,aAAO,MAAMqB,uBAAb;AACD,KARD,SAQU;AACRS,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACD;AACF;;AAEDI,EAAAA,WAAW,CAACR,UAAD,EAAyBpB,EAAzB,EAAwC;AAAA,SAlC3C6B,WAkC2C;AAAA,SAjC3CC,GAiC2C;AAAA,SAhC3CC,aAgC2C;AACjD,SAAKF,WAAL,GAAmBT,UAAnB;AACA,SAAKU,GAAL,GAAW9B,EAAX;AACA,SAAK+B,aAAL,GAAqB,IAAInB,OAAJ,CAAYoB,CAAC,IAAIhC,EAAE,CAACO,EAAH,CAAM,OAAN,EAAeyB,CAAf,CAAjB,CAArB;AACD;;AAEDZ,EAAAA,UAAU,GAAe;AACvB,WAAO,KAAKS,WAAZ;AACD;;AAEU,QAALI,KAAK,GAAG;AACZ,SAAKH,GAAL,CAASG,KAAT;;AACA,UAAM,KAAKF,aAAX;AACD;;AAhD2B","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebSocket from 'ws';\nimport { Connection } from '../client/connection';\nimport { Playwright } from '../client/playwright';\n\nexport type PlaywrightClientConnectOptions = {\n  wsEndpoint: string;\n  forwardPorts?: number[];\n  timeout?: number\n};\n\nexport class PlaywrightClient {\n  private _playwright: Playwright;\n  private _ws: WebSocket;\n  private _closePromise: Promise<void>;\n\n  static async connect(options: PlaywrightClientConnectOptions): Promise<PlaywrightClient> {\n    const {wsEndpoint, forwardPorts, timeout = 30000} = options;\n    const connection = new Connection();\n    const ws = new WebSocket(wsEndpoint);\n    connection.onmessage = message => ws.send(JSON.stringify(message));\n    ws.on('message', message => connection.dispatch(JSON.parse(message.toString())));\n    const errorPromise = new Promise((_, reject) => ws.on('error', error => reject(error)));\n    const closePromise = new Promise((_, reject) => ws.on('close', () => reject(new Error('Connection closed'))));\n    const playwrightClientPromise = new Promise<PlaywrightClient>((resolve, reject) => {\n      ws.on('open', async () => {\n        const playwright = await connection.initializePlaywright();\n        if (forwardPorts)\n          await playwright._enablePortForwarding(forwardPorts).catch(reject);\n        resolve(new PlaywrightClient(playwright, ws));\n      });\n    });\n    let timer: NodeJS.Timeout;\n    try {\n      await Promise.race([\n        playwrightClientPromise,\n        errorPromise,\n        closePromise,\n        new Promise((_, reject) => timer = setTimeout(() => reject(`Timeout of ${timeout}ms exceeded while connecting.`), timeout))\n      ]);\n      return await playwrightClientPromise;\n    } finally {\n      clearTimeout(timer!);\n    }\n  }\n\n  constructor(playwright: Playwright, ws: WebSocket) {\n    this._playwright = playwright;\n    this._ws = ws;\n    this._closePromise = new Promise(f => ws.on('close', f));\n  }\n\n  playwright(): Playwright {\n    return this._playwright;\n  }\n\n  async close() {\n    this._ws.close();\n    await this._closePromise;\n  }\n}\n"],"file":"playwrightClient.js"}