{"version":3,"sources":["../../src/dispatchers/browserTypeDispatcher.ts"],"names":["BrowserTypeDispatcher","Dispatcher","constructor","scope","browserType","executablePath","name","launch","params","metadata","browser","_object","BrowserDispatcher","_scope","launchPersistentContext","browserContext","userDataDir","context","BrowserContextDispatcher","connectOverCDP","endpointURL","timeout","browserDispatcher","defaultContext","_defaultContext","undefined"],"mappings":";;;;;;;AAiBA;;AAEA;;AACA;;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASO,MAAMA,qBAAN,SAAoCC,sBAApC,CAAoI;AACzIC,EAAAA,WAAW,CAACC,KAAD,EAAyBC,WAAzB,EAAmD;AAC5D,UAAMD,KAAN,EAAaC,WAAb,EAA0B,aAA1B,EAAyC;AACvCC,MAAAA,cAAc,EAAED,WAAW,CAACC,cAAZ,EADuB;AAEvCC,MAAAA,IAAI,EAAEF,WAAW,CAACE,IAAZ;AAFiC,KAAzC,EAGG,IAHH;AAID;;AAEW,QAANC,MAAM,CAACC,MAAD,EAA2CC,QAA3C,EAA8G;AACxH,UAAMC,OAAO,GAAG,MAAM,KAAKC,OAAL,CAAaJ,MAAb,CAAoBE,QAApB,EAA8BD,MAA9B,CAAtB;AACA,WAAO;AAAEE,MAAAA,OAAO,EAAE,IAAIE,oCAAJ,CAAsB,KAAKC,MAA3B,EAAmCH,OAAnC;AAAX,KAAP;AACD;;AAE4B,QAAvBI,uBAAuB,CAACN,MAAD,EAA4DC,QAA5D,EAAgJ;AAC3K,UAAMM,cAAc,GAAG,MAAM,KAAKJ,OAAL,CAAaG,uBAAb,CAAqCL,QAArC,EAA+CD,MAAM,CAACQ,WAAtD,EAAmER,MAAnE,CAA7B;AACA,WAAO;AAAES,MAAAA,OAAO,EAAE,IAAIC,kDAAJ,CAA6B,KAAKL,MAAlC,EAA0CE,cAA1C;AAAX,KAAP;AACD;;AAEmB,QAAdI,cAAc,CAACX,MAAD,EAAmDC,QAAnD,EAA8H;AAChJ,UAAMC,OAAO,GAAG,MAAM,KAAKC,OAAL,CAAaQ,cAAb,CAA4BV,QAA5B,EAAsCD,MAAM,CAACY,WAA7C,EAA0DZ,MAA1D,EAAkEA,MAAM,CAACa,OAAzE,CAAtB;AACA,UAAMC,iBAAiB,GAAG,IAAIV,oCAAJ,CAAsB,KAAKC,MAA3B,EAAmCH,OAAnC,CAA1B;AACA,WAAO;AACLA,MAAAA,OAAO,EAAEY,iBADJ;AAELC,MAAAA,cAAc,EAAEb,OAAO,CAACc,eAAR,GAA0B,IAAIN,kDAAJ,CAA6BI,iBAAiB,CAACT,MAA/C,EAAuDH,OAAO,CAACc,eAA/D,CAA1B,GAA4GC;AAFvH,KAAP;AAID;;AAzBwI","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserType } from '../server/browserType';\nimport { BrowserDispatcher } from './browserDispatcher';\nimport * as channels from '../protocol/channels';\nimport { Dispatcher, DispatcherScope } from './dispatcher';\nimport { BrowserContextDispatcher } from './browserContextDispatcher';\nimport { CallMetadata } from '../server/instrumentation';\n\nexport class BrowserTypeDispatcher extends Dispatcher<BrowserType, channels.BrowserTypeInitializer> implements channels.BrowserTypeChannel {\n  constructor(scope: DispatcherScope, browserType: BrowserType) {\n    super(scope, browserType, 'BrowserType', {\n      executablePath: browserType.executablePath(),\n      name: browserType.name()\n    }, true);\n  }\n\n  async launch(params: channels.BrowserTypeLaunchParams, metadata: CallMetadata): Promise<channels.BrowserTypeLaunchResult> {\n    const browser = await this._object.launch(metadata, params);\n    return { browser: new BrowserDispatcher(this._scope, browser) };\n  }\n\n  async launchPersistentContext(params: channels.BrowserTypeLaunchPersistentContextParams, metadata: CallMetadata): Promise<channels.BrowserTypeLaunchPersistentContextResult> {\n    const browserContext = await this._object.launchPersistentContext(metadata, params.userDataDir, params);\n    return { context: new BrowserContextDispatcher(this._scope, browserContext) };\n  }\n\n  async connectOverCDP(params: channels.BrowserTypeConnectOverCDPParams, metadata: CallMetadata): Promise<channels.BrowserTypeConnectOverCDPResult> {\n    const browser = await this._object.connectOverCDP(metadata, params.endpointURL, params, params.timeout);\n    const browserDispatcher = new BrowserDispatcher(this._scope, browser);\n    return {\n      browser: browserDispatcher,\n      defaultContext: browser._defaultContext ? new BrowserContextDispatcher(browserDispatcher._scope, browser._defaultContext) : undefined,\n    };\n  }\n}\n"],"file":"browserTypeDispatcher.js"}