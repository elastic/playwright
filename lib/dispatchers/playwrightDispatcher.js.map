{"version":3,"sources":["../../src/dispatchers/playwrightDispatcher.ts"],"names":["PlaywrightDispatcher","Dispatcher","constructor","scope","playwright","customSelectors","preLaunchedBrowser","descriptors","require","deviceDescriptors","Object","entries","map","name","descriptor","chromium","BrowserTypeDispatcher","firefox","webkit","android","AndroidDispatcher","electron","ElectronDispatcher","selectors","SelectorsDispatcher","_object","on","socket","_dispatchEvent","SocksSocketDispatcher","setForwardedPorts","params","_setForwardedPorts","ports"],"mappings":";;;;;;;AAkBA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaO,MAAMA,oBAAN,SAAmCC,sBAAnC,CAAgI;AACrIC,EAAAA,WAAW,CAACC,KAAD,EAAyBC,UAAzB,EAAiDC,eAAjD,EAA8FC,kBAA9F,EAA4I;AACrJ,UAAMC,WAAW,GAAGC,OAAO,CAAC,6BAAD,CAA3B;;AACA,UAAMC,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeJ,WAAf,EACrBK,GADqB,CACjB,CAAC,CAACC,IAAD,EAAOC,UAAP,CAAD,MAAyB;AAAED,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAzB,CADiB,CAA1B;AAEA,UAAMX,KAAN,EAAaC,UAAb,EAAyB,YAAzB,EAAuC;AACrCW,MAAAA,QAAQ,EAAE,IAAIC,4CAAJ,CAA0Bb,KAA1B,EAAiCC,UAAU,CAACW,QAA5C,CAD2B;AAErCE,MAAAA,OAAO,EAAE,IAAID,4CAAJ,CAA0Bb,KAA1B,EAAiCC,UAAU,CAACa,OAA5C,CAF4B;AAGrCC,MAAAA,MAAM,EAAE,IAAIF,4CAAJ,CAA0Bb,KAA1B,EAAiCC,UAAU,CAACc,MAA5C,CAH6B;AAIrCC,MAAAA,OAAO,EAAE,IAAIC,oCAAJ,CAAsBjB,KAAtB,EAA6BC,UAAU,CAACe,OAAxC,CAJ4B;AAKrCE,MAAAA,QAAQ,EAAE,IAAIC,sCAAJ,CAAuBnB,KAAvB,EAA8BC,UAAU,CAACiB,QAAzC,CAL2B;AAMrCZ,MAAAA,iBANqC;AAOrCc,MAAAA,SAAS,EAAElB,eAAe,IAAI,IAAImB,wCAAJ,CAAwBrB,KAAxB,EAA+BC,UAAU,CAACmB,SAA1C,CAPO;AAQrCjB,MAAAA;AARqC,KAAvC,EASG,KATH;;AAUA,SAAKmB,OAAL,CAAaC,EAAb,CAAgB,qBAAhB,EAAwCC,MAAD,IAA2C;AAChF,WAAKC,cAAL,CAAoB,qBAApB,EAA2C;AAAED,QAAAA,MAAM,EAAE,IAAIE,4CAAJ,CAA0B,IAA1B,EAAgCF,MAAhC;AAAV,OAA3C;AACD,KAFD;AAGD;;AAEsB,QAAjBG,iBAAiB,CAACC,MAAD,EAAoE;AACzF,SAAKN,OAAL,CAAaO,kBAAb,CAAgCD,MAAM,CAACE,KAAvC;AACD;;AAtBoI","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport { Playwright } from '../server/playwright';\nimport { AndroidDispatcher } from './androidDispatcher';\nimport { BrowserTypeDispatcher } from './browserTypeDispatcher';\nimport { Dispatcher, DispatcherScope } from './dispatcher';\nimport { ElectronDispatcher } from './electronDispatcher';\nimport { SelectorsDispatcher } from './selectorsDispatcher';\nimport * as types from '../server/types';\nimport { SocksSocketDispatcher } from './socksSocketDispatcher';\nimport { SocksInterceptedSocketHandler } from '../server/socksServer';\n\nexport class PlaywrightDispatcher extends Dispatcher<Playwright, channels.PlaywrightInitializer> implements channels.PlaywrightChannel {\n  constructor(scope: DispatcherScope, playwright: Playwright, customSelectors?: channels.SelectorsChannel, preLaunchedBrowser?: channels.BrowserChannel) {\n    const descriptors = require('../server/deviceDescriptors') as types.Devices;\n    const deviceDescriptors = Object.entries(descriptors)\n        .map(([name, descriptor]) => ({ name, descriptor }));\n    super(scope, playwright, 'Playwright', {\n      chromium: new BrowserTypeDispatcher(scope, playwright.chromium),\n      firefox: new BrowserTypeDispatcher(scope, playwright.firefox),\n      webkit: new BrowserTypeDispatcher(scope, playwright.webkit),\n      android: new AndroidDispatcher(scope, playwright.android),\n      electron: new ElectronDispatcher(scope, playwright.electron),\n      deviceDescriptors,\n      selectors: customSelectors || new SelectorsDispatcher(scope, playwright.selectors),\n      preLaunchedBrowser,\n    }, false);\n    this._object.on('incomingSocksSocket', (socket: SocksInterceptedSocketHandler) => {\n      this._dispatchEvent('incomingSocksSocket', { socket: new SocksSocketDispatcher(this, socket) });\n    });\n  }\n\n  async setForwardedPorts(params: channels.PlaywrightSetForwardedPortsParams): Promise<void> {\n    this._object._setForwardedPorts(params.ports);\n  }\n}\n"],"file":"playwrightDispatcher.js"}