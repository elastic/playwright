{"version":3,"sources":["../../src/dispatchers/browserDispatcher.ts"],"names":["BrowserDispatcher","Dispatcher","constructor","scope","browser","version","name","options","on","Browser","Events","Disconnected","_didClose","_dispatchEvent","_dispose","newContext","params","metadata","context","_object","storageState","setStorageState","BrowserContextDispatcher","_scope","close","killForTests","newBrowserCDPSession","isChromium","Error","crBrowser","session","CDPSessionDispatcher","startTracing","page","undefined","stopTracing","buffer","binary","toString"],"mappings":";;;;;;;AAgBA;;AAEA;;AACA;;AACA;;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWO,MAAMA,iBAAN,SAAgCC,sBAAhC,CAAoH;AACzHC,EAAAA,WAAW,CAACC,KAAD,EAAyBC,OAAzB,EAA2C;AACpD,UAAMD,KAAN,EAAaC,OAAb,EAAsB,SAAtB,EAAiC;AAAEC,MAAAA,OAAO,EAAED,OAAO,CAACC,OAAR,EAAX;AAA8BC,MAAAA,IAAI,EAAEF,OAAO,CAACG,OAAR,CAAgBD;AAApD,KAAjC,EAA6F,IAA7F;AACAF,IAAAA,OAAO,CAACI,EAAR,CAAWC,iBAAQC,MAAR,CAAeC,YAA1B,EAAwC,MAAM,KAAKC,SAAL,EAA9C;AACD;;AAEDA,EAAAA,SAAS,GAAG;AACV,SAAKC,cAAL,CAAoB,OAApB;;AACA,SAAKC,QAAL;AACD;;AAEe,QAAVC,UAAU,CAACC,MAAD,EAA2CC,QAA3C,EAA8G;AAC5H,UAAMC,OAAO,GAAG,MAAM,KAAKC,OAAL,CAAaJ,UAAb,CAAwBC,MAAxB,CAAtB;AACA,QAAIA,MAAM,CAACI,YAAX,EACE,MAAMF,OAAO,CAACG,eAAR,CAAwBJ,QAAxB,EAAkCD,MAAM,CAACI,YAAzC,CAAN;AACF,WAAO;AAAEF,MAAAA,OAAO,EAAE,IAAII,kDAAJ,CAA6B,KAAKC,MAAlC,EAA0CL,OAA1C;AAAX,KAAP;AACD;;AAEU,QAALM,KAAK,GAAkB;AAC3B,UAAM,KAAKL,OAAL,CAAaK,KAAb,EAAN;AACD;;AAEiB,QAAZC,YAAY,GAAkB;AAClC,UAAM,KAAKN,OAAL,CAAaM,YAAb,EAAN;AACD;;AAEyB,QAApBC,oBAAoB,GAAwD;AAChF,QAAI,CAAC,KAAKP,OAAL,CAAaZ,OAAb,CAAqBoB,UAA1B,EACE,MAAM,IAAIC,KAAJ,CAAW,2CAAX,CAAN;AACF,UAAMC,SAAS,GAAG,KAAKV,OAAvB;AACA,WAAO;AAAEW,MAAAA,OAAO,EAAE,IAAIC,0CAAJ,CAAyB,KAAKR,MAA9B,EAAsC,MAAMM,SAAS,CAACH,oBAAV,EAA5C;AAAX,KAAP;AACD;;AAEiB,QAAZM,YAAY,CAAChB,MAAD,EAA4D;AAC5E,QAAI,CAAC,KAAKG,OAAL,CAAaZ,OAAb,CAAqBoB,UAA1B,EACE,MAAM,IAAIC,KAAJ,CAAW,uCAAX,CAAN;AACF,UAAMC,SAAS,GAAG,KAAKV,OAAvB;AACA,UAAMU,SAAS,CAACG,YAAV,CAAuBhB,MAAM,CAACiB,IAAP,GAAejB,MAAM,CAACiB,IAAR,CAAgCd,OAA9C,GAAwDe,SAA/E,EAA0FlB,MAA1F,CAAN;AACD;;AAEgB,QAAXmB,WAAW,GAA+C;AAC9D,QAAI,CAAC,KAAKhB,OAAL,CAAaZ,OAAb,CAAqBoB,UAA1B,EACE,MAAM,IAAIC,KAAJ,CAAW,uCAAX,CAAN;AACF,UAAMC,SAAS,GAAG,KAAKV,OAAvB;AACA,UAAMiB,MAAM,GAAG,MAAMP,SAAS,CAACM,WAAV,EAArB;AACA,WAAO;AAAEE,MAAAA,MAAM,EAAED,MAAM,CAACE,QAAP,CAAgB,QAAhB;AAAV,KAAP;AACD;;AA9CwH","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Browser } from '../server/browser';\nimport * as channels from '../protocol/channels';\nimport { BrowserContextDispatcher } from './browserContextDispatcher';\nimport { CDPSessionDispatcher } from './cdpSessionDispatcher';\nimport { Dispatcher, DispatcherScope } from './dispatcher';\nimport { CRBrowser } from '../server/chromium/crBrowser';\nimport { PageDispatcher } from './pageDispatcher';\nimport { CallMetadata } from '../server/instrumentation';\n\nexport class BrowserDispatcher extends Dispatcher<Browser, channels.BrowserInitializer> implements channels.BrowserChannel {\n  constructor(scope: DispatcherScope, browser: Browser) {\n    super(scope, browser, 'Browser', { version: browser.version(), name: browser.options.name }, true);\n    browser.on(Browser.Events.Disconnected, () => this._didClose());\n  }\n\n  _didClose() {\n    this._dispatchEvent('close');\n    this._dispose();\n  }\n\n  async newContext(params: channels.BrowserNewContextParams, metadata: CallMetadata): Promise<channels.BrowserNewContextResult> {\n    const context = await this._object.newContext(params);\n    if (params.storageState)\n      await context.setStorageState(metadata, params.storageState);\n    return { context: new BrowserContextDispatcher(this._scope, context) };\n  }\n\n  async close(): Promise<void> {\n    await this._object.close();\n  }\n\n  async killForTests(): Promise<void> {\n    await this._object.killForTests();\n  }\n\n  async newBrowserCDPSession(): Promise<channels.BrowserNewBrowserCDPSessionResult> {\n    if (!this._object.options.isChromium)\n      throw new Error(`CDP session is only available in Chromium`);\n    const crBrowser = this._object as CRBrowser;\n    return { session: new CDPSessionDispatcher(this._scope, await crBrowser.newBrowserCDPSession()) };\n  }\n\n  async startTracing(params: channels.BrowserStartTracingParams): Promise<void> {\n    if (!this._object.options.isChromium)\n      throw new Error(`Tracing is only available in Chromium`);\n    const crBrowser = this._object as CRBrowser;\n    await crBrowser.startTracing(params.page ? (params.page as PageDispatcher)._object : undefined, params);\n  }\n\n  async stopTracing(): Promise<channels.BrowserStopTracingResult> {\n    if (!this._object.options.isChromium)\n      throw new Error(`Tracing is only available in Chromium`);\n    const crBrowser = this._object as CRBrowser;\n    const buffer = await crBrowser.stopTracing();\n    return { binary: buffer.toString('base64') };\n  }\n}\n"],"file":"browserDispatcher.js"}