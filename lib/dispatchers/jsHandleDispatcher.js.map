{"version":3,"sources":["../../src/dispatchers/jsHandleDispatcher.ts"],"names":["JSHandleDispatcher","Dispatcher","constructor","scope","jsHandle","asElement","preview","toString","_setPreviewCallback","_dispatchEvent","evaluateExpression","params","value","serializeResult","_object","evaluateExpressionAndWaitForSignals","expression","isFunction","parseArgument","arg","evaluateExpressionHandle","handle","ElementHandleDispatcher","fromJSHandle","_scope","getProperty","name","getPropertyList","map","getProperties","properties","push","jsonValue","dispose","handles","a","parseValue","v","fallThrough","Set"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as js from '../server/javascript';\nimport * as channels from '../protocol/channels';\nimport { Dispatcher, DispatcherScope } from './dispatcher';\nimport { ElementHandleDispatcher } from './elementHandlerDispatcher';\nimport { parseSerializedValue, serializeValue } from '../protocol/serializers';\n\nexport class JSHandleDispatcher extends Dispatcher<js.JSHandle, channels.JSHandleInitializer> implements channels.JSHandleChannel {\n\n  protected constructor(scope: DispatcherScope, jsHandle: js.JSHandle) {\n    // Do not call this directly, use createHandle() instead.\n    super(scope, jsHandle, jsHandle.asElement() ? 'ElementHandle' : 'JSHandle', {\n      preview: jsHandle.toString(),\n    });\n    jsHandle._setPreviewCallback(preview => this._dispatchEvent('previewUpdated', { preview }));\n  }\n\n  async evaluateExpression(params: channels.JSHandleEvaluateExpressionParams): Promise<channels.JSHandleEvaluateExpressionResult> {\n    return { value: serializeResult(await this._object.evaluateExpressionAndWaitForSignals(params.expression, params.isFunction, true /* returnByValue */, parseArgument(params.arg))) };\n  }\n\n  async evaluateExpressionHandle(params: channels.JSHandleEvaluateExpressionHandleParams): Promise<channels.JSHandleEvaluateExpressionHandleResult> {\n    const jsHandle = await this._object.evaluateExpressionAndWaitForSignals(params.expression, params.isFunction, false /* returnByValue */, parseArgument(params.arg));\n    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, jsHandle) };\n  }\n\n  async getProperty(params: channels.JSHandleGetPropertyParams): Promise<channels.JSHandleGetPropertyResult> {\n    const jsHandle = await this._object.getProperty(params.name);\n    return { handle: ElementHandleDispatcher.fromJSHandle(this._scope, jsHandle) };\n  }\n\n  async getPropertyList(): Promise<channels.JSHandleGetPropertyListResult> {\n    const map = await this._object.getProperties();\n    const properties = [];\n    for (const [name, value] of map)\n      properties.push({ name, value: ElementHandleDispatcher.fromJSHandle(this._scope, value) });\n    return { properties };\n  }\n\n  async jsonValue(): Promise<channels.JSHandleJsonValueResult> {\n    return { value: serializeResult(await this._object.jsonValue()) };\n  }\n\n  async dispose() {\n    await this._object.dispose();\n  }\n}\n\n// Generic channel parser converts guids to JSHandleDispatchers,\n// and this function takes care of coverting them into underlying JSHandles.\nexport function parseArgument(arg: channels.SerializedArgument): any {\n  return parseSerializedValue(arg.value, arg.handles.map(a => (a as JSHandleDispatcher)._object));\n}\n\nexport function parseValue(v: channels.SerializedValue): any {\n  return parseSerializedValue(v, []);\n}\n\nexport function serializeResult(arg: any): channels.SerializedValue {\n  return serializeValue(arg, value => ({ fallThrough: value }), new Set());\n}\n"],"file":"jsHandleDispatcher.js"}