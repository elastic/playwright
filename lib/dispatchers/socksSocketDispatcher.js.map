{"version":3,"sources":["../../src/dispatchers/socksSocketDispatcher.ts"],"names":["SocksSocketDispatcher","Dispatcher","constructor","scope","socket","dstAddr","dstPort","on","data","_dispatchEvent","toString","_dispose","connected","_object","error","params","write","Buffer","from","end"],"mappings":";;;;;;;AAgBA;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMO,MAAMA,qBAAN,SAAoCC,sBAApC,CAAsJ;AAC3JC,EAAAA,WAAW,CAACC,KAAD,EAAyBC,MAAzB,EAAgE;AACzE,UAAMD,KAAN,EAAaC,MAAb,EAAqB,aAArB,EAAoC;AAClCC,MAAAA,OAAO,EAAED,MAAM,CAACC,OADkB;AAElCC,MAAAA,OAAO,EAAEF,MAAM,CAACE;AAFkB,KAApC,EAGG,IAHH;AAIAF,IAAAA,MAAM,CAACG,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAkB,KAAKC,cAAL,CAAoB,MAApB,EAA4B;AAAED,MAAAA,IAAI,EAAEA,IAAI,CAACE,QAAL,CAAc,QAAd;AAAR,KAA5B,CAApC;AACAN,IAAAA,MAAM,CAACG,EAAP,CAAU,OAAV,EAAmB,MAAM;AACvB,WAAKE,cAAL,CAAoB,OAApB;;AACA,WAAKE,QAAL;AACD,KAHD;AAID;;AACc,QAATC,SAAS,GAAkB;AAC/B,SAAKC,OAAL,CAAaD,SAAb;AACD;;AACU,QAALE,KAAK,CAACC,MAAD,EAAyD;AAClE,SAAKF,OAAL,CAAaC,KAAb,CAAmBC,MAAM,CAACD,KAA1B;AACD;;AAEU,QAALE,KAAK,CAACD,MAAD,EAAyD;AAClE,SAAKF,OAAL,CAAaG,KAAb,CAAmBC,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACP,IAAnB,EAAyB,QAAzB,CAAnB;AACD;;AAEQ,QAAHW,GAAG,GAAkB;AACzB,SAAKN,OAAL,CAAaM,GAAb;AACD;;AAzB0J","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Dispatcher, DispatcherScope } from './dispatcher';\nimport * as channels from '../protocol/channels';\nimport { SocksInterceptedSocketHandler } from '../server/socksServer';\n\nexport class SocksSocketDispatcher extends Dispatcher<SocksInterceptedSocketHandler, channels.SocksSocketInitializer> implements channels.SocksSocketChannel {\n  constructor(scope: DispatcherScope, socket: SocksInterceptedSocketHandler) {\n    super(scope, socket, 'SocksSocket', {\n      dstAddr: socket.dstAddr,\n      dstPort: socket.dstPort\n    }, true);\n    socket.on('data', (data: Buffer) => this._dispatchEvent('data', { data: data.toString('base64') }));\n    socket.on('close', () => {\n      this._dispatchEvent('close');\n      this._dispose();\n    });\n  }\n  async connected(): Promise<void> {\n    this._object.connected();\n  }\n  async error(params: channels.SocksSocketErrorParams): Promise<void> {\n    this._object.error(params.error);\n  }\n\n  async write(params: channels.SocksSocketWriteParams): Promise<void> {\n    this._object.write(Buffer.from(params.data, 'base64'));\n  }\n\n  async end(): Promise<void> {\n    this._object.end();\n  }\n}\n"],"file":"socksSocketDispatcher.js"}