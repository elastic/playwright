{"version":3,"sources":["../../src/dispatchers/artifactDispatcher.ts"],"names":["ArtifactDispatcher","Dispatcher","constructor","scope","artifact","absolutePath","localPath","pathAfterFinished","path","_object","localPathAfterFinished","value","undefined","saveAs","params","Promise","resolve","reject","error","Error","fs","promises","copyFile","e","saveAsStream","readable","createReadStream","stream","StreamDispatcher","_scope","on","fileName","failure","failureError","cancel","delete","_dispose"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport { Dispatcher, DispatcherScope } from './dispatcher';\nimport { StreamDispatcher } from './streamDispatcher';\nimport fs from 'fs';\nimport { mkdirIfNeeded } from '../utils/utils';\nimport { Artifact } from '../server/artifact';\n\nexport class ArtifactDispatcher extends Dispatcher<Artifact, channels.ArtifactInitializer> implements channels.ArtifactChannel {\n  constructor(scope: DispatcherScope, artifact: Artifact) {\n    super(scope, artifact, 'Artifact', {\n      absolutePath: artifact.localPath(),\n    });\n  }\n\n  async pathAfterFinished(): Promise<channels.ArtifactPathAfterFinishedResult> {\n    const path = await this._object.localPathAfterFinished();\n    return { value: path || undefined };\n  }\n\n  async saveAs(params: channels.ArtifactSaveAsParams): Promise<channels.ArtifactSaveAsResult> {\n    return await new Promise((resolve, reject) => {\n      this._object.saveAs(async (localPath, error) => {\n        if (error !== undefined) {\n          reject(new Error(error));\n          return;\n        }\n        try {\n          await mkdirIfNeeded(params.path);\n          await fs.promises.copyFile(localPath, params.path);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  async saveAsStream(): Promise<channels.ArtifactSaveAsStreamResult> {\n    return await new Promise((resolve, reject) => {\n      this._object.saveAs(async (localPath, error) => {\n        if (error !== undefined) {\n          reject(new Error(error));\n          return;\n        }\n        try {\n          const readable = fs.createReadStream(localPath);\n          const stream = new StreamDispatcher(this._scope, readable);\n          // Resolve with a stream, so that client starts saving the data.\n          resolve({ stream });\n          // Block the Artifact until the stream is consumed.\n          await new Promise<void>(resolve => {\n            readable.on('close', resolve);\n            readable.on('end', resolve);\n            readable.on('error', resolve);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n\n  async stream(): Promise<channels.ArtifactStreamResult> {\n    const fileName = await this._object.localPathAfterFinished();\n    if (!fileName)\n      return {};\n    const readable = fs.createReadStream(fileName);\n    return { stream: new StreamDispatcher(this._scope, readable) };\n  }\n\n  async failure(): Promise<channels.ArtifactFailureResult> {\n    const error = await this._object.failureError();\n    return { error: error || undefined };\n  }\n\n  async cancel(): Promise<void> {\n    await this._object.cancel();\n  }\n\n  async delete(): Promise<void> {\n    await this._object.delete();\n    this._dispose();\n  }\n}\n"],"file":"artifactDispatcher.js"}