{"version":3,"sources":["../../src/dispatchers/cdpSessionDispatcher.ts"],"names":["CDPSessionDispatcher","Dispatcher","constructor","scope","crSession","_eventListener","method","params","_dispatchEvent","on","CRSessionEvents","Disconnected","_dispose","send","result","_object","detach"],"mappings":";;;;;;;AAgBA;;AAEA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMO,MAAMA,oBAAN,SAAmCC,sBAAnC,CAA+H;AACpIC,EAAAA,WAAW,CAACC,KAAD,EAAyBC,SAAzB,EAA+C;AACxD,UAAMD,KAAN,EAAaC,SAAb,EAAwB,YAAxB,EAAsC,EAAtC,EAA0C,IAA1C;;AACAA,IAAAA,SAAS,CAACC,cAAV,GAA2B,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC7C,WAAKC,cAAL,CAAoB,OAApB,EAA6B;AAAEF,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAA7B;AACD,KAFD;;AAGAH,IAAAA,SAAS,CAACK,EAAV,CAAaC,8BAAgBC,YAA7B,EAA2C,MAAM,KAAKC,QAAL,EAAjD;AACD;;AAES,QAAJC,IAAI,CAACN,MAAD,EAAgF;AACxF,WAAO;AAAEO,MAAAA,MAAM,EAAE,MAAM,KAAKC,OAAL,CAAaF,IAAb,CAAkBN,MAAM,CAACD,MAAzB,EAAwCC,MAAM,CAACA,MAA/C;AAAhB,KAAP;AACD;;AAEW,QAANS,MAAM,GAAkB;AAC5B,WAAO,KAAKD,OAAL,CAAaC,MAAb,EAAP;AACD;;AAfmI","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CRSession, CRSessionEvents } from '../server/chromium/crConnection';\nimport * as channels from '../protocol/channels';\nimport { Dispatcher, DispatcherScope } from './dispatcher';\n\nexport class CDPSessionDispatcher extends Dispatcher<CRSession, channels.CDPSessionInitializer> implements channels.CDPSessionChannel {\n  constructor(scope: DispatcherScope, crSession: CRSession) {\n    super(scope, crSession, 'CDPSession', {}, true);\n    crSession._eventListener = (method, params) => {\n      this._dispatchEvent('event', { method, params });\n    };\n    crSession.on(CRSessionEvents.Disconnected, () => this._dispose());\n  }\n\n  async send(params: channels.CDPSessionSendParams): Promise<channels.CDPSessionSendResult> {\n    return { result: await this._object.send(params.method as any, params.params) };\n  }\n\n  async detach(): Promise<void> {\n    return this._object.detach();\n  }\n}\n"],"file":"cdpSessionDispatcher.js"}