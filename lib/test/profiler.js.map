{"version":3,"sources":["../../src/test/profiler.ts"],"names":["profileDir","process","env","PWTEST_PROFILE_DIR","session","startProfiling","require","Session","connect","Promise","f","post","stopProfiling","workerIndex","err","profile","fs","promises","mkdir","recursive","writeFile","path","join","undefined","JSON","stringify"],"mappings":";;;;;;;;AAgBA;;AACA;;;;;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,MAAMA,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,IAAkC,EAArD;AAEA,IAAIC,OAAJ;;AAEO,eAAeC,cAAf,GAAgC;AACrC,MAAI,CAACL,UAAL,EACE;AAEFI,EAAAA,OAAO,GAAG,KAAKE,OAAO,CAAC,WAAD,CAAP,CAAqBC,OAA1B,GAAV;AACAH,EAAAA,OAAO,CAACI,OAAR;AACA,QAAM,IAAIC,OAAJ,CAAkBC,CAAC,IAAI;AAC3BN,IAAAA,OAAO,CAACO,IAAR,CAAa,iBAAb,EAAgC,MAAM;AACpCP,MAAAA,OAAO,CAACO,IAAR,CAAa,gBAAb,EAA+BD,CAA/B;AACD,KAFD;AAGD,GAJK,CAAN;AAKD;;AAEM,eAAeE,aAAf,CAA6BC,WAA7B,EAA8D;AACnE,MAAI,CAACb,UAAL,EACE;AAEF,QAAM,IAAIS,OAAJ,CAAkBC,CAAC,IAAIN,OAAO,CAACO,IAAR,CAAa,eAAb,EAA8B,OAAOG,GAAP,EAAY;AAAEC,IAAAA;AAAF,GAAZ,KAA4B;AACrF,QAAI,CAACD,GAAL,EAAU;AACR,YAAME,EAAE,CAACC,QAAH,CAAYC,KAAZ,CAAkBlB,UAAlB,EAA8B;AAAEmB,QAAAA,SAAS,EAAE;AAAb,OAA9B,CAAN;AACA,YAAMH,EAAE,CAACC,QAAH,CAAYG,SAAZ,CAAsBC,IAAI,CAACC,IAAL,CAAUtB,UAAV,EAAsBa,WAAW,KAAKU,SAAhB,GAA4B,aAA5B,GAA4C,WAAWV,WAAX,GAAyB,OAA3F,CAAtB,EAA2HW,IAAI,CAACC,SAAL,CAAeV,OAAf,CAA3H,CAAN;AACD;;AACDL,IAAAA,CAAC;AACF,GAN4B,CAAvB,CAAN;AAOD","sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst profileDir = process.env.PWTEST_PROFILE_DIR || '';\n\nlet session: import('inspector').Session;\n\nexport async function startProfiling() {\n  if (!profileDir)\n    return;\n\n  session = new (require('inspector').Session)();\n  session.connect();\n  await new Promise<void>(f => {\n    session.post('Profiler.enable', () => {\n      session.post('Profiler.start', f);\n    });\n  });\n}\n\nexport async function stopProfiling(workerIndex: number | undefined) {\n  if (!profileDir)\n    return;\n\n  await new Promise<void>(f => session.post('Profiler.stop', async (err, { profile }) => {\n    if (!err) {\n      await fs.promises.mkdir(profileDir, { recursive: true });\n      await fs.promises.writeFile(path.join(profileDir, workerIndex === undefined ? 'runner.json' : 'worker' + workerIndex + '.json'), JSON.stringify(profile));\n    }\n    f();\n  }));\n}\n"],"file":"profiler.js"}