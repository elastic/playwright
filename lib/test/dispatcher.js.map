{"version":3,"sources":["../../src/test/dispatcher.ts"],"names":["Dispatcher","constructor","loader","testGroups","reporter","_workers","Set","_freeWorkers","_workerClaimers","_testById","Map","_queue","_stopCallback","_loader","_reporter","_hasWorkerErrors","_isStopped","_failureCount","group","test","tests","result","_appendTestResult","set","_id","steps","stepStack","run","length","_dispatchQueue","jobs","testGroup","shift","requiredHash","workerHash","worker","_obtainWorker","hash","stop","push","_runJob","Promise","all","doneCallback","f","doneWithJob","removeListener","onTestBegin","onTestEnd","onDone","onExit","remainingByTestId","map","e","lastStartedTestId","params","testId","addListener","delete","remaining","values","failedTestId","fatalError","_notifyWorkerClaimer","retryCandidates","first","get","_hasReachedMaxFailures","error","status","_reportTestEnd","add","onError","outermostSerialSuite","parent","_serial","filter","allTests","forEach","pair","expectedStatus","results","retries","unshift","on","didSendStop","value","claimWorker","resolve","pop","size","fullConfig","workers","_createWorker","callback","Worker","testRun","workerIndex","startTime","Date","startWallTime","duration","attachments","a","name","path","contentType","body","Buffer","from","undefined","annotations","timeout","parentStep","step","title","titlePath","parentPath","category","wallTime","stepId","onStepBegin","onStdErr","getTime","onStepEnd","chunk","chunkFromParams","stdout","onStdOut","stderr","init","then","maxFailures","catch","hasWorkerErrors","lastWorkerIndex","EventEmitter","runner","process","index","child_process","fork","join","__dirname","detached","env","FORCE_COLOR","isTTY","DEBUG_COLORS","TEST_WORKER_INDEX","String","stdio","PW_RUNNER_DEBUG","emit","message","method","repeatEachIndex","projectIndex","serialize","send","once","runPayload","file","requireFile","entries","retry","text","buffer"],"mappings":"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","sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport child_process from 'child_process';\nimport path from 'path';\nimport { EventEmitter } from 'events';\nimport { RunPayload, TestBeginPayload, TestEndPayload, DonePayload, TestOutputPayload, WorkerInitParams, StepBeginPayload, StepEndPayload } from './ipc';\nimport type { TestResult, Reporter, TestStep } from '../../types/testReporter';\nimport { Suite, TestCase } from './test';\nimport { Loader } from './loader';\n\nexport type TestGroup = {\n  workerHash: string;\n  requireFile: string;\n  repeatEachIndex: number;\n  projectIndex: number;\n  tests: TestCase[];\n};\n\nexport class Dispatcher {\n  private _workers = new Set<Worker>();\n  private _freeWorkers: Worker[] = [];\n  private _workerClaimers: (() => void)[] = [];\n\n  private _testById = new Map<string, { test: TestCase, result: TestResult, steps: Map<string, TestStep>, stepStack: Set<TestStep> }>();\n  private _queue: TestGroup[] = [];\n  private _stopCallback = () => {};\n  readonly _loader: Loader;\n  private _reporter: Reporter;\n  private _hasWorkerErrors = false;\n  private _isStopped = false;\n  private _failureCount = 0;\n\n  constructor(loader: Loader, testGroups: TestGroup[], reporter: Reporter) {\n    this._loader = loader;\n    this._reporter = reporter;\n    this._queue = testGroups;\n    for (const group of testGroups) {\n      for (const test of group.tests) {\n        const result = test._appendTestResult();\n        // When changing this line, change the one in retry too.\n        this._testById.set(test._id, { test, result, steps: new Map(), stepStack: new Set() });\n      }\n    }\n  }\n\n  async run() {\n    // Loop in case job schedules more jobs\n    while (this._queue.length && !this._isStopped)\n      await this._dispatchQueue();\n  }\n\n  async _dispatchQueue() {\n    const jobs = [];\n    while (this._queue.length) {\n      if (this._isStopped)\n        break;\n      const testGroup = this._queue.shift()!;\n      const requiredHash = testGroup.workerHash;\n      let worker = await this._obtainWorker(testGroup);\n      while (worker && worker.hash && worker.hash !== requiredHash) {\n        worker.stop();\n        worker = await this._obtainWorker(testGroup);\n      }\n      if (this._isStopped || !worker)\n        break;\n      jobs.push(this._runJob(worker, testGroup));\n    }\n    await Promise.all(jobs);\n  }\n\n  async _runJob(worker: Worker, testGroup: TestGroup) {\n    worker.run(testGroup);\n\n    let doneCallback = () => {};\n    const result = new Promise<void>(f => doneCallback = f);\n    const doneWithJob = () => {\n      worker.removeListener('testBegin', onTestBegin);\n      worker.removeListener('testEnd', onTestEnd);\n      worker.removeListener('done', onDone);\n      worker.removeListener('exit', onExit);\n      doneCallback();\n    };\n\n    const remainingByTestId = new Map(testGroup.tests.map(e => [ e._id, e ]));\n    let lastStartedTestId: string | undefined;\n\n    const onTestBegin = (params: TestBeginPayload) => {\n      lastStartedTestId = params.testId;\n    };\n    worker.addListener('testBegin', onTestBegin);\n\n    const onTestEnd = (params: TestEndPayload) => {\n      remainingByTestId.delete(params.testId);\n    };\n    worker.addListener('testEnd', onTestEnd);\n\n    const onDone = (params: DonePayload) => {\n      let remaining = [...remainingByTestId.values()];\n\n      // We won't file remaining if:\n      // - there are no remaining\n      // - we are here not because something failed\n      // - no unrecoverable worker error\n      if (!remaining.length && !params.failedTestId && !params.fatalError) {\n        this._freeWorkers.push(worker);\n        this._notifyWorkerClaimer();\n        doneWithJob();\n        return;\n      }\n\n      // When worker encounters error, we will stop it and create a new one.\n      worker.stop();\n\n      const retryCandidates = new Set<string>();\n\n      // In case of fatal error, report first remaining test as failing with this error,\n      // and all others as skipped.\n      if (params.fatalError) {\n        let first = true;\n        for (const test of remaining) {\n          const { result } = this._testById.get(test._id)!;\n          if (this._hasReachedMaxFailures())\n            break;\n          // There might be a single test that has started but has not finished yet.\n          if (test._id !== lastStartedTestId)\n            this._reporter.onTestBegin?.(test, result);\n          result.error = params.fatalError;\n          result.status = first ? 'failed' : 'skipped';\n          this._reportTestEnd(test, result);\n          retryCandidates.add(test._id);\n          first = false;\n        }\n        if (first) {\n          // We had a fatal error after all tests have passed - most likely in the afterAll hook.\n          // Let's just fail the test run.\n          this._hasWorkerErrors = true;\n          this._reporter.onError?.(params.fatalError);\n        }\n        // Since we pretend that all remaining tests failed, there is nothing else to run,\n        // except for possible retries.\n        remaining = [];\n      }\n\n      if (params.failedTestId) {\n        retryCandidates.add(params.failedTestId);\n\n        let outermostSerialSuite: Suite | undefined;\n        for (let parent = this._testById.get(params.failedTestId)!.test.parent; parent; parent = parent.parent) {\n          if (parent._serial)\n            outermostSerialSuite = parent;\n        }\n\n        if (outermostSerialSuite) {\n          // Failed test belongs to a serial suite. We should skip all future tests\n          // from the same serial suite.\n          remaining = remaining.filter(test => {\n            let parent = test.parent;\n            while (parent && parent !== outermostSerialSuite)\n              parent = parent.parent;\n\n            // Does not belong to the same serial suite, keep it.\n            if (!parent)\n              return true;\n\n            // Emulate a \"skipped\" run, and drop this test from remaining.\n            const { result } = this._testById.get(test._id)!;\n            this._reporter.onTestBegin?.(test, result);\n            result.status = 'skipped';\n            this._reportTestEnd(test, result);\n            return false;\n          });\n\n          // Add all tests from the same serial suite for possible retry.\n          // These will only be retried together, because they have the same\n          // \"retries\" setting and the same number of previous runs.\n          outermostSerialSuite.allTests().forEach(test => retryCandidates.add(test._id));\n        }\n      }\n\n      // Only retry expected failures, not passes and only if the test failed.\n      for (const testId of retryCandidates) {\n        const pair = this._testById.get(testId)!;\n        if (!this._isStopped && pair.test.expectedStatus === 'passed' && pair.test.results.length < pair.test.retries + 1) {\n          pair.result = pair.test._appendTestResult();\n          pair.steps = new Map();\n          pair.stepStack = new Set();\n          remaining.push(pair.test);\n        }\n      }\n\n      if (remaining.length)\n        this._queue.unshift({ ...testGroup, tests: remaining });\n\n      // This job is over, we just scheduled another one.\n      doneWithJob();\n    };\n    worker.on('done', onDone);\n\n    const onExit = () => {\n      if (worker.didSendStop)\n        onDone({});\n      else\n        onDone({ fatalError: { value: 'Worker process exited unexpectedly' } });\n    };\n    worker.on('exit', onExit);\n\n    return result;\n  }\n\n  async _obtainWorker(testGroup: TestGroup) {\n    const claimWorker = (): Promise<Worker> | null => {\n      if (this._isStopped)\n        return null;\n      // Use available worker.\n      if (this._freeWorkers.length)\n        return Promise.resolve(this._freeWorkers.pop()!);\n      // Create a new worker.\n      if (this._workers.size < this._loader.fullConfig().workers)\n        return this._createWorker(testGroup);\n      return null;\n    };\n\n    // Note: it is important to claim the worker synchronously,\n    // so that we won't miss a _notifyWorkerClaimer call while awaiting.\n    let worker = claimWorker();\n    if (!worker) {\n      // Wait for available or stopped worker.\n      await new Promise<void>(f => this._workerClaimers.push(f));\n      worker = claimWorker();\n    }\n    return worker;\n  }\n\n  async _notifyWorkerClaimer() {\n    if (this._isStopped || !this._workerClaimers.length)\n      return;\n    const callback = this._workerClaimers.shift()!;\n    callback();\n  }\n\n  _createWorker(testGroup: TestGroup) {\n    const worker = new Worker(this);\n    worker.on('testBegin', (params: TestBeginPayload) => {\n      if (this._hasReachedMaxFailures())\n        return;\n      const { test, result: testRun  } = this._testById.get(params.testId)!;\n      testRun.workerIndex = params.workerIndex;\n      testRun.startTime = new Date(params.startWallTime);\n      this._reporter.onTestBegin?.(test, testRun);\n    });\n    worker.on('testEnd', (params: TestEndPayload) => {\n      if (this._hasReachedMaxFailures())\n        return;\n      const { test, result } = this._testById.get(params.testId)!;\n      result.duration = params.duration;\n      result.error = params.error;\n      result.attachments = params.attachments.map(a => ({\n        name: a.name,\n        path: a.path,\n        contentType: a.contentType,\n        body: a.body ? Buffer.from(a.body, 'base64') : undefined\n      }));\n      result.status = params.status;\n      test.expectedStatus = params.expectedStatus;\n      test.annotations = params.annotations;\n      test.timeout = params.timeout;\n      this._reportTestEnd(test, result);\n    });\n    worker.on('stepBegin', (params: StepBeginPayload) => {\n      const { test, result, steps, stepStack } = this._testById.get(params.testId)!;\n      const parentStep = [...stepStack].pop();\n      const step: TestStep = {\n        title: params.title,\n        titlePath: () => {\n          const parentPath = parentStep?.titlePath() || [];\n          return [...parentPath, params.title];\n        },\n        parent: parentStep,\n        category: params.category,\n        startTime: new Date(params.wallTime),\n        duration: 0,\n        steps: [],\n      };\n      steps.set(params.stepId, step);\n      (parentStep || result).steps.push(step);\n      stepStack.add(step);\n      this._reporter.onStepBegin?.(test, result, step);\n    });\n    worker.on('stepEnd', (params: StepEndPayload) => {\n      const { test, result, steps, stepStack } = this._testById.get(params.testId)!;\n      const step = steps.get(params.stepId);\n      if (!step) {\n        this._reporter.onStdErr?.('Internal error: step end without step begin: ' + params.stepId, test, result);\n        return;\n      }\n      step.duration = params.wallTime - step.startTime.getTime();\n      if (params.error)\n        step.error = params.error;\n      stepStack.delete(step);\n      steps.delete(params.stepId);\n      this._reporter.onStepEnd?.(test, result, step);\n    });\n    worker.on('stdOut', (params: TestOutputPayload) => {\n      const chunk = chunkFromParams(params);\n      const pair = params.testId ? this._testById.get(params.testId) : undefined;\n      if (pair)\n        pair.result.stdout.push(chunk);\n      this._reporter.onStdOut?.(chunk, pair?.test, pair?.result);\n    });\n    worker.on('stdErr', (params: TestOutputPayload) => {\n      const chunk = chunkFromParams(params);\n      const pair = params.testId ? this._testById.get(params.testId) : undefined;\n      if (pair)\n        pair.result.stderr.push(chunk);\n      this._reporter.onStdErr?.(chunk, pair?.test, pair?.result);\n    });\n    worker.on('teardownError', ({error}) => {\n      this._hasWorkerErrors = true;\n      this._reporter.onError?.(error);\n    });\n    worker.on('exit', () => {\n      this._workers.delete(worker);\n      this._notifyWorkerClaimer();\n      if (this._stopCallback && !this._workers.size)\n        this._stopCallback();\n    });\n    this._workers.add(worker);\n    return worker.init(testGroup).then(() => worker);\n  }\n\n  async stop() {\n    this._isStopped = true;\n    if (this._workers.size) {\n      const result = new Promise<void>(f => this._stopCallback = f);\n      for (const worker of this._workers)\n        worker.stop();\n      await result;\n    }\n    while (this._workerClaimers.length)\n      this._workerClaimers.shift()!();\n  }\n\n  private _hasReachedMaxFailures() {\n    const maxFailures = this._loader.fullConfig().maxFailures;\n    return maxFailures > 0 && this._failureCount >= maxFailures;\n  }\n\n  private _reportTestEnd(test: TestCase, result: TestResult) {\n    if (result.status !== 'skipped' && result.status !== test.expectedStatus)\n      ++this._failureCount;\n    this._reporter.onTestEnd?.(test, result);\n    const maxFailures = this._loader.fullConfig().maxFailures;\n    if (maxFailures && this._failureCount === maxFailures)\n      this.stop().catch(e => {});\n  }\n\n  hasWorkerErrors(): boolean {\n    return this._hasWorkerErrors;\n  }\n}\n\nlet lastWorkerIndex = 0;\n\nclass Worker extends EventEmitter {\n  process: child_process.ChildProcess;\n  runner: Dispatcher;\n  hash = '';\n  index: number;\n  didSendStop = false;\n\n  constructor(runner: Dispatcher) {\n    super();\n    this.runner = runner;\n    this.index = lastWorkerIndex++;\n\n    this.process = child_process.fork(path.join(__dirname, 'worker.js'), {\n      detached: false,\n      env: {\n        FORCE_COLOR: process.stdout.isTTY ? '1' : '0',\n        DEBUG_COLORS: process.stdout.isTTY ? '1' : '0',\n        TEST_WORKER_INDEX: String(this.index),\n        ...process.env\n      },\n      // Can't pipe since piping slows down termination for some reason.\n      stdio: ['ignore', 'ignore', process.env.PW_RUNNER_DEBUG ? 'inherit' : 'ignore', 'ipc']\n    });\n    this.process.on('exit', () => this.emit('exit'));\n    this.process.on('error', e => {});  // do not yell at a send to dead process.\n    this.process.on('message', (message: any) => {\n      const { method, params } = message;\n      this.emit(method, params);\n    });\n  }\n\n  async init(testGroup: TestGroup) {\n    this.hash = testGroup.workerHash;\n    const params: WorkerInitParams = {\n      workerIndex: this.index,\n      repeatEachIndex: testGroup.repeatEachIndex,\n      projectIndex: testGroup.projectIndex,\n      loader: this.runner._loader.serialize(),\n    };\n    this.process.send({ method: 'init', params });\n    await new Promise(f => this.process.once('message', f));  // Ready ack\n  }\n\n  run(testGroup: TestGroup) {\n    const runPayload: RunPayload = {\n      file: testGroup.requireFile,\n      entries: testGroup.tests.map(test => {\n        return { testId: test._id, retry: test.results.length - 1 };\n      }),\n    };\n    this.process.send({ method: 'run', params: runPayload });\n  }\n\n  stop() {\n    if (!this.didSendStop)\n      this.process.send({ method: 'stop' });\n    this.didSendStop = true;\n  }\n}\n\nfunction chunkFromParams(params: TestOutputPayload): string | Buffer {\n  if (typeof params.text === 'string')\n    return params.text;\n  return Buffer.from(params.buffer!, 'base64');\n}\n"],"file":"dispatcher.js"}