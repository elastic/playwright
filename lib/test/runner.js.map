{"version":3,"sources":["../../src/test/runner.ts"],"names":["removeFolderAsync","rimraf","readDirAsync","fs","readdir","readFileAsync","readFile","Runner","constructor","defaultConfig","configOverrides","_loader","_reporter","_didBegin","Loader","_createReporter","list","reporters","defaultReporters","dot","ListModeReporter","DotReporter","line","LineReporter","ListReporter","json","JSONReporter","junit","JUnitReporter","null","EmptyReporter","r","fullConfig","reporter","name","arg","push","reporterConstructor","loadReporter","Multiplexer","loadConfigFile","file","loadEmptyConfig","rootDir","run","filePatternFilters","projectName","config","globalDeadline","globalTimeout","undefined","result","timedOut","_run","onBegin","Suite","onEnd","status","_flushOutput","console","error","location","locations","title","tests","clashingTests","entries","test","buildItemLocation","Promise","resolve","process","stdout","write","stderr","testFileReFilters","testFileFilter","length","map","e","re","projects","filter","project","toLocaleLowerCase","names","p","Error","join","files","Map","allTestFiles","Set","testDir","existsSync","statSync","isDirectory","allFiles","collectFiles","testMatch","testIgnore","testFileExtension","includes","path","extname","testFiles","set","forEach","add","webServer","WebServer","create","globalSetupResult","globalSetup","loadGlobalHook","loadTestFile","preprocessRoot","fileSuite","fileSuites","values","_addSuite","forbidOnly","onlyTestsAndSuites","_getOnlyItems","testOrSuite","titlePath","slice","getClashingTestsPerSuite","size","filterOnly","filterByFocusedLine","suites","_requireFile","outputDirs","grepMatcher","grep","grepInvertMatcher","grepInvert","rootSuite","projectSuite","get","repeatEachIndex","repeatEach","cloned","cloneFileSuite","grepTitle","outputDir","total","allTests","all","Array","from","catch","testGroups","createTestGroups","shard","shardGroups","shardTests","shardSize","Math","floor","extraOne","currentShard","current","min","to","group","filterSuite","has","isTTY","log","jobs","workers","shardDetails","sigint","sigintCallback","sigIntPromise","f","sigintHandler","setTimeout","off","on","hasWorkerErrors","dispatcher","Dispatcher","race","stop","failed","some","ok","globalTeardown","kill","suite","suiteFilter","_only","testFilter","focusedTestFileLines","testFileLineMatches","testFileName","testLine","lastIndex","onlySuites","child","onlyTests","onlyEntries","_entries","checkIgnores","entryPath","rules","parentStatus","rule","ruleIncludes","negate","relative","dir","match","visit","withFileTypes","sort","a","b","localeCompare","gitignore","find","isFile","content","newRules","split","s","trim","Minimatch","matchBase","flipNegate","comment","entry","entryStatus","childSuite","fullTitle","concat","out","workerHashToOrdinal","requireFileToOrdinal","groupById","workerHashOrdinal","_workerHash","requireFileOrdinal","id","workerHash","requireFile","_repeatEachIndex","projectIndex","_projectIndex","ids","keys","titles","column","projectTitle","builtInReporters"],"mappings":"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","sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\nimport rimraf from 'rimraf';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport { Dispatcher, TestGroup } from './dispatcher';\nimport { createMatcher, FilePatternFilter, monotonicTime, raceAgainstDeadline } from './util';\nimport { TestCase, Suite } from './test';\nimport { Loader } from './loader';\nimport { Reporter } from '../../types/testReporter';\nimport { Multiplexer } from './reporters/multiplexer';\nimport DotReporter from './reporters/dot';\nimport LineReporter from './reporters/line';\nimport ListReporter from './reporters/list';\nimport JSONReporter from './reporters/json';\nimport JUnitReporter from './reporters/junit';\nimport EmptyReporter from './reporters/empty';\nimport { ProjectImpl } from './project';\nimport { Minimatch } from 'minimatch';\nimport { Config, FullConfig } from './types';\nimport { WebServer } from './webServer';\n\nconst removeFolderAsync = promisify(rimraf);\nconst readDirAsync = promisify(fs.readdir);\nconst readFileAsync = promisify(fs.readFile);\n\ntype RunResultStatus = 'passed' | 'failed' | 'sigint' | 'forbid-only' | 'clashing-test-titles' | 'no-tests' | 'timedout';\n\ntype RunResult = {\n  status: Exclude<RunResultStatus, 'forbid-only' | 'clashing-test-titles'>;\n} | {\n  status: 'forbid-only',\n  locations: string[]\n} | {\n  status: 'clashing-test-titles',\n  clashingTests: Map<string, TestCase[]>\n};\n\nexport class Runner {\n  private _loader: Loader;\n  private _reporter!: Reporter;\n  private _didBegin = false;\n\n  constructor(defaultConfig: Config, configOverrides: Config) {\n    this._loader = new Loader(defaultConfig, configOverrides);\n  }\n\n  private async _createReporter(list: boolean) {\n    const reporters: Reporter[] = [];\n    const defaultReporters: {[key in BuiltInReporter]: new(arg: any) => Reporter} = {\n      dot: list ? ListModeReporter : DotReporter,\n      line: list ? ListModeReporter : LineReporter,\n      list: list ? ListModeReporter : ListReporter,\n      json: JSONReporter,\n      junit: JUnitReporter,\n      null: EmptyReporter,\n    };\n    for (const r of this._loader.fullConfig().reporter) {\n      const [name, arg] = r;\n      if (name in defaultReporters) {\n        reporters.push(new defaultReporters[name as keyof typeof defaultReporters](arg));\n      } else {\n        const reporterConstructor = await this._loader.loadReporter(name);\n        reporters.push(new reporterConstructor(arg));\n      }\n    }\n    return new Multiplexer(reporters);\n  }\n\n  loadConfigFile(file: string): Promise<Config> {\n    return this._loader.loadConfigFile(file);\n  }\n\n  loadEmptyConfig(rootDir: string) {\n    this._loader.loadEmptyConfig(rootDir);\n  }\n\n  async run(list: boolean, filePatternFilters: FilePatternFilter[], projectName?: string): Promise<RunResultStatus> {\n    this._reporter = await this._createReporter(list);\n    const config = this._loader.fullConfig();\n    const globalDeadline = config.globalTimeout ? config.globalTimeout + monotonicTime() : undefined;\n    const { result, timedOut } = await raceAgainstDeadline(this._run(list, filePatternFilters, projectName), globalDeadline);\n    if (timedOut) {\n      if (!this._didBegin)\n        this._reporter.onBegin?.(config, new Suite(''));\n      await this._reporter.onEnd?.({ status: 'timedout' });\n      await this._flushOutput();\n      return 'failed';\n    }\n    if (result?.status === 'forbid-only') {\n      console.error('=====================================');\n      console.error(' --forbid-only found a focused test.');\n      for (const location of result?.locations)\n        console.error(` - ${location}`);\n      console.error('=====================================');\n    } else if (result!.status === 'no-tests') {\n      console.error('=================');\n      console.error(' no tests found.');\n      console.error('=================');\n    } else if (result?.status === 'clashing-test-titles') {\n      console.error('=================');\n      console.error(' duplicate test titles are not allowed.');\n      for (const [title, tests] of result?.clashingTests.entries()) {\n        console.error(` - title: ${title}`);\n        for (const test of tests)\n          console.error(`   - ${buildItemLocation(config.rootDir, test)}`);\n        console.error('=================');\n      }\n    }\n    await this._flushOutput();\n    return result!.status!;\n  }\n\n  async _flushOutput() {\n    // Calling process.exit() might truncate large stdout/stderr output.\n    // See https://github.com/nodejs/node/issues/6456.\n    // See https://github.com/nodejs/node/issues/12921\n    await new Promise<void>(resolve => process.stdout.write('', () => resolve()));\n    await new Promise<void>(resolve => process.stderr.write('', () => resolve()));\n  }\n\n  async _run(list: boolean, testFileReFilters: FilePatternFilter[], projectName?: string): Promise<RunResult> {\n    const testFileFilter = testFileReFilters.length ? createMatcher(testFileReFilters.map(e => e.re)) : () => true;\n    const config = this._loader.fullConfig();\n\n    const projects = this._loader.projects().filter(project => {\n      return !projectName || project.config.name.toLocaleLowerCase() === projectName.toLocaleLowerCase();\n    });\n    if (projectName && !projects.length) {\n      const names = this._loader.projects().map(p => p.config.name).filter(name => !!name);\n      if (!names.length)\n        throw new Error(`No named projects are specified in the configuration file`);\n      throw new Error(`Project \"${projectName}\" not found. Available named projects: ${names.map(name => `\"${name}\"`).join(', ')}`);\n    }\n\n    const files = new Map<ProjectImpl, string[]>();\n    const allTestFiles = new Set<string>();\n    for (const project of projects) {\n      const testDir = project.config.testDir;\n      if (!fs.existsSync(testDir))\n        throw new Error(`${testDir} does not exist`);\n      if (!fs.statSync(testDir).isDirectory())\n        throw new Error(`${testDir} is not a directory`);\n      const allFiles = await collectFiles(project.config.testDir);\n      const testMatch = createMatcher(project.config.testMatch);\n      const testIgnore = createMatcher(project.config.testIgnore);\n      const testFileExtension = (file: string) => ['.js', '.ts', '.mjs'].includes(path.extname(file));\n      const testFiles = allFiles.filter(file => !testIgnore(file) && testMatch(file) && testFileFilter(file) && testFileExtension(file));\n      files.set(project, testFiles);\n      testFiles.forEach(file => allTestFiles.add(file));\n    }\n\n    const webServer = config.webServer && await WebServer.create(config.webServer);\n    let globalSetupResult: any;\n    if (config.globalSetup)\n      globalSetupResult = await (await this._loader.loadGlobalHook(config.globalSetup, 'globalSetup'))(this._loader.fullConfig());\n    try {\n      for (const file of allTestFiles)\n        await this._loader.loadTestFile(file);\n\n      const preprocessRoot = new Suite('');\n      for (const fileSuite of this._loader.fileSuites().values())\n        preprocessRoot._addSuite(fileSuite);\n      if (config.forbidOnly) {\n        const onlyTestsAndSuites = preprocessRoot._getOnlyItems();\n        if (onlyTestsAndSuites.length > 0) {\n          const locations = onlyTestsAndSuites.map(testOrSuite => {\n            // Skip root and file.\n            const title = testOrSuite.titlePath().slice(2).join(' ');\n            return `${buildItemLocation(config.rootDir, testOrSuite)} > ${title}`;\n          });\n          return { status: 'forbid-only', locations };\n        }\n      }\n      const clashingTests = getClashingTestsPerSuite(preprocessRoot);\n      if (clashingTests.size > 0)\n        return { status: 'clashing-test-titles', clashingTests: clashingTests };\n      filterOnly(preprocessRoot);\n      filterByFocusedLine(preprocessRoot, testFileReFilters);\n\n      const fileSuites = new Map<string, Suite>();\n      for (const fileSuite of preprocessRoot.suites)\n        fileSuites.set(fileSuite._requireFile, fileSuite);\n\n      const outputDirs = new Set<string>();\n      const grepMatcher = createMatcher(config.grep);\n      const grepInvertMatcher = config.grepInvert ? createMatcher(config.grepInvert) : null;\n      const rootSuite = new Suite('');\n      for (const project of projects) {\n        const projectSuite = new Suite(project.config.name);\n        rootSuite._addSuite(projectSuite);\n        for (const file of files.get(project)!) {\n          const fileSuite = fileSuites.get(file);\n          if (!fileSuite)\n            continue;\n          for (let repeatEachIndex = 0; repeatEachIndex < project.config.repeatEach; repeatEachIndex++) {\n            const cloned = project.cloneFileSuite(fileSuite, repeatEachIndex, test => {\n              const grepTitle = test.titlePath().join(' ');\n              if (grepInvertMatcher?.(grepTitle))\n                return false;\n              return grepMatcher(grepTitle);\n            });\n            if (cloned)\n              projectSuite._addSuite(cloned);\n          }\n        }\n        outputDirs.add(project.config.outputDir);\n      }\n\n      let total = rootSuite.allTests().length;\n      if (!total)\n        return { status: 'no-tests' };\n\n      await Promise.all(Array.from(outputDirs).map(outputDir => removeFolderAsync(outputDir).catch(e => {})));\n\n      let testGroups = createTestGroups(rootSuite);\n\n      const shard = config.shard;\n      if (shard) {\n        const shardGroups: TestGroup[] = [];\n        const shardTests = new Set<TestCase>();\n\n        // Each shard gets some tests.\n        const shardSize = Math.floor(total / shard.total);\n        // First few shards get one more test each.\n        const extraOne = total - shardSize * shard.total;\n\n        const currentShard = shard.current - 1; // Make it zero-based for calculations.\n        const from = shardSize * currentShard + Math.min(extraOne, currentShard);\n        const to = from + shardSize + (currentShard < extraOne ? 1 : 0);\n        let current = 0;\n        for (const group of testGroups) {\n          // Any test group goes to the shard that contains the first test of this group.\n          // So, this shard gets any group that starts at [from; to)\n          if (current >= from && current < to) {\n            shardGroups.push(group);\n            for (const test of group.tests)\n              shardTests.add(test);\n          }\n          current += group.tests.length;\n        }\n\n        testGroups = shardGroups;\n        filterSuite(rootSuite, () => false, test => shardTests.has(test));\n        total = rootSuite.allTests().length;\n      }\n\n      if (process.stdout.isTTY) {\n        console.log();\n        const jobs = Math.min(config.workers, testGroups.length);\n        const shardDetails = shard ? `, shard ${shard.current} of ${shard.total}` : '';\n        console.log(`Running ${total} test${total > 1 ? 's' : ''} using ${jobs} worker${jobs > 1 ? 's' : ''}${shardDetails}`);\n      }\n\n      let sigint = false;\n      let sigintCallback: () => void;\n      const sigIntPromise = new Promise<void>(f => sigintCallback = f);\n      const sigintHandler = () => {\n        // We remove the handler so that second Ctrl+C immediately kills the runner\n        // via the default sigint handler. This is handy in the case where our shutdown\n        // takes a lot of time or is buggy.\n        //\n        // When running through NPM we might get multiple SIGINT signals\n        // for a single Ctrl+C - this is an NPM bug present since at least NPM v6.\n        // https://github.com/npm/cli/issues/1591\n        // https://github.com/npm/cli/issues/2124\n        //\n        // Therefore, removing the handler too soon will just kill the process\n        // with default handler without printing the results.\n        // We work around this by giving NPM 1000ms to send us duplicate signals.\n        // The side effect is that slow shutdown or bug in our runner will force\n        // the user to hit Ctrl+C again after at least a second.\n        setTimeout(() => process.off('SIGINT', sigintHandler), 1000);\n        sigint = true;\n        sigintCallback();\n      };\n      process.on('SIGINT', sigintHandler);\n\n      this._reporter.onBegin?.(config, rootSuite);\n      this._didBegin = true;\n      let hasWorkerErrors = false;\n      if (!list) {\n        const dispatcher = new Dispatcher(this._loader, testGroups, this._reporter);\n        await Promise.race([dispatcher.run(), sigIntPromise]);\n        await dispatcher.stop();\n        hasWorkerErrors = dispatcher.hasWorkerErrors();\n      }\n\n      if (sigint) {\n        await this._reporter.onEnd?.({ status: 'interrupted' });\n        return { status: 'sigint' };\n      }\n\n      const failed = hasWorkerErrors || rootSuite.allTests().some(test => !test.ok());\n      await this._reporter.onEnd?.({ status: failed ? 'failed' : 'passed' });\n      return { status: failed ? 'failed' : 'passed' };\n    } finally {\n      if (globalSetupResult && typeof globalSetupResult === 'function')\n        await globalSetupResult(this._loader.fullConfig());\n      if (config.globalTeardown)\n        await (await this._loader.loadGlobalHook(config.globalTeardown, 'globalTeardown'))(this._loader.fullConfig());\n      await webServer?.kill();\n    }\n  }\n}\n\nfunction filterOnly(suite: Suite) {\n  const suiteFilter = (suite: Suite) => suite._only;\n  const testFilter = (test: TestCase) => test._only;\n  return filterSuite(suite, suiteFilter, testFilter);\n}\n\nfunction filterByFocusedLine(suite: Suite, focusedTestFileLines: FilePatternFilter[]) {\n  const testFileLineMatches = (testFileName: string, testLine: number) => focusedTestFileLines.some(({re, line}) => {\n    re.lastIndex = 0;\n    return re.test(testFileName) && (line === testLine || line === null);\n  });\n  const suiteFilter = (suite: Suite) => !!suite.location && testFileLineMatches(suite.location.file, suite.location.line);\n  const testFilter = (test: TestCase) => testFileLineMatches(test.location.file, test.location.line);\n  return filterSuite(suite, suiteFilter, testFilter);\n}\n\nfunction filterSuite(suite: Suite, suiteFilter: (suites: Suite) => boolean, testFilter: (test: TestCase) => boolean) {\n  const onlySuites = suite.suites.filter(child => filterSuite(child, suiteFilter, testFilter) || suiteFilter(child));\n  const onlyTests = suite.tests.filter(testFilter);\n  const onlyEntries = new Set([...onlySuites, ...onlyTests]);\n  if (onlyEntries.size) {\n    suite.suites = onlySuites;\n    suite.tests = onlyTests;\n    suite._entries = suite._entries.filter(e => onlyEntries.has(e)); // Preserve the order.\n    return true;\n  }\n  return false;\n}\n\nasync function collectFiles(testDir: string): Promise<string[]> {\n  type Rule = {\n    dir: string;\n    negate: boolean;\n    match: (s: string, partial?: boolean) => boolean\n  };\n  type IgnoreStatus = 'ignored' | 'included' | 'ignored-but-recurse';\n\n  const checkIgnores = (entryPath: string, rules: Rule[], isDirectory: boolean, parentStatus: IgnoreStatus) => {\n    let status = parentStatus;\n    for (const rule of rules) {\n      const ruleIncludes = rule.negate;\n      if ((status === 'included') === ruleIncludes)\n        continue;\n      const relative = path.relative(rule.dir, entryPath);\n      if (rule.match('/' + relative) || rule.match(relative)) {\n        // Matches \"/dir/file\" or \"dir/file\"\n        status = ruleIncludes ? 'included' : 'ignored';\n      } else if (isDirectory && (rule.match('/' + relative + '/') || rule.match(relative + '/'))) {\n        // Matches \"/dir/subdir/\" or \"dir/subdir/\" for directories.\n        status = ruleIncludes ? 'included' : 'ignored';\n      } else if (isDirectory && ruleIncludes && (rule.match('/' + relative, true) || rule.match(relative, true))) {\n        // Matches \"/dir/donotskip/\" when \"/dir\" is excluded, but \"!/dir/donotskip/file\" is included.\n        status = 'ignored-but-recurse';\n      }\n    }\n    return status;\n  };\n\n  const files: string[] = [];\n\n  const visit = async (dir: string, rules: Rule[], status: IgnoreStatus) => {\n    const entries = await readDirAsync(dir, { withFileTypes: true });\n    entries.sort((a, b) => a.name.localeCompare(b.name));\n\n    const gitignore = entries.find(e => e.isFile() && e.name === '.gitignore');\n    if (gitignore) {\n      const content = await readFileAsync(path.join(dir, gitignore.name), 'utf8');\n      const newRules: Rule[] = content.split(/\\r?\\n/).map(s => {\n        s = s.trim();\n        if (!s)\n          return;\n        // Use flipNegate, because we handle negation ourselves.\n        const rule = new Minimatch(s, { matchBase: true, dot: true, flipNegate: true }) as any;\n        if (rule.comment)\n          return;\n        rule.dir = dir;\n        return rule;\n      }).filter(rule => !!rule);\n      rules = [...rules, ...newRules];\n    }\n\n    for (const entry of entries) {\n      if (entry === gitignore || entry.name === '.' || entry.name === '..')\n        continue;\n      if (entry.isDirectory() && entry.name === 'node_modules')\n        continue;\n      const entryPath = path.join(dir, entry.name);\n      const entryStatus = checkIgnores(entryPath, rules, entry.isDirectory(), status);\n      if (entry.isDirectory() && entryStatus !== 'ignored')\n        await visit(entryPath, rules, entryStatus);\n      else if (entry.isFile() && entryStatus === 'included')\n        files.push(entryPath);\n    }\n  };\n  await visit(testDir, [], 'included');\n  return files;\n}\n\nfunction getClashingTestsPerSuite(rootSuite: Suite): Map<string, TestCase[]> {\n  function visit(suite: Suite, clashingTests: Map<string, TestCase[]>) {\n    for (const childSuite of suite.suites)\n      visit(childSuite, clashingTests);\n    for (const test of suite.tests) {\n      const fullTitle = test.titlePath().slice(2).join(' ');\n      if (!clashingTests.has(fullTitle))\n        clashingTests.set(fullTitle, []);\n      clashingTests.set(fullTitle, clashingTests.get(fullTitle)!.concat(test));\n    }\n  }\n  const out = new Map<string, TestCase[]>();\n  for (const fileSuite of rootSuite.suites) {\n    const clashingTests = new Map<string, TestCase[]>();\n    visit(fileSuite, clashingTests);\n    for (const [title, tests] of clashingTests.entries()) {\n      if (tests.length > 1)\n        out.set(title, tests);\n    }\n  }\n  return out;\n}\n\nfunction buildItemLocation(rootDir: string, testOrSuite: Suite | TestCase) {\n  if (!testOrSuite.location)\n    return '';\n  return `${path.relative(rootDir, testOrSuite.location.file)}:${testOrSuite.location.line}`;\n}\n\nfunction createTestGroups(rootSuite: Suite): TestGroup[] {\n  // This function groups tests that can be run together.\n  // Tests cannot be run together when:\n  // - They belong to different projects - requires different workers.\n  // - They have a different repeatEachIndex - requires different workers.\n  // - They have a different set of worker fixtures in the pool - requires different workers.\n  // - They have a different requireFile - reuses the worker, but runs each requireFile separately.\n\n  // We try to preserve the order of tests when they require different workers\n  // by ordering different worker hashes sequentially.\n  const workerHashToOrdinal = new Map<string, number>();\n  const requireFileToOrdinal = new Map<string, number>();\n\n  const groupById = new Map<number, TestGroup>();\n  for (const projectSuite of rootSuite.suites) {\n    for (const test of projectSuite.allTests()) {\n      let workerHashOrdinal = workerHashToOrdinal.get(test._workerHash);\n      if (!workerHashOrdinal) {\n        workerHashOrdinal = workerHashToOrdinal.size + 1;\n        workerHashToOrdinal.set(test._workerHash, workerHashOrdinal);\n      }\n\n      let requireFileOrdinal = requireFileToOrdinal.get(test._requireFile);\n      if (!requireFileOrdinal) {\n        requireFileOrdinal = requireFileToOrdinal.size + 1;\n        requireFileToOrdinal.set(test._requireFile, requireFileOrdinal);\n      }\n\n      const id = workerHashOrdinal * 10000 + requireFileOrdinal;\n      let group = groupById.get(id);\n      if (!group) {\n        group = {\n          workerHash: test._workerHash,\n          requireFile: test._requireFile,\n          repeatEachIndex: test._repeatEachIndex,\n          projectIndex: test._projectIndex,\n          tests: [],\n        };\n        groupById.set(id, group);\n      }\n      group.tests.push(test);\n    }\n  }\n\n  // Sorting ids will preserve the natural order, because we\n  // replaced hashes with ordinals according to the natural ordering.\n  const ids = Array.from(groupById.keys()).sort();\n  return ids.map(id => groupById.get(id)!);\n}\n\nclass ListModeReporter implements Reporter {\n  onBegin(config: FullConfig, suite: Suite): void {\n    console.log(`Listing tests:`);\n    const tests = suite.allTests();\n    const files = new Set<string>();\n    for (const test of tests) {\n      // root, project, file, ...describes, test\n      const [, projectName, , ...titles] = test.titlePath();\n      const location = `${path.relative(config.rootDir, test.location.file)}:${test.location.line}:${test.location.column}`;\n      const projectTitle = projectName ? `[${projectName}] › ` : '';\n      console.log(`  ${projectTitle}${location} › ${titles.join(' ')}`);\n      files.add(test.location.file);\n    }\n    console.log(`Total: ${tests.length} ${tests.length === 1 ? 'test' : 'tests'} in ${files.size} ${files.size === 1 ? 'file' : 'files'}`);\n  }\n}\n\nexport const builtInReporters = ['list', 'line', 'dot', 'json', 'junit', 'null'] as const;\nexport type BuiltInReporter = typeof builtInReporters[number];\n"],"file":"runner.js"}