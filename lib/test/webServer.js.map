{"version":3,"sources":["../../src/test/webServer.ts"],"names":["DEFAULT_ENVIRONMENT_VARIABLES","newProcessLogPrefixer","stream","Transform","transform","chunk","encoding","callback","push","toString","split","os","EOL","map","line","join","WebServer","constructor","config","_killProcess","_processExitedPromise","create","webServer","_startProcess","_waitForProcess","error","kill","processExitedReject","Promise","_","reject","portIsUsed","canBindPort","port","reuseExistingServer","Error","launchedProcess","command","env","process","cwd","stdio","shell","attemptToGracefullyClose","log","onExit","code","tempDirectories","stderr","pipe","stdout","on","_waitForAvailability","baseURL","PLAYWRIGHT_TEST_BASE_URL","launchTimeout","timeout","cancellationToken","canceled","timedOut","race","waitForSocket","resolve","server","net","createServer","listen","close","delay","connected","conn","connect","end","x","setTimeout"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport net from 'net';\nimport os from 'os';\nimport stream from 'stream';\nimport { monotonicTime, raceAgainstDeadline } from './util';\nimport { WebServerConfig } from '../../types/test';\nimport { launchProcess } from '../utils/processLauncher';\n\nconst DEFAULT_ENVIRONMENT_VARIABLES = {\n  'BROWSER': 'none', // Disable that create-react-app will open the page in the browser\n};\n\nconst newProcessLogPrefixer = () => new stream.Transform({\n  transform(this: stream.Transform, chunk: Buffer, encoding: string, callback: stream.TransformCallback) {\n    this.push(chunk.toString().split(os.EOL).map((line: string): string => line ? `[Launch] ${line}` : line).join(os.EOL));\n    callback();\n  },\n});\n\nexport class WebServer {\n  private _killProcess?: () => Promise<void>;\n  private _processExitedPromise!: Promise<any>;\n  constructor(private readonly config: WebServerConfig) { }\n\n  public static async create(config: WebServerConfig): Promise<WebServer> {\n    const webServer = new WebServer(config);\n    try {\n      await webServer._startProcess();\n      await webServer._waitForProcess();\n      return webServer;\n    } catch (error) {\n      await webServer.kill();\n      throw error;\n    }\n  }\n\n  private async _startProcess(): Promise<void> {\n    let processExitedReject = (error: Error) => { };\n    this._processExitedPromise = new Promise((_, reject) => processExitedReject = reject);\n\n    const portIsUsed = !await canBindPort(this.config.port);\n    if (portIsUsed) {\n      if (this.config.reuseExistingServer)\n        return;\n      throw new Error(`Port ${this.config.port} is used, make sure that nothing is running on the port or set strict:false in config.launch.`);\n    }\n\n    const { launchedProcess, kill } = await launchProcess({\n      command: this.config.command,\n      env: {\n        ...DEFAULT_ENVIRONMENT_VARIABLES,\n        ...process.env,\n        ...this.config.env,\n      },\n      cwd: this.config.cwd,\n      stdio: 'stdin',\n      shell: true,\n      attemptToGracefullyClose: async () => {},\n      log: () => {},\n      onExit: code => processExitedReject(new Error(`Process from config.launch was not able to start. Exit code: ${code}`)),\n      tempDirectories: [],\n    });\n    this._killProcess = kill;\n\n    launchedProcess.stderr.pipe(newProcessLogPrefixer()).pipe(process.stderr);\n    launchedProcess.stdout.on('data', () => {});\n  }\n\n  private async _waitForProcess() {\n    await this._waitForAvailability();\n    const baseURL = `http://localhost:${this.config.port}`;\n    process.env.PLAYWRIGHT_TEST_BASE_URL = baseURL;\n  }\n\n  private async _waitForAvailability() {\n    const launchTimeout = this.config.timeout || 60 * 1000;\n    const cancellationToken = { canceled: false };\n    const { timedOut } = (await Promise.race([\n      raceAgainstDeadline(waitForSocket(this.config.port, 100, cancellationToken), launchTimeout + monotonicTime()),\n      this._processExitedPromise,\n    ]));\n    cancellationToken.canceled = true;\n    if (timedOut)\n      throw new Error(`Timed out waiting ${launchTimeout}ms from config.launch.`);\n  }\n  public async kill() {\n    await this._killProcess?.();\n  }\n}\n\nasync function canBindPort(port: number): Promise<boolean> {\n  return new Promise<boolean>(resolve => {\n    const server = net.createServer();\n    server.on('error', () => resolve(false));\n    server.listen(port, () => {\n      server.close(() => {\n        resolve(true);\n      });\n    });\n  });\n}\n\nasync function waitForSocket(port: number, delay: number, cancellationToken: { canceled: boolean }) {\n  while (!cancellationToken.canceled) {\n    const connected = await new Promise(resolve => {\n      const conn = net\n          .connect(port)\n          .on('error', () => {\n            resolve(false);\n          })\n          .on('connect', () => {\n            conn.end();\n            resolve(true);\n          });\n    });\n    if (connected)\n      return;\n    await new Promise(x => setTimeout(x, delay));\n  }\n}\n"],"file":"webServer.js"}