{"version":3,"sources":["../../src/test/workerRunner.ts"],"names":["removeFolderAsync","util","promisify","rimraf","WorkerRunner","EventEmitter","constructor","params","_params","_loader","_project","_workerInfo","_projectNamePathSegment","_uniqueProjectNamePathSegment","_fixtureRunner","_failedTestId","_fatalError","_entries","Map","_isStopped","_runFinished","Promise","resolve","_currentDeadlineRunner","_currentTest","FixtureRunner","stop","setDeadline","testInfo","status","cleanup","_loadIfNeeded","result","teardownScope","_deadline","timedOut","Error","config","timeout","unhandledError","error","type","undefined","Loader","deserialize","loader","projects","projectIndex","name","sameName","filter","project","length","indexOf","workerIndex","fullConfig","run","runPayload","runFinishedCalback","f","entries","map","e","testId","fileSuite","loadTestFile","file","anyPool","suite","cloneFileSuite","repeatEachIndex","test","has","_id","_pool","setPool","_runSuite","_reportDone","annotations","concat","_annotations","beforeAllModifier","_modifiers","dependsOnWorkerFixturesOnly","fn","location","resolveParametersAndRunHookOrTest","push","description","hook","_allHooks","_type","firstTest","allTests","_runTestOrAllHook","get","retry","entry","Suite","runEntry","reportEvents","startTime","startWallTime","Date","now","deadlineRunner","baseOutputDir","relativeTestFilePath","path","relative","testDir","_requireFile","replace","sanitizedRelativePath","process","platform","RegExp","testOutputDir","title","join","outputDir","testFinishedCallback","lastStepId","line","column","expectedStatus","attachments","duration","stdout","stderr","snapshotSuffix","outputPath","pathSegments","fs","mkdirSync","recursive","snapshotPath","snapshotName","suffix","ext","extname","substring","skip","args","modifier","fixme","fail","slow","setTimeout","deadline","_testFinished","_addStep","category","stepId","payload","wallTime","emit","callbackHandled","parent","_timeout","annotation","buildTestBeginPayload","buildTestEndPayload","DeadlineRunner","_runTestWithBeforeHooks","_runAfterHooks","hooksResult","newDeadline","isFailure","preserveOutput","catch","_runBeforeHooks","beforeEachModifiers","s","modifiers","reverse","_runHooks","SkipError","completeStep","teardownError","all","funcs","_eachHooks","donePayload","failedTestId","fatalError","a","contentType","body","toString","modifierArgs"],"mappings":"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","sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport util from 'util';\nimport { EventEmitter } from 'events';\nimport { monotonicTime, DeadlineRunner, raceAgainstDeadline, serializeError, sanitizeForFilePath } from './util';\nimport { TestBeginPayload, TestEndPayload, RunPayload, TestEntry, DonePayload, WorkerInitParams, StepBeginPayload, StepEndPayload } from './ipc';\nimport { setCurrentTestInfo } from './globals';\nimport { Loader } from './loader';\nimport { Modifier, Suite, TestCase } from './test';\nimport { Annotations, CompleteStepCallback, TestError, TestInfo, TestInfoImpl, WorkerInfo } from './types';\nimport { ProjectImpl } from './project';\nimport { FixturePool, FixtureRunner } from './fixtures';\n\nconst removeFolderAsync = util.promisify(rimraf);\n\nexport class WorkerRunner extends EventEmitter {\n  private _params: WorkerInitParams;\n  private _loader!: Loader;\n  private _project!: ProjectImpl;\n  private _workerInfo!: WorkerInfo;\n  private _projectNamePathSegment = '';\n  private _uniqueProjectNamePathSegment = '';\n  private _fixtureRunner: FixtureRunner;\n\n  private _failedTestId: string | undefined;\n  private _fatalError: TestError | undefined;\n  private _entries = new Map<string, TestEntry>();\n  private _isStopped = false;\n  private _runFinished = Promise.resolve();\n  private _currentDeadlineRunner: DeadlineRunner<any> | undefined;\n  _currentTest: { testId: string, testInfo: TestInfoImpl, type: 'test' | 'beforeAll' | 'afterAll' } | null = null;\n\n  constructor(params: WorkerInitParams) {\n    super();\n    this._params = params;\n    this._fixtureRunner = new FixtureRunner();\n  }\n\n  stop(): Promise<void> {\n    if (!this._isStopped) {\n      this._isStopped = true;\n\n      // Interrupt current action.\n      this._currentDeadlineRunner?.setDeadline(0);\n\n      // TODO: mark test as 'interrupted' instead.\n      if (this._currentTest && this._currentTest.testInfo.status === 'passed')\n        this._currentTest.testInfo.status = 'skipped';\n    }\n    return this._runFinished;\n  }\n\n  async cleanup() {\n    // We have to load the project to get the right deadline below.\n    await this._loadIfNeeded();\n    // TODO: separate timeout for teardown?\n    const result = await raceAgainstDeadline((async () => {\n      await this._fixtureRunner.teardownScope('test');\n      await this._fixtureRunner.teardownScope('worker');\n    })(), this._deadline());\n    if (result.timedOut)\n      throw new Error(`Timeout of ${this._project.config.timeout}ms exceeded while shutting down environment`);\n  }\n\n  unhandledError(error: Error | any) {\n    if (this._currentTest && this._currentTest.type === 'test') {\n      if (!this._currentTest.testInfo.error) {\n        this._currentTest.testInfo.status = 'failed';\n        this._currentTest.testInfo.error = serializeError(error);\n      }\n    } else {\n      // No current test - fatal error.\n      if (!this._fatalError)\n        this._fatalError = serializeError(error);\n    }\n    this.stop();\n  }\n\n  private _deadline() {\n    return this._project.config.timeout ? monotonicTime() + this._project.config.timeout : undefined;\n  }\n\n  private async _loadIfNeeded() {\n    if (this._loader)\n      return;\n\n    this._loader = await Loader.deserialize(this._params.loader);\n    this._project = this._loader.projects()[this._params.projectIndex];\n\n    this._projectNamePathSegment = sanitizeForFilePath(this._project.config.name);\n\n    const sameName = this._loader.projects().filter(project => project.config.name === this._project.config.name);\n    if (sameName.length > 1)\n      this._uniqueProjectNamePathSegment = this._project.config.name + (sameName.indexOf(this._project) + 1);\n    else\n      this._uniqueProjectNamePathSegment = this._project.config.name;\n    this._uniqueProjectNamePathSegment = sanitizeForFilePath(this._uniqueProjectNamePathSegment);\n\n    this._workerInfo = {\n      workerIndex: this._params.workerIndex,\n      project: this._project.config,\n      config: this._loader.fullConfig(),\n    };\n  }\n\n  async run(runPayload: RunPayload) {\n    let runFinishedCalback = () => {};\n    this._runFinished = new Promise(f => runFinishedCalback = f);\n    try {\n      this._entries = new Map(runPayload.entries.map(e => [ e.testId, e ]));\n      await this._loadIfNeeded();\n      const fileSuite = await this._loader.loadTestFile(runPayload.file);\n      let anyPool: FixturePool | undefined;\n      const suite = this._project.cloneFileSuite(fileSuite, this._params.repeatEachIndex, test => {\n        if (!this._entries.has(test._id))\n          return false;\n        anyPool = test._pool;\n        return true;\n      });\n      if (suite && anyPool) {\n        this._fixtureRunner.setPool(anyPool);\n        await this._runSuite(suite, []);\n      }\n    } catch (e) {\n      // In theory, we should run above code without any errors.\n      // However, in the case we screwed up, or loadTestFile failed in the worker\n      // but not in the runner, let's do a fatal error.\n      this.unhandledError(e);\n    } finally {\n      this._reportDone();\n      runFinishedCalback();\n    }\n  }\n\n  private async _runSuite(suite: Suite, annotations: Annotations) {\n    // When stopped, do not run a suite. But if we have started running the suite with hooks,\n    // always finish the hooks.\n    if (this._isStopped)\n      return;\n    annotations = annotations.concat(suite._annotations);\n\n    for (const beforeAllModifier of suite._modifiers) {\n      if (!this._fixtureRunner.dependsOnWorkerFixturesOnly(beforeAllModifier.fn, beforeAllModifier.location))\n        continue;\n      // TODO: separate timeout for beforeAll modifiers?\n      const result = await raceAgainstDeadline(this._fixtureRunner.resolveParametersAndRunHookOrTest(beforeAllModifier.fn, this._workerInfo, undefined), this._deadline());\n      if (result.timedOut) {\n        this._fatalError = serializeError(new Error(`Timeout of ${this._project.config.timeout}ms exceeded while running ${beforeAllModifier.type} modifier`));\n        this.stop();\n      }\n      if (!!result.result)\n        annotations.push({ type: beforeAllModifier.type, description: beforeAllModifier.description });\n    }\n\n    for (const hook of suite._allHooks) {\n      if (hook._type !== 'beforeAll')\n        continue;\n      const firstTest = suite.allTests()[0];\n      await this._runTestOrAllHook(hook, annotations, this._entries.get(firstTest._id)?.retry || 0);\n    }\n    for (const entry of suite._entries) {\n      if (entry instanceof Suite) {\n        await this._runSuite(entry, annotations);\n      } else {\n        const runEntry = this._entries.get(entry._id);\n        if (runEntry && !this._isStopped)\n          await this._runTestOrAllHook(entry, annotations, runEntry.retry);\n      }\n    }\n    for (const hook of suite._allHooks) {\n      if (hook._type !== 'afterAll')\n        continue;\n      await this._runTestOrAllHook(hook, annotations, 0);\n    }\n  }\n\n  private async _runTestOrAllHook(test: TestCase, annotations: Annotations, retry: number) {\n    const reportEvents = test._type === 'test';\n    const startTime = monotonicTime();\n    const startWallTime = Date.now();\n    let deadlineRunner: DeadlineRunner<any> | undefined;\n    const testId = test._id;\n\n    const baseOutputDir = (() => {\n      const relativeTestFilePath = path.relative(this._project.config.testDir, test._requireFile.replace(/\\.(spec|test)\\.(js|ts|mjs)$/, ''));\n      const sanitizedRelativePath = relativeTestFilePath.replace(process.platform === 'win32' ? new RegExp('\\\\\\\\', 'g') : new RegExp('/', 'g'), '-');\n      let testOutputDir = sanitizedRelativePath + '-' + sanitizeForFilePath(test.title);\n      if (this._uniqueProjectNamePathSegment)\n        testOutputDir += '-' + this._uniqueProjectNamePathSegment;\n      if (retry)\n        testOutputDir += '-retry' + retry;\n      if (this._params.repeatEachIndex)\n        testOutputDir += '-repeat' + this._params.repeatEachIndex;\n      return path.join(this._project.config.outputDir, testOutputDir);\n    })();\n\n    let testFinishedCallback = () => {};\n    let lastStepId = 0;\n    const testInfo: TestInfoImpl = {\n      workerIndex: this._params.workerIndex,\n      project: this._project.config,\n      config: this._loader.fullConfig(),\n      title: test.title,\n      file: test.location.file,\n      line: test.location.line,\n      column: test.location.column,\n      fn: test.fn,\n      repeatEachIndex: this._params.repeatEachIndex,\n      retry,\n      expectedStatus: test.expectedStatus,\n      annotations: [],\n      attachments: [],\n      duration: 0,\n      status: 'passed',\n      stdout: [],\n      stderr: [],\n      timeout: this._project.config.timeout,\n      snapshotSuffix: '',\n      outputDir: baseOutputDir,\n      outputPath: (...pathSegments: string[]): string => {\n        fs.mkdirSync(baseOutputDir, { recursive: true });\n        return path.join(baseOutputDir, ...pathSegments);\n      },\n      snapshotPath: (snapshotName: string): string => {\n        let suffix = '';\n        if (this._projectNamePathSegment)\n          suffix += '-' + this._projectNamePathSegment;\n        if (testInfo.snapshotSuffix)\n          suffix += '-' + testInfo.snapshotSuffix;\n        const ext = path.extname(snapshotName);\n        if (ext)\n          snapshotName = sanitizeForFilePath(snapshotName.substring(0, snapshotName.length - ext.length)) + suffix + ext;\n        else\n          snapshotName = sanitizeForFilePath(snapshotName) + suffix;\n        return path.join(test._requireFile + '-snapshots', snapshotName);\n      },\n      skip: (...args: [arg?: any, description?: string]) => modifier(testInfo, 'skip', args),\n      fixme: (...args: [arg?: any, description?: string]) => modifier(testInfo, 'fixme', args),\n      fail: (...args: [arg?: any, description?: string]) => modifier(testInfo, 'fail', args),\n      slow: (...args: [arg?: any, description?: string]) => modifier(testInfo, 'slow', args),\n      setTimeout: (timeout: number) => {\n        testInfo.timeout = timeout;\n        if (deadlineRunner)\n          deadlineRunner.setDeadline(deadline());\n      },\n      _testFinished: new Promise(f => testFinishedCallback = f),\n      _addStep: (category: string, title: string) => {\n        const stepId = `${category}@${title}@${++lastStepId}`;\n        const payload: StepBeginPayload = {\n          testId,\n          stepId,\n          category,\n          title,\n          wallTime: Date.now()\n        };\n        if (reportEvents)\n          this.emit('stepBegin', payload);\n        let callbackHandled = false;\n        return (error?: Error | TestError) => {\n          if (callbackHandled)\n            return;\n          callbackHandled = true;\n          if (error instanceof Error)\n            error = serializeError(error);\n          const payload: StepEndPayload = {\n            testId,\n            stepId,\n            wallTime: Date.now(),\n            error\n          };\n          if (reportEvents)\n            this.emit('stepEnd', payload);\n        };\n      },\n    };\n\n    // Inherit test.setTimeout() from parent suites.\n    for (let suite = test.parent; suite; suite = suite.parent) {\n      if (suite._timeout !== undefined) {\n        testInfo.setTimeout(suite._timeout);\n        break;\n      }\n    }\n\n    // Process annotations defined on parent suites.\n    for (const annotation of annotations) {\n      testInfo.annotations.push(annotation);\n      switch (annotation.type) {\n        case 'fixme':\n        case 'skip':\n          testInfo.expectedStatus = 'skipped';\n          break;\n        case 'fail':\n          if (testInfo.expectedStatus !== 'skipped')\n            testInfo.expectedStatus = 'failed';\n          break;\n        case 'slow':\n          testInfo.setTimeout(testInfo.timeout * 3);\n          break;\n      }\n    }\n\n    this._currentTest = { testInfo, testId, type: test._type };\n    setCurrentTestInfo(testInfo);\n\n    const deadline = () => {\n      return testInfo.timeout ? startTime + testInfo.timeout : undefined;\n    };\n\n    if (reportEvents)\n      this.emit('testBegin', buildTestBeginPayload(testId, testInfo, startWallTime));\n\n    if (testInfo.expectedStatus === 'skipped') {\n      testInfo.status = 'skipped';\n      if (reportEvents)\n        this.emit('testEnd', buildTestEndPayload(testId, testInfo));\n      return;\n    }\n\n    // Update the fixture pool - it may differ between tests, but only in test-scoped fixtures.\n    this._fixtureRunner.setPool(test._pool!);\n\n    this._currentDeadlineRunner = deadlineRunner = new DeadlineRunner(this._runTestWithBeforeHooks(test, testInfo), deadline());\n    const result = await deadlineRunner.result;\n    // Do not overwrite test failure upon hook timeout.\n    if (result.timedOut && testInfo.status === 'passed')\n      testInfo.status = 'timedOut';\n    testFinishedCallback();\n\n    if (!result.timedOut) {\n      this._currentDeadlineRunner = deadlineRunner = new DeadlineRunner(this._runAfterHooks(test, testInfo), deadline());\n      deadlineRunner.setDeadline(deadline());\n      const hooksResult = await deadlineRunner.result;\n      // Do not overwrite test failure upon hook timeout.\n      if (hooksResult.timedOut && testInfo.status === 'passed')\n        testInfo.status = 'timedOut';\n    } else {\n      // A timed-out test gets a full additional timeout to run after hooks.\n      const newDeadline = this._deadline();\n      this._currentDeadlineRunner = deadlineRunner = new DeadlineRunner(this._runAfterHooks(test, testInfo), newDeadline);\n      await deadlineRunner.result;\n    }\n\n    this._currentDeadlineRunner = undefined;\n    testInfo.duration = monotonicTime() - startTime;\n    if (reportEvents)\n      this.emit('testEnd', buildTestEndPayload(testId, testInfo));\n\n    const isFailure = testInfo.status === 'timedOut' || (testInfo.status === 'failed' && testInfo.expectedStatus !== 'failed');\n    const preserveOutput = this._loader.fullConfig().preserveOutput === 'always' ||\n      (this._loader.fullConfig().preserveOutput === 'failures-only' && isFailure);\n    if (!preserveOutput)\n      await removeFolderAsync(testInfo.outputDir).catch(e => {});\n\n    this._currentTest = null;\n    setCurrentTestInfo(null);\n\n    if (testInfo.status !== 'passed' && testInfo.status !== 'skipped') {\n      if (test._type === 'test')\n        this._failedTestId = testId;\n      else\n        this._fatalError = testInfo.error;\n      this.stop();\n    }\n  }\n\n  private async _runBeforeHooks(test: TestCase, testInfo: TestInfoImpl) {\n    try {\n      const beforeEachModifiers: Modifier[] = [];\n      for (let s = test.parent; s; s = s.parent) {\n        const modifiers = s._modifiers.filter(modifier => !this._fixtureRunner.dependsOnWorkerFixturesOnly(modifier.fn, modifier.location));\n        beforeEachModifiers.push(...modifiers.reverse());\n      }\n      beforeEachModifiers.reverse();\n      for (const modifier of beforeEachModifiers) {\n        const result = await this._fixtureRunner.resolveParametersAndRunHookOrTest(modifier.fn, this._workerInfo, testInfo);\n        testInfo[modifier.type](!!result, modifier.description!);\n      }\n      await this._runHooks(test.parent!, 'beforeEach', testInfo);\n    } catch (error) {\n      if (error instanceof SkipError) {\n        if (testInfo.status === 'passed')\n          testInfo.status = 'skipped';\n      } else {\n        testInfo.status = 'failed';\n        testInfo.error = serializeError(error);\n      }\n      // Continue running afterEach hooks even after the failure.\n    }\n  }\n\n  private async _runTestWithBeforeHooks(test: TestCase, testInfo: TestInfoImpl) {\n    const completeStep = testInfo._addStep('hook', 'Before Hooks');\n    if (test._type === 'test')\n      await this._runBeforeHooks(test, testInfo);\n\n    // Do not run the test when beforeEach hook fails.\n    if (testInfo.status === 'failed' || testInfo.status === 'skipped') {\n      completeStep?.(testInfo.error);\n      return;\n    }\n\n    try {\n      await this._fixtureRunner.resolveParametersAndRunHookOrTest(test.fn, this._workerInfo, testInfo, completeStep);\n    } catch (error) {\n      if (error instanceof SkipError) {\n        if (testInfo.status === 'passed')\n          testInfo.status = 'skipped';\n      } else {\n        // We might fail after the timeout, e.g. due to fixture teardown.\n        // Do not overwrite the timeout status.\n        if (testInfo.status === 'passed')\n          testInfo.status = 'failed';\n        // Keep the error even in the case of timeout, if there was no error before.\n        if (!('error' in  testInfo))\n          testInfo.error = serializeError(error);\n      }\n    } finally {\n      completeStep?.(testInfo.error);\n    }\n  }\n\n  private async _runAfterHooks(test: TestCase, testInfo: TestInfoImpl) {\n    let completeStep: CompleteStepCallback | undefined;\n    let teardownError: TestError | undefined;\n    try {\n      completeStep = testInfo._addStep('hook', 'After Hooks');\n      if (test._type === 'test')\n        await this._runHooks(test.parent!, 'afterEach', testInfo);\n    } catch (error) {\n      if (!(error instanceof SkipError)) {\n        if (testInfo.status === 'passed')\n          testInfo.status = 'failed';\n        // Do not overwrite test failure error.\n        if (!('error' in  testInfo))\n          testInfo.error = serializeError(error);\n        // Continue running even after the failure.\n      }\n    }\n    try {\n      await this._fixtureRunner.teardownScope('test');\n    } catch (error) {\n      if (testInfo.status === 'passed')\n        testInfo.status = 'failed';\n      // Do not overwrite test failure error.\n      if (!('error' in  testInfo)) {\n        testInfo.error = serializeError(error);\n        teardownError = testInfo.error;\n      }\n    }\n    completeStep?.(teardownError);\n  }\n\n  private async _runHooks(suite: Suite, type: 'beforeEach' | 'afterEach', testInfo: TestInfo) {\n    const all = [];\n    for (let s: Suite | undefined = suite; s; s = s.parent) {\n      const funcs = s._eachHooks.filter(e => e.type === type).map(e => e.fn);\n      all.push(...funcs.reverse());\n    }\n    if (type === 'beforeEach')\n      all.reverse();\n    let error: Error | undefined;\n    for (const hook of all) {\n      try {\n        await this._fixtureRunner.resolveParametersAndRunHookOrTest(hook, this._workerInfo, testInfo);\n      } catch (e) {\n        // Always run all the hooks, and capture the first error.\n        error = error || e;\n      }\n    }\n    if (error)\n      throw error;\n  }\n\n  private _reportDone() {\n    const donePayload: DonePayload = {\n      failedTestId: this._failedTestId,\n      fatalError: this._fatalError,\n    };\n    this.emit('done', donePayload);\n  }\n}\n\nfunction buildTestBeginPayload(testId: string, testInfo: TestInfo, startWallTime: number): TestBeginPayload {\n  return {\n    testId,\n    workerIndex: testInfo.workerIndex,\n    startWallTime,\n  };\n}\n\nfunction buildTestEndPayload(testId: string, testInfo: TestInfo): TestEndPayload {\n  return {\n    testId,\n    duration: testInfo.duration,\n    status: testInfo.status!,\n    error: testInfo.error,\n    expectedStatus: testInfo.expectedStatus,\n    annotations: testInfo.annotations,\n    timeout: testInfo.timeout,\n    attachments: testInfo.attachments.map(a => ({\n      name: a.name,\n      contentType: a.contentType,\n      path: a.path,\n      body: a.body?.toString('base64')\n    }))\n  };\n}\n\nfunction modifier(testInfo: TestInfo, type: 'skip' | 'fail' | 'fixme' | 'slow', modifierArgs: [arg?: any, description?: string]) {\n  if (typeof modifierArgs[1] === 'function') {\n    throw new Error([\n      'It looks like you are calling test.skip() inside the test and pass a callback.',\n      'Pass a condition instead and optional description instead:',\n      `test('my test', async ({ page, isMobile }) => {`,\n      `  test.skip(isMobile, 'This test is not applicable on mobile');`,\n      `});`,\n    ].join('\\n'));\n  }\n\n  if (modifierArgs.length >= 1 && !modifierArgs[0])\n    return;\n\n  const description = modifierArgs[1];\n  testInfo.annotations.push({ type, description });\n  if (type === 'slow') {\n    testInfo.setTimeout(testInfo.timeout * 3);\n  } else if (type === 'skip' || type === 'fixme') {\n    testInfo.expectedStatus = 'skipped';\n    throw new SkipError('Test is skipped: ' + (description || ''));\n  } else if (type === 'fail') {\n    if (testInfo.expectedStatus !== 'skipped')\n      testInfo.expectedStatus = 'failed';\n  }\n}\n\nclass SkipError extends Error {\n}\n"],"file":"workerRunner.js"}