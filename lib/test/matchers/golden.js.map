{"version":3,"sources":["../../../src/test/matchers/golden.ts"],"names":["PNG","require","resolve","paths","extensionToMimeType","GoldenComparators","compareBuffers","compareImages","compareText","actualBuffer","expectedBuffer","mimeType","Buffer","errorMessage","compare","options","actual","sync","read","jpeg","decode","expected","width","height","diff","count","data","threshold","write","toString","dmp","diff_match_patch","d","diff_main","diff_cleanupSemantic","diff_prettyTerminal","name","snapshotPath","outputPath","updateSnapshots","withNegateComparison","snapshotFile","outputFile","expectedPath","addSuffix","actualPath","diffPath","fs","existsSync","isWriteMissingMode","commonMissingSnapshotMessage","message","pass","mkdirSync","path","dirname","recursive","writeFileSync","console","log","readFileSync","extension","extname","substring","comparator","result","colors","red","indent","join","output","push","yellow","lines","tab","replace","filePath","suffix","customExtension","ext","basename","diffs","html","x","length","op","text","DIFF_INSERT","green","DIFF_DELETE","strikethrough","DIFF_EQUAL"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\nimport colors from 'colors/safe';\nimport fs from 'fs';\nimport path from 'path';\nimport jpeg from 'jpeg-js';\nimport pixelmatch from 'pixelmatch';\nimport { diff_match_patch, DIFF_INSERT, DIFF_DELETE, DIFF_EQUAL } from '../../third_party/diff_match_patch';\nimport { UpdateSnapshots } from '../types';\n\n// Note: we require the pngjs version of pixelmatch to avoid version mismatches.\nconst { PNG } = require(require.resolve('pngjs', { paths: [require.resolve('pixelmatch')] }));\n\nconst extensionToMimeType: { [key: string]: string } = {\n  'dat': 'application/octet-string',\n  'jpeg': 'image/jpeg',\n  'jpg': 'image/jpeg',\n  'png': 'image/png',\n  'txt': 'text/plain',\n};\n\nconst GoldenComparators: { [key: string]: any } = {\n  'application/octet-string': compareBuffers,\n  'image/png': compareImages,\n  'image/jpeg': compareImages,\n  'text/plain': compareText,\n};\n\nfunction compareBuffers(actualBuffer: Buffer | string, expectedBuffer: Buffer, mimeType: string): { diff?: object; errorMessage?: string; } | null {\n  if (!actualBuffer || !(actualBuffer instanceof Buffer))\n    return { errorMessage: 'Actual result should be Buffer.' };\n  if (Buffer.compare(actualBuffer, expectedBuffer))\n    return { errorMessage: 'Buffers differ' };\n  return null;\n}\n\nfunction compareImages(actualBuffer: Buffer | string, expectedBuffer: Buffer, mimeType: string, options = {}): { diff?: object; errorMessage?: string; } | null {\n  if (!actualBuffer || !(actualBuffer instanceof Buffer))\n    return { errorMessage: 'Actual result should be Buffer.' };\n\n  const actual = mimeType === 'image/png' ? PNG.sync.read(actualBuffer) : jpeg.decode(actualBuffer);\n  const expected = mimeType === 'image/png' ? PNG.sync.read(expectedBuffer) : jpeg.decode(expectedBuffer);\n  if (expected.width !== actual.width || expected.height !== actual.height) {\n    return {\n      errorMessage: `Sizes differ; expected image ${expected.width}px X ${expected.height}px, but got ${actual.width}px X ${actual.height}px. `\n    };\n  }\n  const diff = new PNG({ width: expected.width, height: expected.height });\n  const count = pixelmatch(expected.data, actual.data, diff.data, expected.width, expected.height, { threshold: 0.2, ...options });\n  return count > 0 ? { diff: PNG.sync.write(diff) } : null;\n}\n\nfunction compareText(actual: Buffer | string, expectedBuffer: Buffer): { diff?: object; errorMessage?: string; diffExtension?: string; } | null {\n  if (typeof actual !== 'string')\n    return { errorMessage: 'Actual result should be string' };\n  const expected = expectedBuffer.toString('utf-8');\n  if (expected === actual)\n    return null;\n  const dmp = new diff_match_patch();\n  const d = dmp.diff_main(expected, actual);\n  dmp.diff_cleanupSemantic(d);\n  return {\n    errorMessage: diff_prettyTerminal(d)\n  };\n}\n\nexport function compare(\n  actual: Buffer | string,\n  name: string,\n  snapshotPath: (name: string) => string,\n  outputPath: (name: string) => string,\n  updateSnapshots: UpdateSnapshots,\n  withNegateComparison: boolean,\n  options?: { threshold?: number }\n): { pass: boolean; message?: string; expectedPath?: string, actualPath?: string, diffPath?: string, mimeType?: string } {\n  const snapshotFile = snapshotPath(name);\n  const outputFile = outputPath(name);\n  const expectedPath = addSuffix(outputFile, '-expected');\n  const actualPath = addSuffix(outputFile, '-actual');\n  const diffPath = addSuffix(outputFile, '-diff');\n\n  if (!fs.existsSync(snapshotFile)) {\n    const isWriteMissingMode = updateSnapshots === 'all' || updateSnapshots === 'missing';\n    const commonMissingSnapshotMessage = `${snapshotFile} is missing in snapshots`;\n    if (withNegateComparison) {\n      const message = `${commonMissingSnapshotMessage}${isWriteMissingMode ? ', matchers using \".not\" won\\'t write them automatically.' : '.'}`;\n      return { pass: true , message };\n    }\n    if (isWriteMissingMode) {\n      fs.mkdirSync(path.dirname(snapshotFile), { recursive: true });\n      fs.writeFileSync(snapshotFile, actual);\n      fs.writeFileSync(actualPath, actual);\n    }\n    const message = `${commonMissingSnapshotMessage}${isWriteMissingMode ? ', writing actual.' : '.'}`;\n    if (updateSnapshots === 'all') {\n      console.log(message);\n      return { pass: true, message };\n    }\n    return { pass: false, message };\n  }\n\n  const expected = fs.readFileSync(snapshotFile);\n  const extension = path.extname(snapshotFile).substring(1);\n  const mimeType = extensionToMimeType[extension] || 'application/octet-string';\n  const comparator = GoldenComparators[mimeType];\n  if (!comparator) {\n    return {\n      pass: false,\n      message: 'Failed to find comparator with type ' + mimeType + ': ' + snapshotFile,\n    };\n  }\n\n  const result = comparator(actual, expected, mimeType, options);\n  if (!result) {\n    if (withNegateComparison) {\n      const message = [\n        colors.red('Snapshot comparison failed:'),\n        '',\n        indent('Expected result should be different from the actual one.', '  '),\n      ].join('\\n');\n      return {\n        pass: true,\n        message,\n      };\n    }\n\n    return { pass: true };\n  }\n\n  if (withNegateComparison) {\n    return {\n      pass: false,\n    };\n  }\n\n  if (updateSnapshots === 'all') {\n    fs.mkdirSync(path.dirname(snapshotFile), { recursive: true });\n    fs.writeFileSync(snapshotFile, actual);\n    console.log(snapshotFile + ' does not match, writing actual.');\n    return {\n      pass: true,\n      message: snapshotFile + ' running with --update-snapshots, writing actual.'\n    };\n  }\n\n  fs.writeFileSync(expectedPath, expected);\n  fs.writeFileSync(actualPath, actual);\n  if (result.diff)\n    fs.writeFileSync(diffPath, result.diff);\n\n  const output = [\n    colors.red(`Snapshot comparison failed:`),\n  ];\n  if (result.errorMessage) {\n    output.push('');\n    output.push(indent(result.errorMessage, '  '));\n  }\n  output.push('');\n  output.push(`Expected: ${colors.yellow(expectedPath)}`);\n  output.push(`Received: ${colors.yellow(actualPath)}`);\n  if (result.diff)\n    output.push(`    Diff: ${colors.yellow(diffPath)}`);\n\n  return {\n    pass: false,\n    message: output.join('\\n'),\n    expectedPath,\n    actualPath,\n    diffPath,\n    mimeType\n  };\n}\n\nfunction indent(lines: string, tab: string) {\n  return lines.replace(/^(?=.+$)/gm, tab);\n}\n\nfunction addSuffix(filePath: string, suffix: string, customExtension?: string): string {\n  const dirname = path.dirname(filePath);\n  const ext = path.extname(filePath);\n  const name = path.basename(filePath, ext);\n  return path.join(dirname, name + suffix + (customExtension || ext));\n}\n\nfunction diff_prettyTerminal(diffs: diff_match_patch.Diff[]) {\n  const html = [];\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];    // Operation (insert, delete, equal)\n    const data = diffs[x][1];  // Text of change.\n    const text = data;\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = colors.green(text);\n        break;\n      case DIFF_DELETE:\n        html[x] = colors.strikethrough(colors.red(text));\n        break;\n      case DIFF_EQUAL:\n        html[x] = text;\n        break;\n    }\n  }\n  return html.join('');\n}\n"],"file":"golden.js"}