{"version":3,"sources":["../../../src/test/matchers/toMatchSnapshot.ts"],"names":["toMatchSnapshot","received","nameOrOptions","optOptions","options","testInfo","Error","name","projectThreshold","project","expect","threshold","undefined","withNegateComparison","isNot","pass","message","expectedPath","actualPath","diffPath","mimeType","snapshotPath","outputPath","config","updateSnapshots","contentType","attachments","push","path"],"mappings":";;;;;;;AAiBA;;AACA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOO,SAASA,eAAT,CAA+DC,QAA/D,EAA0FC,aAA1F,EAAwJC,UAAkC,GAAG,EAA7L,EAAwN;AAAA;;AAC7N,MAAIC,OAAJ;AACA,QAAMC,QAAQ,GAAG,+BAAjB;AACA,MAAI,CAACA,QAAL,EACE,MAAM,IAAIC,KAAJ,CAAW,kDAAX,CAAN;AACF,MAAI,OAAOJ,aAAP,KAAyB,QAA7B,EACEE,OAAO,GAAG;AAAEG,IAAAA,IAAI,EAAEL,aAAR;AAAuB,OAAGC;AAA1B,GAAV,CADF,KAGEC,OAAO,GAAG,EAAE,GAAGF;AAAL,GAAV;AACF,MAAI,CAACE,OAAO,CAACG,IAAb,EACE,MAAM,IAAID,KAAJ,CAAW,+CAAX,CAAN;AAEF,QAAME,gBAAgB,4BAAGH,QAAQ,CAACI,OAAT,CAAiBC,MAApB,oFAAG,sBAAyBV,eAA5B,2DAAG,uBAA0CW,SAAnE;AACA,MAAIP,OAAO,CAACO,SAAR,KAAsBC,SAAtB,IAAmCJ,gBAAgB,KAAKI,SAA5D,EACER,OAAO,CAACO,SAAR,GAAoBH,gBAApB;AAEF,QAAMK,oBAAoB,GAAG,KAAKC,KAAlC;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA,UAA/B;AAA2CC,IAAAA,QAA3C;AAAqDC,IAAAA;AAArD,MAAkE,qBACpEnB,QADoE,EAEpEG,OAAO,CAACG,IAF4D,EAGpEF,QAAQ,CAACgB,YAH2D,EAIpEhB,QAAQ,CAACiB,UAJ2D,EAKpEjB,QAAQ,CAACkB,MAAT,CAAgBC,eALoD,EAMpEX,oBANoE,EAOpET,OAPoE,CAAxE;AASA,QAAMqB,WAAW,GAAGL,QAAQ,IAAI,0BAAhC;AACA,MAAIH,YAAJ,EACEZ,QAAQ,CAACqB,WAAT,CAAqBC,IAArB,CAA0B;AAAEpB,IAAAA,IAAI,EAAE,UAAR;AAAoBkB,IAAAA,WAApB;AAAiCG,IAAAA,IAAI,EAAEX;AAAvC,GAA1B;AACF,MAAIC,UAAJ,EACEb,QAAQ,CAACqB,WAAT,CAAqBC,IAArB,CAA0B;AAAEpB,IAAAA,IAAI,EAAE,QAAR;AAAkBkB,IAAAA,WAAlB;AAA+BG,IAAAA,IAAI,EAAEV;AAArC,GAA1B;AACF,MAAIC,QAAJ,EACEd,QAAQ,CAACqB,WAAT,CAAqBC,IAArB,CAA0B;AAAEpB,IAAAA,IAAI,EAAE,MAAR;AAAgBkB,IAAAA,WAAhB;AAA6BG,IAAAA,IAAI,EAAET;AAAnC,GAA1B;AACF,SAAO;AAAEJ,IAAAA,IAAF;AAAQC,IAAAA,OAAO,EAAE,MAAMA,OAAO,IAAI;AAAlC,GAAP;AACD","sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Expect } from '../types';\nimport { currentTestInfo } from '../globals';\nimport { compare } from './golden';\nimport { SyncExpectationResult } from 'expect/build/types';\n\nexport function toMatchSnapshot(this: ReturnType<Expect['getState']>, received: Buffer | string, nameOrOptions: string | { name: string, threshold?: number }, optOptions: { threshold?: number } = {}): SyncExpectationResult {\n  let options: { name: string, threshold?: number };\n  const testInfo = currentTestInfo();\n  if (!testInfo)\n    throw new Error(`toMatchSnapshot() must be called during the test`);\n  if (typeof nameOrOptions === 'string')\n    options = { name: nameOrOptions, ...optOptions };\n  else\n    options = { ...nameOrOptions };\n  if (!options.name)\n    throw new Error(`toMatchSnapshot() requires a \"name\" parameter`);\n\n  const projectThreshold = testInfo.project.expect?.toMatchSnapshot?.threshold;\n  if (options.threshold === undefined && projectThreshold !== undefined)\n    options.threshold = projectThreshold;\n\n  const withNegateComparison = this.isNot;\n  const { pass, message, expectedPath, actualPath, diffPath, mimeType } = compare(\n      received,\n      options.name,\n      testInfo.snapshotPath,\n      testInfo.outputPath,\n      testInfo.config.updateSnapshots,\n      withNegateComparison,\n      options\n  );\n  const contentType = mimeType || 'application/octet-stream';\n  if (expectedPath)\n    testInfo.attachments.push({ name: 'expected', contentType, path: expectedPath });\n  if (actualPath)\n    testInfo.attachments.push({ name: 'actual', contentType, path: actualPath });\n  if (diffPath)\n    testInfo.attachments.push({ name: 'diff', contentType, path: diffPath });\n  return { pass, message: () => message || '' };\n}\n"],"file":"toMatchSnapshot.js"}