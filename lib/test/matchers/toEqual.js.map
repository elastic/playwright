{"version":3,"sources":["../../../src/test/matchers/toEqual.ts"],"names":["EXPECTED_LABEL","RECEIVED_LABEL","isExpand","expand","toEqual","matcherName","receiver","receiverType","query","expected","options","testInfo","Error","matcherOptions","comment","isNot","promise","received","undefined","pass","remainingTime","iterableEquality","timeout","_testFinished","message","actual","name"],"mappings":";;;;;;;AAgBA;;AACA;;AAGA;;AAOA;;AAEA;;AA7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiBA;AACA,MAAMA,cAAc,GAAG,UAAvB;AACA,MAAMC,cAAc,GAAG,UAAvB,C,CAEA;;AACA,MAAMC,QAAQ,GAAIC,MAAD,IAA+BA,MAAM,KAAK,KAA3D;;AAEO,eAAeC,OAAf,CAELC,WAFK,EAGLC,QAHK,EAILC,YAJK,EAKLC,KALK,EAMLC,QANK,EAOLC,OAA6B,GAAG,EAP3B,EAQL;AACA,QAAMC,QAAQ,GAAG,+BAAjB;AACA,MAAI,CAACA,QAAL,EACE,MAAM,IAAIC,KAAJ,CAAW,GAAEP,WAAY,iCAAzB,CAAN;AACF,wBAAWC,QAAX,EAAqBC,YAArB,EAAmCF,WAAnC;AAEA,QAAMQ,cAAkC,GAAG;AACzCC,IAAAA,OAAO,EAAE,eADgC;AAEzCC,IAAAA,KAAK,EAAE,KAAKA,KAF6B;AAGzCC,IAAAA,OAAO,EAAE,KAAKA;AAH2B,GAA3C;AAMA,MAAIC,QAAuB,GAAGC,SAA9B;AACA,MAAIC,IAAI,GAAG,KAAX,CAbA,CAeA;;AACA,QAAM,6BAAkBR,QAAlB,EAA4B,MAAMS,aAAN,IAAuB;AACvDH,IAAAA,QAAQ,GAAG,MAAMT,KAAK,CAACY,aAAD,CAAtB;AACAD,IAAAA,IAAI,GAAG,0BAAOF,QAAP,EAAiBR,QAAjB,EAA2B,CAACY,uBAAD,CAA3B,CAAP;AACA,WAAOF,IAAI,KAAK,CAACN,cAAc,CAACE,KAAhC;AACD,GAJK,EAIHL,OAAO,CAACY,OAJL,EAIcX,QAAQ,CAACY,aAJvB,CAAN;AAMA,QAAMC,OAAO,GAAGL,IAAI,GAChB,MACA,mCAAYd,WAAZ,EAAyBa,SAAzB,EAAoCA,SAApC,EAA+CL,cAA/C,IACA,MADA,GAEC,iBAAgB,qCAAcJ,QAAd,CAAwB,IAFzC,IAGC,iCAAUA,QAAV,MAAwB,iCAAUQ,QAAV,CAAxB,GACI,iBAAgB,qCAAcA,QAAd,CAAwB,EAD5C,GAEG,EALJ,CAFgB,GAQhB,MACA,mCAAYZ,WAAZ,EAAyBa,SAAzB,EAAoCA,SAApC,EAA+CL,cAA/C,IACA,MADA,GAEA,4CACIJ,QADJ,EAEIQ,QAFJ,EAGIjB,cAHJ,EAIIC,cAJJ,EAKIC,QAAQ,CAAC,KAAKC,MAAN,CALZ,CAXJ,CAtBA,CAyCA;AACA;AACA;;AACA,SAAO;AAAEsB,IAAAA,MAAM,EAAER,QAAV;AAAoBR,IAAAA,QAApB;AAA8Be,IAAAA,OAA9B;AAAuCE,IAAAA,IAAI,EAAErB,WAA7C;AAA0Dc,IAAAA;AAA1D,GAAP;AACD","sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { equals } from 'expect/build/jasmineUtils';\nimport {\n  iterableEquality\n} from 'expect/build/utils';\nimport {\n  matcherHint, MatcherHintOptions,\n  printDiffOrStringify,\n  printExpected,\n  printReceived,\n  stringify\n} from 'jest-matcher-utils';\nimport { currentTestInfo } from '../globals';\nimport type { Expect } from '../types';\nimport { expectType, pollUntilDeadline } from '../util';\n\n// Omit colon and one or more spaces, so can call getLabelPrinter.\nconst EXPECTED_LABEL = 'Expected';\nconst RECEIVED_LABEL = 'Received';\n\n// The optional property of matcher context is true if undefined.\nconst isExpand = (expand?: boolean): boolean => expand !== false;\n\nexport async function toEqual<T>(\n  this: ReturnType<Expect['getState']>,\n  matcherName: string,\n  receiver: any,\n  receiverType: string,\n  query: (timeout: number) => Promise<T>,\n  expected: T,\n  options: { timeout?: number } = {},\n) {\n  const testInfo = currentTestInfo();\n  if (!testInfo)\n    throw new Error(`${matcherName} must be called during the test`);\n  expectType(receiver, receiverType, matcherName);\n\n  const matcherOptions: MatcherHintOptions = {\n    comment: 'deep equality',\n    isNot: this.isNot,\n    promise: this.promise,\n  };\n\n  let received: T | undefined = undefined;\n  let pass = false;\n\n  // TODO: interrupt on timeout for nice message.\n  await pollUntilDeadline(testInfo, async remainingTime => {\n    received = await query(remainingTime);\n    pass = equals(received, expected, [iterableEquality]);\n    return pass === !matcherOptions.isNot;\n  }, options.timeout, testInfo._testFinished);\n\n  const message = pass\n    ? () =>\n      matcherHint(matcherName, undefined, undefined, matcherOptions) +\n      '\\n\\n' +\n      `Expected: not ${printExpected(expected)}\\n` +\n      (stringify(expected) !== stringify(received)\n        ? `Received:     ${printReceived(received)}`\n        : '')\n    : () =>\n      matcherHint(matcherName, undefined, undefined, matcherOptions) +\n      '\\n\\n' +\n      printDiffOrStringify(\n          expected,\n          received,\n          EXPECTED_LABEL,\n          RECEIVED_LABEL,\n          isExpand(this.expand),\n      );\n\n  // Passing the actual and expected objects so that a custom reporter\n  // could access them, for example in order to display a custom visual diff,\n  // or create a different error message\n  return { actual: received, expected, message, name: matcherName, pass };\n}\n"],"file":"toEqual.js"}