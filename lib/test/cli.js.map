{"version":3,"sources":["../../src/test/cli.ts"],"names":["defaultTimeout","defaultReporter","process","env","CI","tsConfig","jsConfig","mjsConfig","defaultConfig","preserveOutput","reporter","reportSlowTests","max","threshold","timeout","updateSnapshots","workers","Math","ceil","require","cpus","length","addTestCommand","program","command","description","option","builtInReporters","map","name","join","action","args","opts","runTests","e","console","error","exit","on","log","browser","browserOpt","toLowerCase","includes","Error","browserNames","projects","browserName","use","overrides","overridesFromOptions","headed","headless","runner","Runner","loadConfig","configFile","fs","existsSync","stdout","isTTY","loadedConfig","loadConfigFile","loadConfigFromDirectory","directory","configNames","configName","path","resolve","config","cwd","statSync","isDirectory","loadEmptyConfig","filePatternFilters","arg","match","exec","re","forceRegExp","line","parseInt","result","run","list","project","undefined","pattern","RegExp","options","isDebuggerAttached","url","shardPair","shard","split","t","forbidOnly","globalTimeout","grep","grepInvert","maxFailures","x","outputDir","output","quiet","repeatEach","retries","r","resolveReporter","current","total","id","localPath","paths"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\nimport * as commander from 'commander';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport type { Config } from './types';\nimport { Runner, builtInReporters, BuiltInReporter } from './runner';\nimport { stopProfiling, startProfiling } from './profiler';\nimport { FilePatternFilter } from './util';\n\nconst defaultTimeout = 30000;\nconst defaultReporter: BuiltInReporter = process.env.CI ? 'dot' : 'list';\nconst tsConfig = 'playwright.config.ts';\nconst jsConfig = 'playwright.config.js';\nconst mjsConfig = 'playwright.config.mjs';\nconst defaultConfig: Config = {\n  preserveOutput: 'always',\n  reporter: [ [defaultReporter] ],\n  reportSlowTests: { max: 5, threshold: 15000 },\n  timeout: defaultTimeout,\n  updateSnapshots: 'missing',\n  workers: Math.ceil(require('os').cpus().length / 2),\n};\n\nexport function addTestCommand(program: commander.CommanderStatic) {\n  const command = program.command('test [test-filter...]');\n  command.description('Run tests with Playwright Test');\n  command.option('--browser <browser>', `Browser to use for tests, one of \"all\", \"chromium\", \"firefox\" or \"webkit\" (default: \"chromium\")`);\n  command.option('--headed', `Run tests in headed browsers (default: headless)`);\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"${tsConfig}\"/\"${jsConfig}\"`);\n  command.option('--forbid-only', `Fail if test.only is called (default: false)`);\n  command.option('-g, --grep <grep>', `Only run tests matching this regular expression (default: \".*\")`);\n  command.option('-gv, --grep-invert <grep>', `Only run tests that do not match this regular expression`);\n  command.option('--global-timeout <timeout>', `Maximum time this test suite can run in milliseconds (default: unlimited)`);\n  command.option('-j, --workers <workers>', `Number of concurrent workers, use 1 to run in a single worker (default: number of CPU cores / 2)`);\n  command.option('--list', `Collect all the tests and report them, but do not run`);\n  command.option('--max-failures <N>', `Stop after the first N failures`);\n  command.option('--output <dir>', `Folder for output artifacts (default: \"test-results\")`);\n  command.option('--quiet', `Suppress stdio`);\n  command.option('--repeat-each <N>', `Run each test N times (default: 1)`);\n  command.option('--reporter <reporter>', `Reporter to use, comma-separated, can be ${builtInReporters.map(name => `\"${name}\"`).join(', ')} (default: \"${defaultReporter}\")`);\n  command.option('--retries <retries>', `Maximum retry count for flaky tests, zero for no retries (default: no retries)`);\n  command.option('--shard <shard>', `Shard tests and execute only the selected shard, specify in the form \"current/all\", 1-based, for example \"3/5\"`);\n  command.option('--project <project-name>', `Only run tests from the specified project (default: run all projects)`);\n  command.option('--timeout <timeout>', `Specify test timeout threshold in milliseconds, zero for unlimited (default: ${defaultTimeout})`);\n  command.option('-u, --update-snapshots', `Update snapshots with actual results (default: only create missing snapshots)`);\n  command.option('-x', `Stop after the first failure`);\n  command.action(async (args, opts) => {\n    try {\n      await runTests(args, opts);\n    } catch (e) {\n      console.error(e);\n      process.exit(1);\n    }\n  });\n  command.on('--help', () => {\n    console.log('');\n    console.log('Arguments [test-filter...]:');\n    console.log('  Pass arguments to filter test files. Each argument is treated as a regular expression.');\n    console.log('');\n    console.log('Examples:');\n    console.log('  $ test my.spec.ts');\n    console.log('  $ test --headed');\n    console.log('  $ test --browser=webkit');\n  });\n}\n\nasync function runTests(args: string[], opts: { [key: string]: any }) {\n  await startProfiling();\n\n  if (opts.browser) {\n    const browserOpt = opts.browser.toLowerCase();\n    if (!['all', 'chromium', 'firefox', 'webkit'].includes(browserOpt))\n      throw new Error(`Unsupported browser \"${opts.browser}\", must be one of \"all\", \"chromium\", \"firefox\" or \"webkit\"`);\n    const browserNames = browserOpt === 'all' ? ['chromium', 'firefox', 'webkit'] : [browserOpt];\n    defaultConfig.projects = browserNames.map(browserName => {\n      return {\n        name: browserName,\n        use: { browserName },\n      };\n    });\n  }\n\n  const overrides = overridesFromOptions(opts);\n  if (opts.headed)\n    overrides.use = { headless: false };\n  const runner = new Runner(defaultConfig, overrides);\n\n  async function loadConfig(configFile: string) {\n    if (fs.existsSync(configFile)) {\n      if (process.stdout.isTTY)\n        console.log(`Using config at ` + configFile);\n      const loadedConfig = await runner.loadConfigFile(configFile);\n      if (('projects' in loadedConfig) && opts.browser)\n        throw new Error(`Cannot use --browser option when configuration file defines projects. Specify browserName in the projects instead.`);\n      return true;\n    }\n    return false;\n  }\n\n  async function loadConfigFromDirectory(directory: string) {\n    const configNames = [tsConfig, jsConfig, mjsConfig];\n    for (const configName of configNames) {\n      if (await loadConfig(path.resolve(directory, configName)))\n        return true;\n    }\n    return false;\n  }\n\n  if (opts.config) {\n    const configFile = path.resolve(process.cwd(), opts.config);\n    if (!fs.existsSync(configFile))\n      throw new Error(`${opts.config} does not exist`);\n    if (fs.statSync(configFile).isDirectory()) {\n      // When passed a directory, look for a config file inside.\n      if (!await loadConfigFromDirectory(configFile)) {\n        // If there is no config, assume this as a root testing directory.\n        runner.loadEmptyConfig(configFile);\n      }\n    } else {\n      // When passed a file, it must be a config file.\n      await loadConfig(configFile);\n    }\n  } else if (!await loadConfigFromDirectory(process.cwd())) {\n    // No --config option, let's look for the config file in the current directory.\n    // If not, scan the world.\n    runner.loadEmptyConfig(process.cwd());\n  }\n\n  const filePatternFilters: FilePatternFilter[] = args.map(arg => {\n    const match = /^(.*):(\\d+)$/.exec(arg);\n    return {\n      re: forceRegExp(match ? match[1] : arg),\n      line: match ? parseInt(match[2], 10) : null,\n    };\n  });\n  const result = await runner.run(!!opts.list, filePatternFilters, opts.project || undefined);\n  await stopProfiling(undefined);\n\n  if (result === 'sigint')\n    process.exit(130);\n  process.exit(result === 'passed' ? 0 : 1);\n}\n\nfunction forceRegExp(pattern: string): RegExp {\n  const match = pattern.match(/^\\/(.*)\\/([gi]*)$/);\n  if (match)\n    return new RegExp(match[1], match[2]);\n  return new RegExp(pattern, 'gi');\n}\n\nfunction overridesFromOptions(options: { [key: string]: any }): Config {\n  const isDebuggerAttached = !!require('inspector').url();\n  const shardPair = options.shard ? options.shard.split('/').map((t: string) => parseInt(t, 10)) : undefined;\n  return {\n    forbidOnly: options.forbidOnly ? true : undefined,\n    globalTimeout: isDebuggerAttached ? 0 : (options.globalTimeout ? parseInt(options.globalTimeout, 10) : undefined),\n    grep: options.grep ? forceRegExp(options.grep) : undefined,\n    grepInvert: options.grepInvert ? forceRegExp(options.grepInvert) : undefined,\n    maxFailures: options.x ? 1 : (options.maxFailures ? parseInt(options.maxFailures, 10) : undefined),\n    outputDir: options.output ? path.resolve(process.cwd(), options.output) : undefined,\n    quiet: options.quiet ? options.quiet : undefined,\n    repeatEach: options.repeatEach ? parseInt(options.repeatEach, 10) : undefined,\n    retries: options.retries ? parseInt(options.retries, 10) : undefined,\n    reporter: (options.reporter && options.reporter.length) ? options.reporter.split(',').map((r: string) => [resolveReporter(r)]) : undefined,\n    shard: shardPair ? { current: shardPair[0], total: shardPair[1] } : undefined,\n    timeout: isDebuggerAttached ? 0 : (options.timeout ? parseInt(options.timeout, 10) : undefined),\n    updateSnapshots: options.updateSnapshots ? 'all' as const : undefined,\n    workers: options.workers ? parseInt(options.workers, 10) : undefined,\n  };\n}\n\nfunction resolveReporter(id: string) {\n  if (builtInReporters.includes(id as any))\n    return id;\n  const localPath = path.resolve(process.cwd(), id);\n  if (fs.existsSync(localPath))\n    return localPath;\n  return require.resolve(id, { paths: [ process.cwd() ] });\n}\n"],"file":"cli.js"}