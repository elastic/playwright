{"version":3,"sources":["../../../src/test/reporters/line.ts"],"names":["LineReporter","BaseReporter","_total","_current","_failures","_lastTest","onBegin","config","suite","allTests","length","console","log","onStdOut","chunk","test","result","_dumpToStdio","process","stdout","onStdErr","stderr","stream","quiet","write","colors","gray","onTestEnd","width","columns","title","substring","willRetry","ok","onEnd","epilogue"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport colors from 'colors/safe';\nimport { BaseReporter, formatFailure, formatTestTitle } from './base';\nimport { FullConfig, TestCase, Suite, TestResult, FullResult } from '../../../types/testReporter';\n\nclass LineReporter extends BaseReporter {\n  private _total = 0;\n  private _current = 0;\n  private _failures = 0;\n  private _lastTest: TestCase | undefined;\n\n  onBegin(config: FullConfig, suite: Suite) {\n    super.onBegin(config, suite);\n    this._total = suite.allTests().length;\n    console.log();\n  }\n\n  onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdOut(chunk, test, result);\n    this._dumpToStdio(test, chunk, process.stdout);\n  }\n\n  onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdErr(chunk, test, result);\n    this._dumpToStdio(test, chunk, process.stderr);\n  }\n\n  private _dumpToStdio(test: TestCase | undefined, chunk: string | Buffer, stream: NodeJS.WriteStream) {\n    if (this.config.quiet)\n      return;\n    stream.write(`\\u001B[1A\\u001B[2K`);\n    if (test && this._lastTest !== test) {\n      // Write new header for the output.\n      stream.write(colors.gray(formatTestTitle(this.config, test) + `\\n`));\n      this._lastTest = test;\n    }\n\n    stream.write(chunk);\n    console.log();\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    super.onTestEnd(test, result);\n    const width = process.stdout.columns! - 1;\n    const title = `[${++this._current}/${this._total}] ${formatTestTitle(this.config, test)}`.substring(0, width);\n    process.stdout.write(`\\u001B[1A\\u001B[2K${title}\\n`);\n    if (!this.willRetry(test, result) && !test.ok()) {\n      process.stdout.write(`\\u001B[1A\\u001B[2K`);\n      console.log(formatFailure(this.config, test, ++this._failures));\n      console.log();\n    }\n  }\n\n  async onEnd(result: FullResult) {\n    process.stdout.write(`\\u001B[1A\\u001B[2K`);\n    await super.onEnd(result);\n    this.epilogue(false);\n  }\n}\n\nexport default LineReporter;\n"],"file":"line.js"}