{"version":3,"sources":["../../../src/test/reporters/multiplexer.ts"],"names":["Multiplexer","constructor","reporters","_reporters","onBegin","config","suite","reporter","onTestBegin","test","result","onStdOut","chunk","onStdErr","onTestEnd","onEnd","onError","error","onStepBegin","step","onStepEnd"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIO,MAAMA,WAAN,CAAsC;AAG3CC,EAAAA,WAAW,CAACC,SAAD,EAAwB;AAAA,SAF3BC,UAE2B;AACjC,SAAKA,UAAL,GAAkBD,SAAlB;AACD;;AAEDE,EAAAA,OAAO,CAACC,MAAD,EAAqBC,KAArB,EAAmC;AACxC,SAAK,MAAMC,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,2BAAAI,QAAQ,CAACH,OAAT,6EAAAG,QAAQ,EAAWF,MAAX,EAAmBC,KAAnB,CAAR;AADF;AAED;;AAEDE,EAAAA,WAAW,CAACC,IAAD,EAAiBC,MAAjB,EAAqC;AAC9C,SAAK,MAAMH,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,+BAAAI,QAAQ,CAACC,WAAT,qFAAAD,QAAQ,EAAeE,IAAf,EAAqBC,MAArB,CAAR;AADF;AAED;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAyBH,IAAzB,EAA0CC,MAA1C,EAA+D;AACrE,SAAK,MAAMH,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,4BAAAI,QAAQ,CAACI,QAAT,+EAAAJ,QAAQ,EAAYK,KAAZ,EAAmBH,IAAnB,EAAyBC,MAAzB,CAAR;AADF;AAED;;AAEDG,EAAAA,QAAQ,CAACD,KAAD,EAAyBH,IAAzB,EAA0CC,MAA1C,EAA+D;AACrE,SAAK,MAAMH,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,4BAAAI,QAAQ,CAACM,QAAT,+EAAAN,QAAQ,EAAYK,KAAZ,EAAmBH,IAAnB,EAAyBC,MAAzB,CAAR;AADF;AAED;;AAEDI,EAAAA,SAAS,CAACL,IAAD,EAAiBC,MAAjB,EAAqC;AAC5C,SAAK,MAAMH,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,6BAAAI,QAAQ,CAACO,SAAT,iFAAAP,QAAQ,EAAaE,IAAb,EAAmBC,MAAnB,CAAR;AADF;AAED;;AAEU,QAALK,KAAK,CAACL,MAAD,EAAqB;AAC9B,SAAK,MAAMH,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,gCAAMI,QAAQ,CAACQ,KAAf,oDAAM,qBAAAR,QAAQ,EAASG,MAAT,CAAd;AADF;AAED;;AAEDM,EAAAA,OAAO,CAACC,KAAD,EAAmB;AACxB,SAAK,MAAMV,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,2BAAAI,QAAQ,CAACS,OAAT,6EAAAT,QAAQ,EAAWU,KAAX,CAAR;AADF;AAED;;AAEDC,EAAAA,WAAW,CAACT,IAAD,EAAiBC,MAAjB,EAAqCS,IAArC,EAAqD;AAC9D,SAAK,MAAMZ,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,8BAACI,QAAD,EAAkBW,WAAlB,yEAAgCT,IAAhC,EAAsCC,MAAtC,EAA8CS,IAA9C;AADF;AAED;;AAEDC,EAAAA,SAAS,CAACX,IAAD,EAAiBC,MAAjB,EAAqCS,IAArC,EAAqD;AAC5D,SAAK,MAAMZ,QAAX,IAAuB,KAAKJ,UAA5B;AAAA;;AACE,6BAACI,QAAD,EAAkBa,SAAlB,sEAA8BX,IAA9B,EAAoCC,MAApC,EAA4CS,IAA5C;AADF;AAED;;AAlD0C","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FullConfig, Suite, TestCase, TestError, TestResult, Reporter, FullResult, TestStep } from '../../../types/testReporter';\n\nexport class Multiplexer implements Reporter {\n  private _reporters: Reporter[];\n\n  constructor(reporters: Reporter[]) {\n    this._reporters = reporters;\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    for (const reporter of this._reporters)\n      reporter.onBegin?.(config, suite);\n  }\n\n  onTestBegin(test: TestCase, result: TestResult) {\n    for (const reporter of this._reporters)\n      reporter.onTestBegin?.(test, result);\n  }\n\n  onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    for (const reporter of this._reporters)\n      reporter.onStdOut?.(chunk, test, result);\n  }\n\n  onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    for (const reporter of this._reporters)\n      reporter.onStdErr?.(chunk, test, result);\n  }\n\n  onTestEnd(test: TestCase, result: TestResult) {\n    for (const reporter of this._reporters)\n      reporter.onTestEnd?.(test, result);\n  }\n\n  async onEnd(result: FullResult) {\n    for (const reporter of this._reporters)\n      await reporter.onEnd?.(result);\n  }\n\n  onError(error: TestError) {\n    for (const reporter of this._reporters)\n      reporter.onError?.(error);\n  }\n\n  onStepBegin(test: TestCase, result: TestResult, step: TestStep) {\n    for (const reporter of this._reporters)\n      (reporter as any).onStepBegin?.(test, result, step);\n  }\n\n  onStepEnd(test: TestCase, result: TestResult, step: TestStep) {\n    for (const reporter of this._reporters)\n      (reporter as any).onStepEnd?.(test, result, step);\n  }\n}\n"],"file":"multiplexer.js"}