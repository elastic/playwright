{"version":3,"sources":["../../../src/test/reporters/junit.ts"],"names":["JUnitReporter","constructor","options","config","suite","timestamp","startTime","totalTests","totalFailures","totalSkipped","outputFile","stripANSIControlSequences","onBegin","Date","now","onEnd","result","duration","children","projectSuite","suites","fileSuite","push","_buildTestSuite","tokens","self","root","name","attributes","id","process","env","tests","failures","skipped","errors","time","serializeXML","reportString","join","fs","mkdirSync","path","dirname","recursive","writeFileSync","console","log","allTests","forEach","test","outcome","ok","results","_addTestCase","entry","location","relative","rootDir","file","hostname","entries","titlePath","slice","classname","reduce","acc","value","message","basename","line","column","title","type","text","stdout","toString","attachment","attachments","stderr","attrs","Object","escape","String","length","child","discouragedXMLCharacters","ansiControlSequence","RegExp","isCharacterData","replace","escapeRe","c"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { FullConfig, FullResult, Reporter, Suite, TestCase } from '../../../types/testReporter';\nimport { monotonicTime } from '../util';\nimport { formatFailure, formatTestTitle, stripAnsiEscapes } from './base';\n\nclass JUnitReporter implements Reporter {\n  private config!: FullConfig;\n  private suite!: Suite;\n  private timestamp!: number;\n  private startTime!: number;\n  private totalTests = 0;\n  private totalFailures = 0;\n  private totalSkipped = 0;\n  private outputFile: string | undefined;\n  private stripANSIControlSequences = false;\n\n  constructor(options: { outputFile?: string, stripANSIControlSequences?: boolean } = {}) {\n    this.outputFile = options.outputFile;\n    this.stripANSIControlSequences = options.stripANSIControlSequences || false;\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    this.config = config;\n    this.suite = suite;\n    this.timestamp = Date.now();\n    this.startTime = monotonicTime();\n  }\n\n  async onEnd(result: FullResult) {\n    const duration = monotonicTime() - this.startTime;\n    const children: XMLEntry[] = [];\n    for (const projectSuite of this.suite.suites) {\n      for (const fileSuite of projectSuite.suites)\n        children.push(this._buildTestSuite(fileSuite));\n    }\n    const tokens: string[] = [];\n\n    const self = this;\n    const root: XMLEntry = {\n      name: 'testsuites',\n      attributes: {\n        id: process.env[`PLAYWRIGHT_JUNIT_SUITE_ID`] || '',\n        name: process.env[`PLAYWRIGHT_JUNIT_SUITE_NAME`] || '',\n        tests: self.totalTests,\n        failures: self.totalFailures,\n        skipped: self.totalSkipped,\n        errors: 0,\n        time: duration / 1000\n      },\n      children\n    };\n\n    serializeXML(root, tokens, this.stripANSIControlSequences);\n    const reportString = tokens.join('\\n');\n    const outputFile = this.outputFile || process.env[`PLAYWRIGHT_JUNIT_OUTPUT_NAME`];\n    if (outputFile) {\n      fs.mkdirSync(path.dirname(outputFile), { recursive: true });\n      fs.writeFileSync(outputFile, reportString);\n    } else {\n      console.log(reportString);\n    }\n  }\n\n  private _buildTestSuite(suite: Suite): XMLEntry {\n    let tests = 0;\n    let skipped = 0;\n    let failures = 0;\n    let duration = 0;\n    const children: XMLEntry[] = [];\n\n    suite.allTests().forEach(test => {\n      ++tests;\n      if (test.outcome() === 'skipped')\n        ++skipped;\n      if (!test.ok())\n        ++failures;\n      for (const result of test.results)\n        duration += result.duration;\n      this._addTestCase(test, children);\n    });\n    this.totalTests += tests;\n    this.totalSkipped += skipped;\n    this.totalFailures += failures;\n\n    const entry: XMLEntry = {\n      name: 'testsuite',\n      attributes: {\n        name: suite.location ? path.relative(this.config.rootDir, suite.location.file) : '',\n        timestamp: this.timestamp,\n        hostname: '',\n        tests,\n        failures,\n        skipped,\n        time: duration / 1000,\n        errors: 0,\n      },\n      children\n    };\n\n    return entry;\n  }\n\n  private _addTestCase(test: TestCase, entries: XMLEntry[]) {\n    const entry = {\n      name: 'testcase',\n      attributes: {\n        // Skip root, project, file\n        name: test.titlePath().slice(3).join(' '),\n        classname: formatTestTitle(this.config, test),\n        time: (test.results.reduce((acc, value) => acc + value.duration, 0)) / 1000\n      },\n      children: [] as XMLEntry[]\n    };\n    entries.push(entry);\n\n    if (test.outcome() === 'skipped') {\n      entry.children.push({ name: 'skipped'});\n      return;\n    }\n\n    if (!test.ok()) {\n      entry.children.push({\n        name: 'failure',\n        attributes: {\n          message: `${path.basename(test.location.file)}:${test.location.line}:${test.location.column} ${test.title}`,\n          type: 'FAILURE',\n        },\n        text: stripAnsiEscapes(formatFailure(this.config, test))\n      });\n    }\n    for (const result of test.results) {\n      for (const stdout of result.stdout) {\n        entries.push({\n          name: 'system-out',\n          text: stdout.toString()\n        });\n      }\n\n      for (const attachment of result.attachments) {\n        if (attachment.path) {\n          entries.push({\n            name: 'system-out',\n            text: `[[ATTACHMENT|${path.relative(this.config.rootDir, attachment.path)}]]`\n          });\n        }\n      }\n\n      for (const stderr of result.stderr) {\n        entries.push({\n          name: 'system-err',\n          text: stderr.toString()\n        });\n      }\n    }\n  }\n}\n\ntype XMLEntry = {\n  name: string;\n  attributes?: { [name: string]: string | number | boolean };\n  children?: XMLEntry[];\n  text?: string;\n};\n\nfunction serializeXML(entry: XMLEntry, tokens: string[], stripANSIControlSequences: boolean) {\n  const attrs: string[] = [];\n  for (const [name, value] of Object.entries(entry.attributes || {}))\n    attrs.push(`${name}=\"${escape(String(value), stripANSIControlSequences, false)}\"`);\n  tokens.push(`<${entry.name}${attrs.length ? ' ' : ''}${attrs.join(' ')}>`);\n  for (const child of entry.children || [])\n    serializeXML(child, tokens, stripANSIControlSequences);\n  if (entry.text)\n    tokens.push(escape(entry.text, stripANSIControlSequences, true));\n  tokens.push(`</${entry.name}>`);\n}\n\n// See https://en.wikipedia.org/wiki/Valid_characters_in_XML\nconst discouragedXMLCharacters = /[\\u0001-\\u0008\\u000b-\\u000c\\u000e-\\u001f\\u007f-\\u0084\\u0086-\\u009f]/g;\nconst ansiControlSequence = new RegExp('[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:[a-zA-Z\\\\d]*(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)|(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))', 'g');\n\nfunction escape(text: string, stripANSIControlSequences: boolean, isCharacterData: boolean): string {\n  if (stripANSIControlSequences)\n    text = text.replace(ansiControlSequence, '');\n  const escapeRe = isCharacterData ? /[&<]/g : /[&\"<>]/g;\n  text = text.replace(escapeRe, c => ({ '&': '&amp;', '\"': '&quot;', '<': '&lt;', '>': '&gt;' }[c]!));\n  if (isCharacterData)\n    text = text.replace(/]]>/g, ']]&gt;');\n  text = text.replace(discouragedXMLCharacters, '');\n  return text;\n}\n\nexport default JUnitReporter;\n"],"file":"junit.js"}