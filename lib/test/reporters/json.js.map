{"version":3,"sources":["../../../src/test/reporters/json.ts"],"names":["toPosixPath","aPath","split","path","sep","join","posix","JSONReporter","constructor","options","config","suite","_errors","_outputFile","outputFile","onBegin","onError","error","push","onEnd","result","outputReport","_serializeReport","rootDir","projects","map","project","outputDir","repeatEach","retries","metadata","name","testDir","testIgnore","serializePatterns","testMatch","timeout","suites","_mergeSuites","errors","fileSuites","Map","projectSuite","fileSuite","file","location","has","serialized","_serializeSuite","set","_mergeTestsFromSuite","get","_relativeLocation","line","column","relative","_locationMatches","s","to","from","fromSuite","toSuite","find","title","test","tests","toSpec","specs","_serializeTest","_serializeTestSpec","allTests","length","filter","undefined","ok","annotations","expectedStatus","projectName","titlePath","results","r","_serializeTestResult","status","outcome","workerIndex","duration","stdout","stdioEntry","stderr","retry","attachments","a","contentType","body","toString","report","reportString","JSON","stringify","process","env","fs","mkdirSync","dirname","recursive","writeFileSync","console","log","text","buffer","patterns","Array","isArray"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { FullConfig, TestCase, Suite, TestResult, TestError, FullResult, TestStatus, Location, Reporter } from '../../../types/testReporter';\n\nexport interface JSONReport {\n  config: Omit<FullConfig, 'projects'> & {\n    projects: {\n      outputDir: string,\n      repeatEach: number,\n      retries: number,\n      metadata: any,\n      name: string,\n      testDir: string,\n      testIgnore: string[],\n      testMatch: string[],\n      timeout: number,\n    }[],\n  };\n  suites: JSONReportSuite[];\n  errors: TestError[];\n}\nexport interface JSONReportSuite {\n  title: string;\n  file: string;\n  column: number;\n  line: number;\n  specs: JSONReportSpec[];\n  suites?: JSONReportSuite[];\n}\nexport interface JSONReportSpec {\n  title: string;\n  ok: boolean;\n  tests: JSONReportTest[];\n  file: string;\n  line: number;\n  column: number;\n}\nexport interface JSONReportTest {\n  timeout: number;\n  annotations: { type: string, description?: string }[],\n  expectedStatus: TestStatus;\n  projectName: string;\n  results: JSONReportTestResult[];\n  status: 'skipped' | 'expected' | 'unexpected' | 'flaky';\n}\nexport interface JSONReportTestResult {\n  workerIndex: number;\n  status: TestStatus | undefined;\n  duration: number;\n  error: TestError | undefined;\n  stdout: JSONReportSTDIOEntry[],\n  stderr: JSONReportSTDIOEntry[],\n  retry: number;\n  attachments: { name: string, path?: string, body?: string, contentType: string }[];\n}\nexport type JSONReportSTDIOEntry = { text: string } | { buffer: string };\n\nexport function toPosixPath(aPath: string): string {\n  return aPath.split(path.sep).join(path.posix.sep);\n}\n\nclass JSONReporter implements Reporter {\n  config!: FullConfig;\n  suite!: Suite;\n  private _errors: TestError[] = [];\n  private _outputFile: string | undefined;\n\n  constructor(options: { outputFile?: string } = {}) {\n    this._outputFile = options.outputFile;\n  }\n\n  onBegin(config: FullConfig, suite: Suite) {\n    this.config = config;\n    this.suite = suite;\n  }\n\n  onError(error: TestError): void {\n    this._errors.push(error);\n  }\n\n  async onEnd(result: FullResult) {\n    outputReport(this._serializeReport(), this._outputFile);\n  }\n\n  private _serializeReport(): JSONReport {\n    return {\n      config: {\n        ...this.config,\n        rootDir: toPosixPath(this.config.rootDir),\n        projects: this.config.projects.map(project => {\n          return {\n            outputDir: toPosixPath(project.outputDir),\n            repeatEach: project.repeatEach,\n            retries: project.retries,\n            metadata: project.metadata,\n            name: project.name,\n            testDir: toPosixPath(project.testDir),\n            testIgnore: serializePatterns(project.testIgnore),\n            testMatch: serializePatterns(project.testMatch),\n            timeout: project.timeout,\n          };\n        })\n      },\n      suites: this._mergeSuites(this.suite.suites),\n      errors: this._errors\n    };\n  }\n\n  private _mergeSuites(suites: Suite[]): JSONReportSuite[] {\n    const fileSuites = new Map<string, JSONReportSuite>();\n    const result: JSONReportSuite[] = [];\n    for (const projectSuite of suites) {\n      for (const fileSuite of projectSuite.suites) {\n        const file = fileSuite.location!.file;\n        if (!fileSuites.has(file)) {\n          const serialized = this._serializeSuite(fileSuite);\n          if (serialized) {\n            fileSuites.set(file, serialized);\n            result.push(serialized);\n          }\n        } else {\n          this._mergeTestsFromSuite(fileSuites.get(file)!, fileSuite);\n        }\n      }\n    }\n    return result;\n  }\n\n  private _relativeLocation(location: Location | undefined): Location {\n    if (!location)\n      return { file: '', line: 0, column: 0 };\n    return {\n      file: toPosixPath(path.relative(this.config.rootDir, location.file)),\n      line: location.line,\n      column: location.column,\n    };\n  }\n\n  private _locationMatches(s: JSONReportSuite | JSONReportSpec, location: Location | undefined) {\n    const relative = this._relativeLocation(location);\n    return s.file === relative.file && s.line === relative.line && s.column === relative.column;\n  }\n\n  private _mergeTestsFromSuite(to: JSONReportSuite, from: Suite) {\n    for (const fromSuite of from.suites) {\n      const toSuite = (to.suites || []).find(s => s.title === fromSuite.title && this._locationMatches(s, from.location));\n      if (toSuite) {\n        this._mergeTestsFromSuite(toSuite, fromSuite);\n      } else {\n        const serialized = this._serializeSuite(fromSuite);\n        if (serialized) {\n          if (!to.suites)\n            to.suites = [];\n          to.suites.push(serialized);\n        }\n      }\n    }\n    for (const test of from.tests) {\n      const toSpec = to.specs.find(s => s.title === test.title && s.file === toPosixPath(path.relative(this.config.rootDir, test.location.file)) && s.line === test.location.line && s.column === test.location.column);\n      if (toSpec)\n        toSpec.tests.push(this._serializeTest(test));\n      else\n        to.specs.push(this._serializeTestSpec(test));\n    }\n  }\n\n  private _serializeSuite(suite: Suite): null | JSONReportSuite {\n    if (!suite.allTests().length)\n      return null;\n    const suites = suite.suites.map(suite => this._serializeSuite(suite)).filter(s => s) as JSONReportSuite[];\n    return {\n      title: suite.title,\n      ...this._relativeLocation(suite.location),\n      specs: suite.tests.map(test => this._serializeTestSpec(test)),\n      suites: suites.length ? suites : undefined,\n    };\n  }\n\n  private _serializeTestSpec(test: TestCase): JSONReportSpec {\n    return {\n      title: test.title,\n      ok: test.ok(),\n      tests: [ this._serializeTest(test) ],\n      ...this._relativeLocation(test.location),\n    };\n  }\n\n  private _serializeTest(test: TestCase): JSONReportTest {\n    return {\n      timeout: test.timeout,\n      annotations: test.annotations,\n      expectedStatus: test.expectedStatus,\n      projectName: test.titlePath()[1],\n      results: test.results.map(r => this._serializeTestResult(r)),\n      status: test.outcome(),\n    };\n  }\n\n  private _serializeTestResult(result: TestResult): JSONReportTestResult {\n    return {\n      workerIndex: result.workerIndex,\n      status: result.status,\n      duration: result.duration,\n      error: result.error,\n      stdout: result.stdout.map(s => stdioEntry(s)),\n      stderr: result.stderr.map(s => stdioEntry(s)),\n      retry: result.retry,\n      attachments: result.attachments.map(a => ({\n        name: a.name,\n        contentType: a.contentType,\n        path: a.path,\n        body: a.body?.toString('base64')\n      })),\n    };\n  }\n}\n\nfunction outputReport(report: JSONReport, outputFile: string | undefined) {\n  const reportString = JSON.stringify(report, undefined, 2);\n  outputFile = outputFile || process.env[`PLAYWRIGHT_JSON_OUTPUT_NAME`];\n  if (outputFile) {\n    fs.mkdirSync(path.dirname(outputFile), { recursive: true });\n    fs.writeFileSync(outputFile, reportString);\n  } else {\n    console.log(reportString);\n  }\n}\n\nfunction stdioEntry(s: string | Buffer): any {\n  if (typeof s === 'string')\n    return { text: s };\n  return { buffer: s.toString('base64') };\n}\n\nexport function serializePatterns(patterns: string | RegExp | (string | RegExp)[]): string[] {\n  if (!Array.isArray(patterns))\n    patterns = [patterns];\n  return patterns.map(s => s.toString());\n}\n\nexport default JSONReporter;\n"],"file":"json.js"}