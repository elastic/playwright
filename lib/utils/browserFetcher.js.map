{"version":3,"sources":["../../src/utils/browserFetcher.ts"],"names":["downloadBrowserWithProgressBar","title","browserDirectory","executablePath","downloadURL","downloadFileName","progressBarName","debugLogger","log","progressBar","lastDownloadedBytes","progress","downloadedBytes","totalBytes","process","stderr","isTTY","ProgressBar","toMegabytes","complete","incomplete","width","total","delta","tick","url","zipPath","path","join","os","tmpdir","attempt","N","error","progressCallback","bind","errorMessage","message","includes","millis","Math","random","pow","Promise","c","setTimeout","dir","fs","promises","chmod","e","exitCode","unlink","logPolitely","bytes","mb","round","toBeLogged","logLevel","env","npm_config_loglevel","logLevelDisplay","indexOf","console"],"mappings":";;;;;;;;AAiBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUO,eAAeA,8BAAf,CAA8CC,KAA9C,EAA6DC,gBAA7D,EAAuFC,cAAvF,EAA+GC,WAA/G,EAAoIC,gBAApI,EAAgL;AACrL,QAAMC,eAAe,GAAI,uBAAsBL,KAAM,EAArD;;AACA,MAAI,MAAM,wBAAYC,gBAAZ,CAAV,EAAyC;AACvC;AACAK,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,WAAUP,KAAM,yBAA5C;;AACA,WAAO,KAAP;AACD;;AAED,MAAIQ,WAAJ;AACA,MAAIC,mBAAmB,GAAG,CAA1B;;AAEA,WAASC,QAAT,CAAkBC,eAAlB,EAA2CC,UAA3C,EAA+D;AAC7D,QAAI,CAACC,OAAO,CAACC,MAAR,CAAeC,KAApB,EACE;;AACF,QAAI,CAACP,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,IAAIQ,iBAAJ,CAAiB,eAAcX,eAAgB,MAAKY,WAAW,CAACL,UAAD,CAAa,yBAA5E,EAAsG;AAClHM,QAAAA,QAAQ,EAAE,GADwG;AAElHC,QAAAA,UAAU,EAAE,GAFsG;AAGlHC,QAAAA,KAAK,EAAE,EAH2G;AAIlHC,QAAAA,KAAK,EAAET;AAJ2G,OAAtG,CAAd;AAMD;;AACD,UAAMU,KAAK,GAAGX,eAAe,GAAGF,mBAAhC;AACAA,IAAAA,mBAAmB,GAAGE,eAAtB;AACAH,IAAAA,WAAW,CAACe,IAAZ,CAAiBD,KAAjB;AACD;;AAED,QAAME,GAAG,GAAGrB,WAAZ;;AACA,QAAMsB,OAAO,GAAGC,cAAKC,IAAL,CAAUC,YAAGC,MAAH,EAAV,EAAuBzB,gBAAvB,CAAhB;;AACA,MAAI;AACF,SAAK,IAAI0B,OAAO,GAAG,CAAd,EAAiBC,CAAC,GAAG,CAA1B,EAA6BD,OAAO,IAAIC,CAAxC,EAA2C,EAAED,OAA7C,EAAsD;AACpDxB,+BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,eAAcF,eAAgB,eAAcyB,OAAQ,EAAhF;;AACA,YAAM;AAACE,QAAAA;AAAD,UAAU,MAAM,yBAAaR,GAAb,EAAkBC,OAAlB,EAA2B;AAACQ,QAAAA,gBAAgB,EAAEvB,QAAnB;AAA6BH,QAAAA,GAAG,EAAED,yBAAYC,GAAZ,CAAgB2B,IAAhB,CAAqB5B,wBAArB,EAAkC,SAAlC;AAAlC,OAA3B,CAAtB;;AACA,UAAI,CAAC0B,KAAL,EAAY;AACV1B,iCAAYC,GAAZ,CAAgB,SAAhB,EAA4B,uBAAsBF,eAAgB,EAAlE;;AACA;AACD;;AACD,YAAM8B,YAAY,GAAG,OAAOH,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAK,CAACI,OAAb,KAAyB,QAAtD,GAAiEJ,KAAK,CAACI,OAAvE,GAAiF,EAAtG;;AACA9B,+BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,YAAWuB,OAAQ,aAAYK,YAAa,EAAxE;;AACA,UAAIL,OAAO,GAAGC,CAAV,KAAgBI,YAAY,CAACE,QAAb,CAAsB,YAAtB,KAAuCF,YAAY,CAACE,QAAb,CAAsB,WAAtB,CAAvD,CAAJ,EAAgG;AAC9F;AACA,cAAMC,MAAM,GAAIC,IAAI,CAACC,MAAL,KAAgB,GAAjB,GAAyB,MAAMD,IAAI,CAACE,GAAL,CAAS,GAAT,EAAcX,OAAd,CAA9C;;AACAxB,iCAAYC,GAAZ,CAAgB,SAAhB,EAA4B,YAAW+B,MAAO,oBAA9C;;AACA,cAAM,IAAII,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAIL,MAAJ,CAA3B,CAAN;AACD,OALD,MAKO;AACL,cAAMN,KAAN;AACD;AACF;;AACD1B,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,oBAA5B;;AACAD,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,WAAUkB,OAAQ,EAA9C;;AACAnB,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,gBAAeN,gBAAiB,EAA5D;;AACA,UAAM,yBAAQwB,OAAR,EAAiB;AAAEoB,MAAAA,GAAG,EAAE5C;AAAP,KAAjB,CAAN;;AACAK,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,yBAAwBL,cAAe,EAAnE;;AACA,UAAM4C,YAAGC,QAAH,CAAYC,KAAZ,CAAkB9C,cAAlB,EAAkC,KAAlC,CAAN;AACD,GAzBD,CAyBE,OAAO+C,CAAP,EAAU;AACV3C,6BAAYC,GAAZ,CAAgB,SAAhB,EAA4B,uBAAsBF,eAAgB,gBAAe4C,CAAE,EAAnF;;AACApC,IAAAA,OAAO,CAACqC,QAAR,GAAmB,CAAnB;AACA,UAAMD,CAAN;AACD,GA7BD,SA6BU;AACR,QAAI,MAAM,wBAAYxB,OAAZ,CAAV,EACE,MAAMqB,YAAGC,QAAH,CAAYI,MAAZ,CAAmB1B,OAAnB,CAAN;AACH;;AACD2B,EAAAA,WAAW,CAAE,GAAE/C,eAAgB,kBAAiBJ,gBAAiB,EAAtD,CAAX;AACA,SAAO,IAAP;AACD;;AAED,SAASgB,WAAT,CAAqBoC,KAArB,EAAoC;AAClC,QAAMC,EAAE,GAAGD,KAAK,GAAG,IAAR,GAAe,IAA1B;AACA,SAAQ,GAAEd,IAAI,CAACgB,KAAL,CAAWD,EAAE,GAAG,EAAhB,IAAsB,EAAG,KAAnC;AACD;;AAEM,SAASF,WAAT,CAAqBI,UAArB,EAAyC;AAC9C,QAAMC,QAAQ,GAAG5C,OAAO,CAAC6C,GAAR,CAAYC,mBAA7B;AACA,QAAMC,eAAe,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,MAApB,EAA4BC,OAA5B,CAAoCJ,QAAQ,IAAI,EAAhD,IAAsD,CAAC,CAA/E;AAEA,MAAI,CAACG,eAAL,EACEE,OAAO,CAACvD,GAAR,CAAYiD,UAAZ,EAL4C,CAKlB;AAC7B","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport extract from 'extract-zip';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport ProgressBar from 'progress';\nimport { downloadFile, existsAsync } from './utils';\nimport { debugLogger } from './debugLogger';\n\nexport async function downloadBrowserWithProgressBar(title: string, browserDirectory: string, executablePath: string, downloadURL: string, downloadFileName: string): Promise<boolean> {\n  const progressBarName = `Playwright build of ${title}`;\n  if (await existsAsync(browserDirectory)) {\n    // Already downloaded.\n    debugLogger.log('install', `browser ${title} is already downloaded.`);\n    return false;\n  }\n\n  let progressBar: ProgressBar;\n  let lastDownloadedBytes = 0;\n\n  function progress(downloadedBytes: number, totalBytes: number) {\n    if (!process.stderr.isTTY)\n      return;\n    if (!progressBar) {\n      progressBar = new ProgressBar(`Downloading ${progressBarName} - ${toMegabytes(totalBytes)} [:bar] :percent :etas `, {\n        complete: '=',\n        incomplete: ' ',\n        width: 20,\n        total: totalBytes,\n      });\n    }\n    const delta = downloadedBytes - lastDownloadedBytes;\n    lastDownloadedBytes = downloadedBytes;\n    progressBar.tick(delta);\n  }\n\n  const url = downloadURL;\n  const zipPath = path.join(os.tmpdir(), downloadFileName);\n  try {\n    for (let attempt = 1, N = 3; attempt <= N; ++attempt) {\n      debugLogger.log('install', `downloading ${progressBarName} - attempt #${attempt}`);\n      const {error} = await downloadFile(url, zipPath, {progressCallback: progress, log: debugLogger.log.bind(debugLogger, 'install')});\n      if (!error) {\n        debugLogger.log('install', `SUCCESS downloading ${progressBarName}`);\n        break;\n      }\n      const errorMessage = typeof error === 'object' && typeof error.message === 'string' ? error.message : '';\n      debugLogger.log('install', `attempt #${attempt} - ERROR: ${errorMessage}`);\n      if (attempt < N && (errorMessage.includes('ECONNRESET') || errorMessage.includes('ETIMEDOUT'))) {\n        // Maximum delay is 3rd retry: 1337.5ms\n        const millis = (Math.random() * 200) + (250 * Math.pow(1.5, attempt));\n        debugLogger.log('install', `sleeping ${millis}ms before retry...`);\n        await new Promise(c => setTimeout(c, millis));\n      } else {\n        throw error;\n      }\n    }\n    debugLogger.log('install', `extracting archive`);\n    debugLogger.log('install', `-- zip: ${zipPath}`);\n    debugLogger.log('install', `-- location: ${browserDirectory}`);\n    await extract(zipPath, { dir: browserDirectory});\n    debugLogger.log('install', `fixing permissions at ${executablePath}`);\n    await fs.promises.chmod(executablePath, 0o755);\n  } catch (e) {\n    debugLogger.log('install', `FAILED installation ${progressBarName} with error: ${e}`);\n    process.exitCode = 1;\n    throw e;\n  } finally {\n    if (await existsAsync(zipPath))\n      await fs.promises.unlink(zipPath);\n  }\n  logPolitely(`${progressBarName} downloaded to ${browserDirectory}`);\n  return true;\n}\n\nfunction toMegabytes(bytes: number) {\n  const mb = bytes / 1024 / 1024;\n  return `${Math.round(mb * 10) / 10} Mb`;\n}\n\nexport function logPolitely(toBeLogged: string) {\n  const logLevel = process.env.npm_config_loglevel;\n  const logLevelDisplay = ['silent', 'error', 'warn'].indexOf(logLevel || '') > -1;\n\n  if (!logLevelDisplay)\n    console.log(toBeLogged);  // eslint-disable-line no-console\n}\n"],"file":"browserFetcher.js"}