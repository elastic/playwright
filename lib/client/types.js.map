{"version":3,"sources":["../../src/client/types.ts"],"names":["kLifecycleEvents","Set"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;AA9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoCO,MAAMA,gBAAqC,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,kBAAT,EAA6B,aAA7B,CAAR,CAA9C","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\n\ntype LoggerSeverity = 'verbose' | 'info' | 'warning' | 'error';\nexport interface Logger {\n  isEnabled(name: string, severity: LoggerSeverity): boolean;\n  log(name: string, severity: LoggerSeverity, message: string | Error, args: any[], hints: { color?: string }): void;\n}\n\nexport interface ClientSideInstrumentation {\n  onApiCall(name: string): (error?: Error) => void;\n}\n\nimport { Size } from '../common/types';\nexport { Size, Point, Rect, Quad, URLMatch, TimeoutOptions } from '../common/types';\nexport type StrictOptions = { strict?: boolean };\nexport type Headers = { [key: string]: string };\nexport type Env = { [key: string]: string | number | boolean | undefined };\n\nexport type WaitForEventOptions = Function | { predicate?: Function, timeout?: number };\nexport type WaitForFunctionOptions = { timeout?: number, polling?: 'raf' | number };\n\nexport type SelectOption = { value?: string, label?: string, index?: number };\nexport type SelectOptionOptions = { force?: boolean, timeout?: number, noWaitAfter?: boolean };\nexport type FilePayload = { name: string, mimeType: string, buffer: Buffer };\nexport type StorageState = {\n  cookies: channels.NetworkCookie[],\n  origins: channels.OriginStorage[]\n};\nexport type SetStorageState = {\n  cookies?: channels.SetNetworkCookie[],\n  origins?: channels.OriginStorage[]\n};\n\nexport type LifecycleEvent = 'load' | 'domcontentloaded' | 'networkidle';\nexport const kLifecycleEvents: Set<LifecycleEvent> = new Set(['load', 'domcontentloaded', 'networkidle']);\n\nexport type BrowserContextOptions = Omit<channels.BrowserNewContextOptions, 'viewport' | 'noDefaultViewport' | 'extraHTTPHeaders' | 'storageState'> & {\n  viewport?: Size | null,\n  extraHTTPHeaders?: Headers,\n  logger?: Logger,\n  videosPath?: string,\n  videoSize?: Size,\n  storageState?: string | channels.BrowserNewContextOptions['storageState'],\n};\n\ntype LaunchOverrides = {\n  ignoreDefaultArgs?: boolean | string[],\n  env?: Env,\n  logger?: Logger,\n};\ntype FirefoxUserPrefs = {\n  firefoxUserPrefs?: { [key: string]: string | number | boolean },\n};\ntype LaunchOptionsBase = Omit<channels.BrowserTypeLaunchOptions, 'ignoreAllDefaultArgs' | 'ignoreDefaultArgs' | 'env' | 'firefoxUserPrefs'> & LaunchOverrides;\nexport type LaunchOptions = LaunchOptionsBase & FirefoxUserPrefs;\nexport type LaunchPersistentContextOptions = Omit<LaunchOptionsBase & BrowserContextOptions, 'storageState'>;\n\nexport type ConnectOptions = {\n  wsEndpoint: string,\n  headers?: { [key: string]: string; };\n  _forwardPorts?: number[];\n  slowMo?: number,\n  timeout?: number,\n  logger?: Logger,\n};\nexport type LaunchServerOptions = {\n  _acceptForwardedPorts?: boolean,\n  channel?: channels.BrowserTypeLaunchOptions['channel'],\n  executablePath?: string,\n  args?: string[],\n  ignoreDefaultArgs?: boolean | string[],\n  handleSIGINT?: boolean,\n  handleSIGTERM?: boolean,\n  handleSIGHUP?: boolean,\n  timeout?: number,\n  env?: Env,\n  headless?: boolean,\n  devtools?: boolean,\n  proxy?: {\n    server: string,\n    bypass?: string,\n    username?: string,\n    password?: string\n  },\n  downloadsPath?: string,\n  chromiumSandbox?: boolean,\n  port?: number,\n  logger?: Logger,\n} & FirefoxUserPrefs;\n\nexport type SelectorEngine = {\n  /**\n   * Returns the first element matching given selector in the root's subtree.\n   */\n  query(root: HTMLElement, selector: string): HTMLElement | null;\n  /**\n   * Returns all elements matching given selector in the root's subtree.\n   */\n  queryAll(root: HTMLElement, selector: string): HTMLElement[];\n};\n\nexport type RemoteAddr = channels.RemoteAddr;\nexport type SecurityDetails = channels.SecurityDetails;\n"],"file":"types.js"}