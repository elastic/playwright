{"version":3,"sources":["../../src/client/stream.ts"],"names":["Stream","ChannelOwner","from","_object","constructor","parent","type","guid","initializer","stream","StreamImpl","_channel","Readable","channel","_read","size","result","read","binary","push","Buffer","_destroy","error","callback","close","catch","e"],"mappings":";;;;;;;AAgBA;;AAEA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMO,MAAMA,MAAN,SAAqBC,0BAArB,CAAsF;AAChF,SAAJC,IAAI,CAACF,MAAD,EAAyC;AAClD,WAAQA,MAAD,CAAgBG,OAAvB;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAuBC,IAAvB,EAAqCC,IAArC,EAAmDC,WAAnD,EAA4F;AACrG,UAAMH,MAAN,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,WAA1B;AACD;;AAEDC,EAAAA,MAAM,GAAa;AACjB,WAAO,IAAIC,UAAJ,CAAe,KAAKC,QAApB,CAAP;AACD;;AAX0F;;;;AAc7F,MAAMD,UAAN,SAAyBE,gBAAzB,CAAkC;AAGhCR,EAAAA,WAAW,CAACS,OAAD,EAAkC;AAC3C;AAD2C,SAFrCF,QAEqC;AAE3C,SAAKA,QAAL,GAAgBE,OAAhB;AACD;;AAEU,QAALC,KAAK,CAACC,IAAD,EAAe;AACxB,UAAMC,MAAM,GAAG,MAAM,KAAKL,QAAL,CAAcM,IAAd,CAAmB;AAAEF,MAAAA;AAAF,KAAnB,CAArB;AACA,QAAIC,MAAM,CAACE,MAAX,EACE,KAAKC,IAAL,CAAUC,MAAM,CAAClB,IAAP,CAAYc,MAAM,CAACE,MAAnB,EAA2B,QAA3B,CAAV,EADF,KAGE,KAAKC,IAAL,CAAU,IAAV;AACH;;AAEDE,EAAAA,QAAQ,CAACC,KAAD,EAAsBC,QAAtB,EAAqE;AAC3E;AACA,SAAKZ,QAAL,CAAca,KAAd,GAAsBC,KAAtB,CAA4BC,CAAC,IAAI,IAAjC;;AACA,UAAML,QAAN,CAAeC,KAAf,EAAsBC,QAAtB;AACD;;AApB+B","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Readable } from 'stream';\nimport * as channels from '../protocol/channels';\nimport { ChannelOwner } from './channelOwner';\n\nexport class Stream extends ChannelOwner<channels.StreamChannel, channels.StreamInitializer> {\n  static from(Stream: channels.StreamChannel): Stream {\n    return (Stream as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.StreamInitializer) {\n    super(parent, type, guid, initializer);\n  }\n\n  stream(): Readable {\n    return new StreamImpl(this._channel);\n  }\n}\n\nclass StreamImpl extends Readable {\n  private _channel: channels.StreamChannel;\n\n  constructor(channel: channels.StreamChannel) {\n    super();\n    this._channel = channel;\n  }\n\n  async _read(size: number) {\n    const result = await this._channel.read({ size });\n    if (result.binary)\n      this.push(Buffer.from(result.binary, 'base64'));\n    else\n      this.push(null);\n  }\n\n  _destroy(error: Error | null, callback: (error: Error | null) => void): void {\n    // Stream might be destroyed after the connection was closed.\n    this._channel.close().catch(e => null);\n    super._destroy(error, callback);\n  }\n}\n"],"file":"stream.js"}