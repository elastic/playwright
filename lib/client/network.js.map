{"version":3,"sources":["../../src/client/network.ts"],"names":["Request","ChannelOwner","from","request","_object","fromNullable","constructor","parent","type","guid","initializer","_redirectedFrom","_redirectedTo","_failureText","_headers","_postData","_timing","redirectedFrom","headers","postData","Buffer","startTime","domainLookupStart","domainLookupEnd","connectStart","secureConnectionStart","connectEnd","requestStart","responseStart","responseEnd","url","_initializer","resourceType","method","toString","postDataBuffer","postDataJSON","contentType","entries","parsed","URLSearchParams","k","v","JSON","parse","e","Error","response","_wrapApiCall","channel","Response","frame","Frame","isNavigationRequest","redirectedTo","failure","errorText","timing","_finalRequest","InterceptedResponse","route","_route","_request","securityDetails","serverAddr","finished","ok","status","statusText","body","_responseBody","text","content","json","Route","abort","errorCode","fulfill","options","undefined","isBase64","length","path","buffer","fs","promises","readFile","byteLength","header","Object","keys","toLowerCase","String","mime","getType","_intercept","_continue","continue","interceptResponse","result","responseBody","binary","requestHeaders","assign","error","value","WebSocket","webSocket","_page","_isClosed","_channel","on","event","opcode","emit","Events","FrameSent","payload","data","FrameReceived","Close","isClosed","waitForEvent","optionsOrPredicate","timeout","_timeoutSettings","predicate","waiter","Waiter","createForEvent","rejectOnTimeout","rejectOnEvent","Page","dispose","validateHeaders","key","is"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { URLSearchParams } from 'url';\nimport * as channels from '../protocol/channels';\nimport { ChannelOwner } from './channelOwner';\nimport { Frame } from './frame';\nimport { Headers, RemoteAddr, SecurityDetails, WaitForEventOptions } from './types';\nimport fs from 'fs';\nimport * as mime from 'mime';\nimport { isString, headersObjectToArray, headersArrayToObject } from '../utils/utils';\nimport { Events } from './events';\nimport { Page } from './page';\nimport { Waiter } from './waiter';\nimport * as api from '../../types/types';\n\nexport type NetworkCookie = {\n  name: string,\n  value: string,\n  domain: string,\n  path: string,\n  expires: number,\n  httpOnly: boolean,\n  secure: boolean,\n  sameSite: 'Strict' | 'Lax' | 'None'\n};\n\nexport type SetNetworkCookieParam = {\n  name: string,\n  value: string,\n  url?: string,\n  domain?: string,\n  path?: string,\n  expires?: number,\n  httpOnly?: boolean,\n  secure?: boolean,\n  sameSite?: 'Strict' | 'Lax' | 'None'\n};\n\nexport class Request extends ChannelOwner<channels.RequestChannel, channels.RequestInitializer> implements api.Request {\n  private _redirectedFrom: Request | null = null;\n  private _redirectedTo: Request | null = null;\n  _failureText: string | null = null;\n  _headers: Headers;\n  private _postData: Buffer | null;\n  _timing: ResourceTiming;\n\n  static from(request: channels.RequestChannel): Request {\n    return (request as any)._object;\n  }\n\n  static fromNullable(request: channels.RequestChannel | undefined): Request | null {\n    return request ? Request.from(request) : null;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.RequestInitializer) {\n    super(parent, type, guid, initializer);\n    this._redirectedFrom = Request.fromNullable(initializer.redirectedFrom);\n    if (this._redirectedFrom)\n      this._redirectedFrom._redirectedTo = this;\n    this._headers = headersArrayToObject(initializer.headers, true /* lowerCase */);\n    this._postData = initializer.postData ? Buffer.from(initializer.postData, 'base64') : null;\n    this._timing = {\n      startTime: 0,\n      domainLookupStart: -1,\n      domainLookupEnd: -1,\n      connectStart: -1,\n      secureConnectionStart: -1,\n      connectEnd: -1,\n      requestStart: -1,\n      responseStart: -1,\n      responseEnd: -1,\n    };\n  }\n\n  url(): string {\n    return this._initializer.url;\n  }\n\n  resourceType(): string {\n    return this._initializer.resourceType;\n  }\n\n  method(): string {\n    return this._initializer.method;\n  }\n\n  postData(): string | null {\n    return this._postData ? this._postData.toString('utf8') : null;\n  }\n\n  postDataBuffer(): Buffer | null {\n    return this._postData;\n  }\n\n  postDataJSON(): Object | null {\n    const postData = this.postData();\n    if (!postData)\n      return null;\n\n    const contentType = this.headers()['content-type'];\n    if (contentType === 'application/x-www-form-urlencoded') {\n      const entries: Record<string, string> = {};\n      const parsed = new URLSearchParams(postData);\n      for (const [k, v] of parsed.entries())\n        entries[k] = v;\n      return entries;\n    }\n\n    try {\n      return JSON.parse(postData);\n    } catch (e) {\n      throw new Error('POST data is not a valid JSON object: ' + postData);\n    }\n  }\n\n  headers(): Headers {\n    return { ...this._headers };\n  }\n\n  async response(): Promise<Response | null> {\n    return this._wrapApiCall(async (channel: channels.RequestChannel) => {\n      return Response.fromNullable((await channel.response()).response);\n    });\n  }\n\n  frame(): Frame {\n    return Frame.from(this._initializer.frame);\n  }\n\n  isNavigationRequest(): boolean {\n    return this._initializer.isNavigationRequest;\n  }\n\n  redirectedFrom(): Request | null {\n    return this._redirectedFrom;\n  }\n\n  redirectedTo(): Request | null {\n    return this._redirectedTo;\n  }\n\n  failure(): { errorText: string; } | null {\n    if (this._failureText === null)\n      return null;\n    return {\n      errorText: this._failureText\n    };\n  }\n\n  timing(): ResourceTiming {\n    return this._timing;\n  }\n\n  _finalRequest(): Request {\n    return this._redirectedTo ? this._redirectedTo._finalRequest() : this;\n  }\n}\n\nexport class InterceptedResponse implements api.Response {\n  private readonly _route: Route;\n  private readonly _initializer: channels.InterceptedResponse;\n  private readonly _request: Request;\n  private readonly _headers: Headers;\n\n  constructor(route: Route, initializer: channels.InterceptedResponse) {\n    this._route = route;\n    this._initializer = initializer;\n    this._headers = headersArrayToObject(initializer.headers, true /* lowerCase */);\n    this._request = Request.from(initializer.request);\n  }\n\n  async securityDetails(): Promise<{ issuer?: string | undefined; protocol?: string | undefined; subjectName?: string | undefined; validFrom?: number | undefined; validTo?: number | undefined; } | null> {\n    return null;\n  }\n\n  async serverAddr(): Promise<{ ipAddress: string; port: number; } | null> {\n    return null;\n  }\n\n  async finished(): Promise<Error | null> {\n    const response = await this._request.response();\n    if (!response)\n      return null;\n    return await response.finished();\n  }\n\n  frame(): api.Frame {\n    return this._request.frame();\n  }\n\n  ok(): boolean {\n    return this._initializer.status === 0 || (this._initializer.status >= 200 && this._initializer.status <= 299);\n  }\n\n  url(): string {\n    return this._request.url();\n  }\n\n  status(): number {\n    return this._initializer.status;\n  }\n\n  statusText(): string {\n    return this._initializer.statusText;\n  }\n\n  headers(): Headers {\n    return { ...this._headers };\n  }\n\n  async body(): Promise<Buffer> {\n    return this._route._responseBody();\n  }\n\n  async text(): Promise<string> {\n    const content = await this.body();\n    return content.toString('utf8');\n  }\n\n  async json(): Promise<object> {\n    const content = await this.text();\n    return JSON.parse(content);\n  }\n\n  request(): Request {\n    return this._request;\n  }\n}\n\ntype InterceptResponse = true;\ntype NotInterceptResponse = false;\n\nexport class Route extends ChannelOwner<channels.RouteChannel, channels.RouteInitializer> implements api.Route {\n  static from(route: channels.RouteChannel): Route {\n    return (route as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.RouteInitializer) {\n    super(parent, type, guid, initializer);\n  }\n\n  request(): Request {\n    return Request.from(this._initializer.request);\n  }\n\n  async abort(errorCode?: string) {\n    return this._wrapApiCall(async (channel: channels.RouteChannel) => {\n      await channel.abort({ errorCode });\n    });\n  }\n\n  async fulfill(options: { status?: number, headers?: Headers, contentType?: string, body?: string | Buffer, path?: string } = {}) {\n    return this._wrapApiCall(async (channel: channels.RouteChannel) => {\n      let body = undefined;\n      let isBase64 = false;\n      let length = 0;\n      if (options.path) {\n        const buffer = await fs.promises.readFile(options.path);\n        body = buffer.toString('base64');\n        isBase64 = true;\n        length = buffer.length;\n      } else if (isString(options.body)) {\n        body = options.body;\n        isBase64 = false;\n        length = Buffer.byteLength(body);\n      } else if (options.body) {\n        body = options.body.toString('base64');\n        isBase64 = true;\n        length = options.body.length;\n      }\n\n      const headers: Headers = {};\n      for (const header of Object.keys(options.headers || {}))\n        headers[header.toLowerCase()] = String(options.headers![header]);\n      if (options.contentType)\n        headers['content-type'] = String(options.contentType);\n      else if (options.path)\n        headers['content-type'] = mime.getType(options.path) || 'application/octet-stream';\n      if (length && !('content-length' in headers))\n        headers['content-length'] = String(length);\n\n      await channel.fulfill({\n        status: options.status || 200,\n        headers: headersObjectToArray(headers),\n        body,\n        isBase64\n      });\n    });\n  }\n\n  async _intercept(options: { url?: string, method?: string, headers?: Headers, postData?: string | Buffer, interceptResponse?: boolean } = {}): Promise<api.Response> {\n    return await this._continue(options, true);\n  }\n\n  async continue(options: { url?: string, method?: string, headers?: Headers, postData?: string | Buffer } = {}) {\n    await this._continue(options, false);\n  }\n\n  async _continue(options: { url?: string, method?: string, headers?: Headers, postData?: string | Buffer }, interceptResponse: NotInterceptResponse): Promise<null>;\n  async _continue(options: { url?: string, method?: string, headers?: Headers, postData?: string | Buffer }, interceptResponse: InterceptResponse): Promise<api.Response>;\n  async _continue(options: { url?: string, method?: string, headers?: Headers, postData?: string | Buffer }, interceptResponse: boolean): Promise<null|api.Response> {\n    return await this._wrapApiCall(async (channel: channels.RouteChannel) => {\n      const postDataBuffer = isString(options.postData) ? Buffer.from(options.postData, 'utf8') : options.postData;\n      const result = await channel.continue({\n        url: options.url,\n        method: options.method,\n        headers: options.headers ? headersObjectToArray(options.headers) : undefined,\n        postData: postDataBuffer ? postDataBuffer.toString('base64') : undefined,\n        interceptResponse,\n      });\n      if (result.response)\n        return new InterceptedResponse(this, result.response);\n      return null;\n    });\n  }\n\n  async _responseBody(): Promise<Buffer> {\n    return this._wrapApiCall(async (channel: channels.RouteChannel) => {\n      return Buffer.from((await channel.responseBody()).binary, 'base64');\n    });\n  }\n}\n\nexport type RouteHandler = (route: Route, request: Request) => void;\n\nexport type ResourceTiming = {\n  startTime: number;\n  domainLookupStart: number;\n  domainLookupEnd: number;\n  connectStart: number;\n  secureConnectionStart: number;\n  connectEnd: number;\n  requestStart: number;\n  responseStart: number;\n  responseEnd: number;\n};\n\nexport class Response extends ChannelOwner<channels.ResponseChannel, channels.ResponseInitializer> implements api.Response {\n  private _headers: Headers;\n  private _request: Request;\n\n  static from(response: channels.ResponseChannel): Response {\n    return (response as any)._object;\n  }\n\n  static fromNullable(response: channels.ResponseChannel | undefined): Response | null {\n    return response ? Response.from(response) : null;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.ResponseInitializer) {\n    super(parent, type, guid, initializer);\n    this._headers = headersArrayToObject(initializer.headers, true /* lowerCase */);\n    this._request = Request.from(this._initializer.request);\n    this._request._headers = headersArrayToObject(initializer.requestHeaders, true /* lowerCase */);\n    Object.assign(this._request._timing, this._initializer.timing);\n  }\n\n  url(): string {\n    return this._initializer.url;\n  }\n\n  ok(): boolean {\n    return this._initializer.status === 0 || (this._initializer.status >= 200 && this._initializer.status <= 299);\n  }\n\n  status(): number {\n    return this._initializer.status;\n  }\n\n  statusText(): string {\n    return this._initializer.statusText;\n  }\n\n  headers(): Headers {\n    return { ...this._headers };\n  }\n\n  async finished(): Promise<Error | null> {\n    return this._wrapApiCall(async (channel: channels.ResponseChannel) => {\n      const result = await channel.finished();\n      if (result.error)\n        return new Error(result.error);\n      return null;\n    });\n  }\n\n  async body(): Promise<Buffer> {\n    return this._wrapApiCall(async (channel: channels.ResponseChannel) => {\n      return Buffer.from((await channel.body()).binary, 'base64');\n    });\n  }\n\n  async text(): Promise<string> {\n    const content = await this.body();\n    return content.toString('utf8');\n  }\n\n  async json(): Promise<object> {\n    const content = await this.text();\n    return JSON.parse(content);\n  }\n\n  request(): Request {\n    return this._request;\n  }\n\n  frame(): Frame {\n    return this._request.frame();\n  }\n\n  async serverAddr(): Promise<RemoteAddr|null> {\n    return this._wrapApiCall(async (channel: channels.ResponseChannel) => {\n      return (await channel.serverAddr()).value || null;\n    });\n  }\n\n  async securityDetails(): Promise<SecurityDetails|null> {\n    return this._wrapApiCall(async (channel: channels.ResponseChannel) => {\n      return (await channel.securityDetails()).value || null;\n    });\n  }\n}\n\nexport class WebSocket extends ChannelOwner<channels.WebSocketChannel, channels.WebSocketInitializer> implements api.WebSocket {\n  private _page: Page;\n  private _isClosed: boolean;\n\n  static from(webSocket: channels.WebSocketChannel): WebSocket {\n    return (webSocket as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.WebSocketInitializer) {\n    super(parent, type, guid, initializer);\n    this._isClosed = false;\n    this._page = parent as Page;\n    this._channel.on('frameSent', (event: { opcode: number, data: string }) => {\n      if (event.opcode === 1)\n        this.emit(Events.WebSocket.FrameSent, { payload: event.data });\n      else if (event.opcode === 2)\n        this.emit(Events.WebSocket.FrameSent, { payload: Buffer.from(event.data, 'base64') });\n    });\n    this._channel.on('frameReceived', (event: { opcode: number, data: string }) => {\n      if (event.opcode === 1)\n        this.emit(Events.WebSocket.FrameReceived, { payload: event.data });\n      else if (event.opcode === 2)\n        this.emit(Events.WebSocket.FrameReceived, { payload: Buffer.from(event.data, 'base64') });\n    });\n    this._channel.on('socketError', ({ error }) => this.emit(Events.WebSocket.Error, error));\n    this._channel.on('close', () => {\n      this._isClosed = true;\n      this.emit(Events.WebSocket.Close, this);\n    });\n  }\n\n  url(): string {\n    return this._initializer.url;\n  }\n\n  isClosed(): boolean {\n    return this._isClosed;\n  }\n\n  async waitForEvent(event: string, optionsOrPredicate: WaitForEventOptions = {}): Promise<any> {\n    return this._wrapApiCall(async (channel: channels.WebSocketChannel) => {\n      const timeout = this._page._timeoutSettings.timeout(typeof optionsOrPredicate === 'function' ? {} : optionsOrPredicate);\n      const predicate = typeof optionsOrPredicate === 'function' ? optionsOrPredicate : optionsOrPredicate.predicate;\n      const waiter = Waiter.createForEvent(this, event);\n      waiter.rejectOnTimeout(timeout, `Timeout while waiting for event \"${event}\"`);\n      if (event !== Events.WebSocket.Error)\n        waiter.rejectOnEvent(this, Events.WebSocket.Error, new Error('Socket error'));\n      if (event !== Events.WebSocket.Close)\n        waiter.rejectOnEvent(this, Events.WebSocket.Close, new Error('Socket closed'));\n      waiter.rejectOnEvent(this._page, Events.Page.Close, new Error('Page closed'));\n      const result = await waiter.waitForEvent(this, event, predicate as any);\n      waiter.dispose();\n      return result;\n    });\n  }\n}\n\nexport function validateHeaders(headers: Headers) {\n  for (const key of Object.keys(headers)) {\n    const value = headers[key];\n    if (!Object.is(value, undefined) && !isString(value))\n      throw new Error(`Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n  }\n}\n"],"file":"network.js"}