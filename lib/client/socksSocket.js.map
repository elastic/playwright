{"version":3,"sources":["../../src/client/socksSocket.ts"],"names":["SocksSocket","ChannelOwner","from","socket","_object","constructor","parent","type","guid","initializer","_socket","Playwright","_forwardPorts","includes","_initializer","dstPort","dstAddr","process","env","PW_TEST_PROXY_TARGET","Number","net","createConnection","on","err","_channel","error","String","connected","catch","data","write","end","writable","Buffer","_connection","toString"],"mappings":";;;;;;;AAgBA;;AAGA;;AACA;;AACA;;;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASO,MAAMA,WAAN,SAA0BC,0BAA1B,CAAsG;AAEhG,SAAJC,IAAI,CAACC,MAAD,EAAmD;AAC5D,WAAQA,MAAD,CAAgBC,OAAvB;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAuBC,IAAvB,EAAqCC,IAArC,EAAmDC,WAAnD,EAAiG;AAC1G,UAAMH,MAAN,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,WAA1B;AAD0G,SALpGC,OAKoG;AAE1G,uBAAOJ,MAAM,YAAYK,sBAAzB;AAEA,uBAAOL,MAAM,CAACM,aAAP,CAAqBC,QAArB,CAA8B,KAAKC,YAAL,CAAkBC,OAAhD,CAAP;AACA,uBAAO,6BAAiB,KAAKD,YAAL,CAAkBE,OAAnC,CAAP;AAEA,QAAI,6BAAiBC,OAAO,CAACC,GAAR,CAAYC,oBAAjC,EACE,KAAKL,YAAL,CAAkBC,OAAlB,GAA4BK,MAAM,CAACH,OAAO,CAACC,GAAR,CAAYC,oBAAb,CAAlC;AAEF,SAAKT,OAAL,GAAeW,aAAIC,gBAAJ,CAAqB,KAAKR,YAAL,CAAkBC,OAAvC,EAAgD,KAAKD,YAAL,CAAkBE,OAAlE,CAAf;;AACA,SAAKN,OAAL,CAAaa,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAgB,KAAKC,QAAL,CAAcC,KAAd,CAAoB;AAACA,MAAAA,KAAK,EAAEC,MAAM,CAACH,GAAD;AAAd,KAApB,CAAzC;;AACA,SAAKd,OAAL,CAAaa,EAAb,CAAgB,SAAhB,EAA2B,MAAM;AAC/B,WAAKK,SAAL,GAAiBC,KAAjB,CAAuB,MAAM,CAAE,CAA/B;;AACA,WAAKnB,OAAL,CAAaa,EAAb,CAAgB,MAAhB,EAAwBO,IAAI,IAAI,KAAKC,KAAL,CAAWD,IAAX,EAAiBD,KAAjB,CAAuB,MAAM,CAAE,CAA/B,CAAhC;AACD,KAHD;;AAIA,SAAKnB,OAAL,CAAaa,EAAb,CAAgB,OAAhB,EAAyB,MAAM;AAC7B,WAAKS,GAAL,GAAWH,KAAX,CAAiB,MAAM,CAAE,CAAzB;AACD,KAFD;;AAIA,SAAKJ,QAAL,CAAcF,EAAd,CAAiB,MAAjB,EAAyB,CAAC;AAAEO,MAAAA;AAAF,KAAD,KAAc;AACrC,UAAI,CAAC,KAAKpB,OAAL,CAAauB,QAAlB,EACE;;AACF,WAAKvB,OAAL,CAAaqB,KAAb,CAAmBG,MAAM,CAAChC,IAAP,CAAY4B,IAAZ,EAAkB,QAAlB,CAAnB;AACD,KAJD;;AAKA,SAAKL,QAAL,CAAcF,EAAd,CAAiB,OAAjB,EAA0B,MAAM,KAAKb,OAAL,CAAasB,GAAb,EAAhC;;AAEA,SAAKG,WAAL,CAAiBZ,EAAjB,CAAoB,YAApB,EAAkC,MAAM,KAAKb,OAAL,CAAasB,GAAb,EAAxC;AACD;;AAEU,QAALD,KAAK,CAACD,IAAD,EAA8B;AACvC,UAAM,KAAKL,QAAL,CAAcM,KAAd,CAAoB;AAAED,MAAAA,IAAI,EAAEA,IAAI,CAACM,QAAL,CAAc,QAAd;AAAR,KAApB,CAAN;AACD;;AAEQ,QAAHJ,GAAG,GAAkB;AACzB,UAAM,KAAKP,QAAL,CAAcO,GAAd,EAAN;AACD;;AAEc,QAATJ,SAAS,GAAkB;AAC/B,UAAM,KAAKH,QAAL,CAAcG,SAAd,EAAN;AACD;;AA9C0G","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport net from 'net';\n\nimport * as channels from '../protocol/channels';\nimport { Playwright } from './playwright';\nimport { assert, isLocalIpAddress, isUnderTest } from '../utils/utils';\nimport { ChannelOwner } from './channelOwner';\n\nexport class SocksSocket extends ChannelOwner<channels.SocksSocketChannel, channels.SocksSocketInitializer>  {\n  private _socket: net.Socket;\n  static from(socket: channels.SocksSocketChannel): SocksSocket {\n    return (socket as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.SocksSocketInitializer) {\n    super(parent, type, guid, initializer);\n    assert(parent instanceof Playwright);\n\n    assert(parent._forwardPorts.includes(this._initializer.dstPort));\n    assert(isLocalIpAddress(this._initializer.dstAddr));\n\n    if (isUnderTest() && process.env.PW_TEST_PROXY_TARGET)\n      this._initializer.dstPort = Number(process.env.PW_TEST_PROXY_TARGET);\n\n    this._socket = net.createConnection(this._initializer.dstPort, this._initializer.dstAddr);\n    this._socket.on('error', (err: Error) => this._channel.error({error: String(err)}));\n    this._socket.on('connect', () => {\n      this.connected().catch(() => {});\n      this._socket.on('data', data => this.write(data).catch(() => {}));\n    });\n    this._socket.on('close', () => {\n      this.end().catch(() => {});\n    });\n\n    this._channel.on('data', ({ data }) => {\n      if (!this._socket.writable)\n        return;\n      this._socket.write(Buffer.from(data, 'base64'));\n    });\n    this._channel.on('close', () => this._socket.end());\n\n    this._connection.on('disconnect', () => this._socket.end());\n  }\n\n  async write(data: Buffer): Promise<void> {\n    await this._channel.write({ data: data.toString('base64') });\n  }\n\n  async end(): Promise<void> {\n    await this._channel.end();\n  }\n\n  async connected(): Promise<void> {\n    await this._channel.connected();\n  }\n}\n"],"file":"socksSocket.js"}