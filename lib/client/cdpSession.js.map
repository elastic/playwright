{"version":3,"sources":["../../src/client/cdpSession.ts"],"names":["CDPSession","ChannelOwner","from","cdpSession","_object","constructor","parent","type","guid","initializer","_channel","on","method","params","emit","addListener","off","removeListener","once","send","_wrapApiCall","channel","result","detach"],"mappings":";;;;;;;AAiBA;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOO,MAAMA,UAAN,SAAyBC,0BAAzB,CAA4H;AACtH,SAAJC,IAAI,CAACC,UAAD,EAAqD;AAC9D,WAAQA,UAAD,CAAoBC,OAA3B;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAuBC,IAAvB,EAAqCC,IAArC,EAAmDC,WAAnD,EAAgG;AACzG,UAAMH,MAAN,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,WAA1B;;AAEA,SAAKC,QAAL,CAAcC,EAAd,CAAiB,OAAjB,EAA0B,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,KAAwB;AAChD,WAAKC,IAAL,CAAUF,MAAV,EAAkBC,MAAlB;AACD,KAFD;;AAIA,SAAKF,EAAL,GAAU,MAAMA,EAAhB;AACA,SAAKI,WAAL,GAAmB,MAAMA,WAAzB;AACA,SAAKC,GAAL,GAAW,MAAMC,cAAjB;AACA,SAAKA,cAAL,GAAsB,MAAMA,cAA5B;AACA,SAAKC,IAAL,GAAY,MAAMA,IAAlB;AACD;;AAES,QAAJC,IAAI,CACRP,MADQ,EAERC,MAFQ,EAGkC;AAC1C,WAAO,KAAKO,YAAL,CAAkB,MAAOC,OAAP,IAA+C;AACtE,YAAMC,MAAM,GAAG,MAAMD,OAAO,CAACF,IAAR,CAAa;AAAEP,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAb,CAArB;AACA,aAAOS,MAAM,CAACA,MAAd;AACD,KAHM,CAAP;AAID;;AAEW,QAANC,MAAM,GAAG;AACb,WAAO,KAAKH,YAAL,CAAkB,MAAOC,OAAP,IAA+C;AACtE,aAAOA,OAAO,CAACE,MAAR,EAAP;AACD,KAFM,CAAP;AAGD;;AAjCgI","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport { ChannelOwner } from './channelOwner';\nimport { Protocol } from '../server/chromium/protocol';\nimport * as api from '../../types/types';\n\nexport class CDPSession extends ChannelOwner<channels.CDPSessionChannel, channels.CDPSessionInitializer> implements api.CDPSession {\n  static from(cdpSession: channels.CDPSessionChannel): CDPSession {\n    return (cdpSession as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.CDPSessionInitializer) {\n    super(parent, type, guid, initializer);\n\n    this._channel.on('event', ({ method, params }) => {\n      this.emit(method, params);\n    });\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    return this._wrapApiCall(async (channel: channels.CDPSessionChannel) => {\n      const result = await channel.send({ method, params });\n      return result.result as Protocol.CommandReturnValues[T];\n    });\n  }\n\n  async detach() {\n    return this._wrapApiCall(async (channel: channels.CDPSessionChannel) => {\n      return channel.detach();\n    });\n  }\n}\n"],"file":"cdpSession.js"}