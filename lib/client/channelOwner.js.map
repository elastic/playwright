{"version":3,"sources":["../../src/client/channelOwner.ts"],"names":["ChannelOwner","EventEmitter","constructor","parent","type","guid","initializer","_connection","_parent","_objects","Map","_type","_guid","_channel","_initializer","_logger","_csi","setMaxListeners","undefined","set","_createChannel","_dispose","delete","object","values","clear","_debugScopeState","objects","Array","from","map","o","base","stackTrace","channel","Proxy","get","obj","prop","params","sendMessageToServer","validator","scheme","paramsName","_object","_wrapApiCall","func","logger","apiName","frameTexts","ancestorWithCSI","csiCallback","logApiCall","onApiCall","result","e","innerError","process","env","PWDEBUGIMPL","stack","message","join","toJSON","isEnabled","log","color","debugLogger","method","toUpperCase","substring","tChannel","name","arg","path","ValidationError"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'events';\nimport * as channels from '../protocol/channels';\nimport { createScheme, ValidationError, Validator } from '../protocol/validator';\nimport { debugLogger } from '../utils/debugLogger';\nimport { captureStackTrace, ParsedStackTrace } from '../utils/stackTrace';\nimport { isUnderTest } from '../utils/utils';\nimport type { Connection } from './connection';\nimport type { ClientSideInstrumentation, Logger } from './types';\n\nexport abstract class ChannelOwner<T extends channels.Channel = channels.Channel, Initializer = {}> extends EventEmitter {\n  protected _connection: Connection;\n  private _parent: ChannelOwner | undefined;\n  private _objects = new Map<string, ChannelOwner>();\n\n  readonly _type: string;\n  readonly _guid: string;\n  readonly _channel: T;\n  readonly _initializer: Initializer;\n  _logger: Logger | undefined;\n  _csi: ClientSideInstrumentation | undefined;\n\n  constructor(parent: ChannelOwner | Connection, type: string, guid: string, initializer: Initializer) {\n    super();\n    this.setMaxListeners(0);\n    this._connection = parent instanceof ChannelOwner ? parent._connection : parent;\n    this._type = type;\n    this._guid = guid;\n    this._parent = parent instanceof ChannelOwner ? parent : undefined;\n\n    this._connection._objects.set(guid, this);\n    if (this._parent) {\n      this._parent._objects.set(guid, this);\n      this._logger = this._parent._logger;\n    }\n\n    this._channel = this._createChannel(new EventEmitter(), null);\n    this._initializer = initializer;\n  }\n\n  _dispose() {\n    // Clean up from parent and connection.\n    if (this._parent)\n      this._parent._objects.delete(this._guid);\n    this._connection._objects.delete(this._guid);\n\n    // Dispose all children.\n    for (const object of [...this._objects.values()])\n      object._dispose();\n    this._objects.clear();\n  }\n\n  _debugScopeState(): any {\n    return {\n      _guid: this._guid,\n      objects: Array.from(this._objects.values()).map(o => o._debugScopeState()),\n    };\n  }\n\n  private _createChannel(base: Object, stackTrace: ParsedStackTrace | null): T {\n    const channel = new Proxy(base, {\n      get: (obj: any, prop) => {\n        if (prop === 'debugScopeState')\n          return (params: any) => this._connection.sendMessageToServer(this, prop, params, stackTrace);\n        if (typeof prop === 'string') {\n          const validator = scheme[paramsName(this._type, prop)];\n          if (validator)\n            return (params: any) => this._connection.sendMessageToServer(this, prop, validator(params, ''), stackTrace);\n        }\n        return obj[prop];\n      },\n    });\n    (channel as any)._object = this;\n    return channel;\n  }\n\n  async _wrapApiCall<R, C extends channels.Channel>(func: (channel: C, stackTrace: ParsedStackTrace) => Promise<R>, logger?: Logger): Promise<R> {\n    logger = logger || this._logger;\n    const stackTrace = captureStackTrace();\n    const { apiName, frameTexts } = stackTrace;\n    const channel = this._createChannel({}, stackTrace);\n\n    let ancestorWithCSI: ChannelOwner<any> = this;\n    while (!ancestorWithCSI._csi && ancestorWithCSI._parent)\n      ancestorWithCSI = ancestorWithCSI._parent;\n    let csiCallback: ((e?: Error) => void) | undefined;\n\n    try {\n      logApiCall(logger, `=> ${apiName} started`);\n      csiCallback = ancestorWithCSI._csi?.onApiCall(apiName);\n      const result = await func(channel as any, stackTrace);\n      csiCallback?.();\n      logApiCall(logger, `<= ${apiName} succeeded`);\n      return result;\n    } catch (e) {\n      const innerError = ((process.env.PWDEBUGIMPL || isUnderTest()) && e.stack) ? '\\n<inner error>\\n' + e.stack : '';\n      e.message = apiName + ': ' + e.message;\n      e.stack = e.message + '\\n' + frameTexts.join('\\n') + innerError;\n      csiCallback?.(e);\n      logApiCall(logger, `<= ${apiName} failed`);\n      throw e;\n    }\n  }\n\n  private toJSON() {\n    // Jest's expect library tries to print objects sometimes.\n    // RPC objects can contain links to lots of other objects,\n    // which can cause jest to crash. Let's help it out\n    // by just returning the important values.\n    return {\n      _type: this._type,\n      _guid: this._guid,\n    };\n  }\n}\n\nfunction logApiCall(logger: Logger | undefined, message: string) {\n  if (logger && logger.isEnabled('api', 'info'))\n    logger.log('api', 'info', message, [], { color: 'cyan' });\n  debugLogger.log('api', message);\n}\n\nfunction paramsName(type: string, method: string) {\n  return type + method[0].toUpperCase() + method.substring(1) + 'Params';\n}\n\nconst tChannel = (name: string): Validator => {\n  return (arg: any, path: string) => {\n    if (arg._object instanceof ChannelOwner && (name === '*' || arg._object._type === name))\n      return { guid: arg._object._guid };\n    throw new ValidationError(`${path}: expected ${name}`);\n  };\n};\n\nconst scheme = createScheme(tChannel);\n"],"file":"channelOwner.js"}