{"version":3,"sources":["../../src/client/artifact.ts"],"names":["Artifact","ChannelOwner","_isRemote","from","channel","_object","pathAfterFinished","Error","_wrapApiCall","value","saveAs","path","result","saveAsStream","stream","Stream","Promise","resolve","reject","pipe","fs","createWriteStream","on","failure","error","createReadStream","cancel","delete"],"mappings":";;;;;;;AAiBA;;AACA;;AACA;;AACA;;;;;;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASO,MAAMA,QAAN,SAAuBC,0BAAvB,CAA4F;AAAA;AAAA;AAAA,SACjGC,SADiG,GACrF,KADqF;AAAA;;AAGtF,SAAJC,IAAI,CAACC,OAAD,EAA8C;AACvD,WAAQA,OAAD,CAAiBC,OAAxB;AACD;;AAEsB,QAAjBC,iBAAiB,GAA2B;AAChD,QAAI,KAAKJ,SAAT,EACE,MAAM,IAAIK,KAAJ,CAAW,4FAAX,CAAN;AACF,WAAO,KAAKC,YAAL,CAAkB,MAAOJ,OAAP,IAA6C;AACpE,aAAO,CAAC,MAAMA,OAAO,CAACE,iBAAR,EAAP,EAAoCG,KAApC,IAA6C,IAApD;AACD,KAFM,CAAP;AAGD;;AAEW,QAANC,MAAM,CAACC,IAAD,EAA8B;AACxC,WAAO,KAAKH,YAAL,CAAkB,MAAOJ,OAAP,IAA6C;AACpE,UAAI,CAAC,KAAKF,SAAV,EAAqB;AACnB,cAAME,OAAO,CAACM,MAAR,CAAe;AAAEC,UAAAA;AAAF,SAAf,CAAN;AACA;AACD;;AAED,YAAMC,MAAM,GAAG,MAAMR,OAAO,CAACS,YAAR,EAArB;;AACA,YAAMC,MAAM,GAAGC,eAAOZ,IAAP,CAAYS,MAAM,CAACE,MAAnB,CAAf;;AACA,YAAM,0BAAcH,IAAd,CAAN;AACA,YAAM,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCJ,QAAAA,MAAM,CAACA,MAAP,GAAgBK,IAAhB,CAAqBC,EAAE,CAACC,iBAAH,CAAqBV,IAArB,CAArB,EACKW,EADL,CACQ,QADR,EACyBL,OADzB,EAEKK,EAFL,CAEQ,OAFR,EAEwBJ,MAFxB;AAGD,OAJK,CAAN;AAKD,KAdM,CAAP;AAeD;;AAEY,QAAPK,OAAO,GAA2B;AACtC,WAAO,KAAKf,YAAL,CAAkB,MAAOJ,OAAP,IAA6C;AACpE,aAAO,CAAC,MAAMA,OAAO,CAACmB,OAAR,EAAP,EAA0BC,KAA1B,IAAmC,IAA1C;AACD,KAFM,CAAP;AAGD;;AAEqB,QAAhBC,gBAAgB,GAA6B;AACjD,WAAO,KAAKjB,YAAL,CAAkB,MAAOJ,OAAP,IAA6C;AACpE,YAAMQ,MAAM,GAAG,MAAMR,OAAO,CAACU,MAAR,EAArB;AACA,UAAI,CAACF,MAAM,CAACE,MAAZ,EACE,OAAO,IAAP;;AACF,YAAMA,MAAM,GAAGC,eAAOZ,IAAP,CAAYS,MAAM,CAACE,MAAnB,CAAf;;AACA,aAAOA,MAAM,CAACA,MAAP,EAAP;AACD,KANM,CAAP;AAOD;;AAEW,QAANY,MAAM,GAAkB;AAC5B,WAAO,KAAKlB,YAAL,CAAkB,MAAOJ,OAAP,IAA6C;AACpE,aAAOA,OAAO,CAACsB,MAAR,EAAP;AACD,KAFM,CAAP;AAGD;;AAEW,QAANC,MAAM,GAAkB;AAC5B,WAAO,KAAKnB,YAAL,CAAkB,MAAOJ,OAAP,IAA6C;AACpE,aAAOA,OAAO,CAACuB,MAAR,EAAP;AACD,KAFM,CAAP;AAGD;;AA3DgG","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport * as fs from 'fs';\nimport { Stream } from './stream';\nimport { mkdirIfNeeded } from '../utils/utils';\nimport { ChannelOwner } from './channelOwner';\nimport { Readable } from 'stream';\n\nexport class Artifact extends ChannelOwner<channels.ArtifactChannel, channels.ArtifactInitializer> {\n  _isRemote = false;\n\n  static from(channel: channels.ArtifactChannel): Artifact {\n    return (channel as any)._object;\n  }\n\n  async pathAfterFinished(): Promise<string | null> {\n    if (this._isRemote)\n      throw new Error(`Path is not available when using browserType.connect(). Use saveAs() to save a local copy.`);\n    return this._wrapApiCall(async (channel: channels.ArtifactChannel) => {\n      return (await channel.pathAfterFinished()).value || null;\n    });\n  }\n\n  async saveAs(path: string): Promise<void> {\n    return this._wrapApiCall(async (channel: channels.ArtifactChannel) => {\n      if (!this._isRemote) {\n        await channel.saveAs({ path });\n        return;\n      }\n\n      const result = await channel.saveAsStream();\n      const stream = Stream.from(result.stream);\n      await mkdirIfNeeded(path);\n      await new Promise((resolve, reject) => {\n        stream.stream().pipe(fs.createWriteStream(path))\n            .on('finish' as any, resolve)\n            .on('error' as any, reject);\n      });\n    });\n  }\n\n  async failure(): Promise<string | null> {\n    return this._wrapApiCall(async (channel: channels.ArtifactChannel) => {\n      return (await channel.failure()).error || null;\n    });\n  }\n\n  async createReadStream(): Promise<Readable | null> {\n    return this._wrapApiCall(async (channel: channels.ArtifactChannel) => {\n      const result = await channel.stream();\n      if (!result.stream)\n        return null;\n      const stream = Stream.from(result.stream);\n      return stream.stream();\n    });\n  }\n\n  async cancel(): Promise<void> {\n    return this._wrapApiCall(async (channel: channels.ArtifactChannel) => {\n      return channel.cancel();\n    });\n  }\n\n  async delete(): Promise<void> {\n    return this._wrapApiCall(async (channel: channels.ArtifactChannel) => {\n      return channel.delete();\n    });\n  }\n}\n"],"file":"artifact.js"}