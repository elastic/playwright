{"version":3,"sources":["../../src/client/input.ts"],"names":["Keyboard","constructor","channel","_channel","down","key","keyboardDown","up","keyboardUp","insertText","text","keyboardInsertText","type","options","keyboardType","press","keyboardPress","Mouse","move","x","y","mouseMove","mouseDown","mouseUp","click","mouseClick","dblclick","clickCount","Touchscreen","tap","touchscreenTap"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKO,MAAMA,QAAN,CAAuC;AAG5CC,EAAAA,WAAW,CAACC,OAAD,EAAgC;AAAA,SAFnCC,QAEmC;AACzC,SAAKA,QAAL,GAAgBD,OAAhB;AACD;;AAES,QAAJE,IAAI,CAACC,GAAD,EAAc;AACtB,UAAM,KAAKF,QAAL,CAAcG,YAAd,CAA2B;AAAED,MAAAA;AAAF,KAA3B,CAAN;AACD;;AAEO,QAAFE,EAAE,CAACF,GAAD,EAAc;AACpB,UAAM,KAAKF,QAAL,CAAcK,UAAd,CAAyB;AAAEH,MAAAA;AAAF,KAAzB,CAAN;AACD;;AAEe,QAAVI,UAAU,CAACC,IAAD,EAAe;AAC7B,UAAM,KAAKP,QAAL,CAAcQ,kBAAd,CAAiC;AAAED,MAAAA;AAAF,KAAjC,CAAN;AACD;;AAES,QAAJE,IAAI,CAACF,IAAD,EAAeG,OAAyC,GAAG,EAA3D,EAA+D;AACvE,UAAM,KAAKV,QAAL,CAAcW,YAAd,CAA2B;AAAEJ,MAAAA,IAAF;AAAQ,SAAGG;AAAX,KAA3B,CAAN;AACD;;AAEU,QAALE,KAAK,CAACV,GAAD,EAAcQ,OAA0C,GAAG,EAA3D,EAA+D;AACxE,UAAM,KAAKV,QAAL,CAAca,aAAd,CAA4B;AAAEX,MAAAA,GAAF;AAAO,SAAGQ;AAAV,KAA5B,CAAN;AACD;;AAzB2C;;;;AA4BvC,MAAMI,KAAN,CAAiC;AAGtChB,EAAAA,WAAW,CAACC,OAAD,EAAgC;AAAA,SAFnCC,QAEmC;AACzC,SAAKA,QAAL,GAAgBD,OAAhB;AACD;;AAES,QAAJgB,IAAI,CAACC,CAAD,EAAYC,CAAZ,EAAuBP,OAA2B,GAAG,EAArD,EAAyD;AACjE,UAAM,KAAKV,QAAL,CAAckB,SAAd,CAAwB;AAAEF,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQ,SAAGP;AAAX,KAAxB,CAAN;AACD;;AAES,QAAJT,IAAI,CAACS,OAAsC,GAAG,EAA1C,EAA8C;AACtD,UAAM,KAAKV,QAAL,CAAcmB,SAAd,CAAwB,EAAE,GAAGT;AAAL,KAAxB,CAAN;AACD;;AAEO,QAAFN,EAAE,CAACM,OAAoC,GAAG,EAAxC,EAA4C;AAClD,UAAM,KAAKV,QAAL,CAAcoB,OAAd,CAAsBV,OAAtB,CAAN;AACD;;AAEU,QAALW,KAAK,CAACL,CAAD,EAAYC,CAAZ,EAAuBP,OAAuC,GAAG,EAAjE,EAAqE;AAC9E,UAAM,KAAKV,QAAL,CAAcsB,UAAd,CAAyB;AAAEN,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQ,SAAGP;AAAX,KAAzB,CAAN;AACD;;AAEa,QAARa,QAAQ,CAACP,CAAD,EAAYC,CAAZ,EAAuBP,OAA2D,GAAG,EAArF,EAAyF;AACrG,UAAM,KAAKW,KAAL,CAAWL,CAAX,EAAcC,CAAd,EAAiB,EAAE,GAAGP,OAAL;AAAcc,MAAAA,UAAU,EAAE;AAA1B,KAAjB,CAAN;AACD;;AAzBqC;;;;AA4BjC,MAAMC,WAAN,CAA6C;AAGlD3B,EAAAA,WAAW,CAACC,OAAD,EAAgC;AAAA,SAFnCC,QAEmC;AACzC,SAAKA,QAAL,GAAgBD,OAAhB;AACD;;AAEQ,QAAH2B,GAAG,CAACV,CAAD,EAAYC,CAAZ,EAAuB;AAC9B,UAAM,KAAKjB,QAAL,CAAc2B,cAAd,CAA6B;AAACX,MAAAA,CAAD;AAAIC,MAAAA;AAAJ,KAA7B,CAAN;AACD;;AATiD","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport * as api from '../../types/types';\n\nexport class Keyboard implements api.Keyboard {\n  private _channel: channels.PageChannel;\n\n  constructor(channel: channels.PageChannel) {\n    this._channel = channel;\n  }\n\n  async down(key: string) {\n    await this._channel.keyboardDown({ key });\n  }\n\n  async up(key: string) {\n    await this._channel.keyboardUp({ key });\n  }\n\n  async insertText(text: string) {\n    await this._channel.keyboardInsertText({ text });\n  }\n\n  async type(text: string, options: channels.PageKeyboardTypeOptions = {}) {\n    await this._channel.keyboardType({ text, ...options });\n  }\n\n  async press(key: string, options: channels.PageKeyboardPressOptions = {}) {\n    await this._channel.keyboardPress({ key, ...options });\n  }\n}\n\nexport class Mouse implements api.Mouse {\n  private _channel: channels.PageChannel;\n\n  constructor(channel: channels.PageChannel) {\n    this._channel = channel;\n  }\n\n  async move(x: number, y: number, options: { steps?: number } = {}) {\n    await this._channel.mouseMove({ x, y, ...options });\n  }\n\n  async down(options: channels.PageMouseDownOptions = {}) {\n    await this._channel.mouseDown({ ...options });\n  }\n\n  async up(options: channels.PageMouseUpOptions = {}) {\n    await this._channel.mouseUp(options);\n  }\n\n  async click(x: number, y: number, options: channels.PageMouseClickOptions = {}) {\n    await this._channel.mouseClick({ x, y, ...options });\n  }\n\n  async dblclick(x: number, y: number, options: Omit<channels.PageMouseClickOptions, 'clickCount'> = {}) {\n    await this.click(x, y, { ...options, clickCount: 2 });\n  }\n}\n\nexport class Touchscreen implements api.Touchscreen {\n  private _channel: channels.PageChannel;\n\n  constructor(channel: channels.PageChannel) {\n    this._channel = channel;\n  }\n\n  async tap(x: number, y: number) {\n    await this._channel.touchscreenTap({x, y});\n  }\n}\n"],"file":"input.js"}