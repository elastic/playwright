{"version":3,"sources":["../../src/client/playwright.ts"],"names":["Playwright","ChannelOwner","constructor","parent","type","guid","initializer","_android","_electron","chromium","firefox","webkit","devices","selectors","errors","_selectorsOwner","_forwardPorts","BrowserType","from","Android","android","Electron","electron","name","descriptor","deviceDescriptors","sharedSelectors","TimeoutError","SelectorsOwner","_addChannel","_channel","on","socket","SocksSocket","channel","_object","_enablePortForwarding","ports","setForwardedPorts","_cleanup","_removeChannel"],"mappings":";;;;;;;AAiBA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBO,MAAMA,UAAN,SAAyBC,0BAAzB,CAAkG;AAYvGC,EAAAA,WAAW,CAACC,MAAD,EAAuBC,IAAvB,EAAqCC,IAArC,EAAmDC,WAAnD,EAAgG;AACzG,UAAMH,MAAN,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,WAA1B;AADyG,SAXlGC,QAWkG;AAAA,SAVlGC,SAUkG;AAAA,SATlGC,QASkG;AAAA,SARlGC,OAQkG;AAAA,SAPlGC,MAOkG;AAAA,SANlGC,OAMkG;AAAA,SALlGC,SAKkG;AAAA,SAJlGC,MAIkG;AAAA,SAHnGC,eAGmG;AAAA,SAF3GC,aAE2G,GAFjF,EAEiF;AAEzG,SAAKP,QAAL,GAAgBQ,yBAAYC,IAAZ,CAAiBZ,WAAW,CAACG,QAA7B,CAAhB;AACA,SAAKC,OAAL,GAAeO,yBAAYC,IAAZ,CAAiBZ,WAAW,CAACI,OAA7B,CAAf;AACA,SAAKC,MAAL,GAAcM,yBAAYC,IAAZ,CAAiBZ,WAAW,CAACK,MAA7B,CAAd;AACA,SAAKJ,QAAL,GAAgBY,iBAAQD,IAAR,CAAaZ,WAAW,CAACc,OAAzB,CAAhB;AACA,SAAKZ,SAAL,GAAiBa,mBAASH,IAAT,CAAcZ,WAAW,CAACgB,QAA1B,CAAjB;AACA,SAAKV,OAAL,GAAe,EAAf;;AACA,SAAK,MAAM;AAAEW,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAX,IAAmClB,WAAW,CAACmB,iBAA/C,EACE,KAAKb,OAAL,CAAaW,IAAb,IAAqBC,UAArB;;AACF,SAAKX,SAAL,GAAiBa,0BAAjB;AACA,SAAKZ,MAAL,GAAc;AAAEa,MAAAA,YAAY,EAAZA;AAAF,KAAd;AAEA,SAAKZ,eAAL,GAAuBa,0BAAeV,IAAf,CAAoBZ,WAAW,CAACO,SAAhC,CAAvB;;AACA,SAAKA,SAAL,CAAegB,WAAf,CAA2B,KAAKd,eAAhC;;AAEA,SAAKe,QAAL,CAAcC,EAAd,CAAiB,qBAAjB,EAAwC,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAcC,yBAAYf,IAAZ,CAAiBc,MAAjB,CAAtD;AACD;;AAEU,SAAJd,IAAI,CAACgB,OAAD,EAAkD;AAC3D,WAAQA,OAAD,CAAiBC,OAAxB;AACD;;AAE0B,QAArBC,qBAAqB,CAACC,KAAD,EAAkB;AAC3C,SAAKrB,aAAL,GAAqBqB,KAArB;AACA,UAAM,KAAKP,QAAL,CAAcQ,iBAAd,CAAgC;AAACD,MAAAA;AAAD,KAAhC,CAAN;AACD;;AAEDE,EAAAA,QAAQ,GAAG;AACT,SAAK1B,SAAL,CAAe2B,cAAf,CAA8B,KAAKzB,eAAnC;AACD;;AA1CsG","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport { BrowserType } from './browserType';\nimport { ChannelOwner } from './channelOwner';\nimport { Selectors, SelectorsOwner, sharedSelectors } from './selectors';\nimport { Electron } from './electron';\nimport { TimeoutError } from '../utils/errors';\nimport { Size } from './types';\nimport { Android } from './android';\nimport { SocksSocket } from './socksSocket';\n\ntype DeviceDescriptor = {\n  userAgent: string,\n  viewport: Size,\n  deviceScaleFactor: number,\n  isMobile: boolean,\n  hasTouch: boolean,\n  defaultBrowserType: 'chromium' | 'firefox' | 'webkit'\n};\ntype Devices = { [name: string]: DeviceDescriptor };\n\nexport class Playwright extends ChannelOwner<channels.PlaywrightChannel, channels.PlaywrightInitializer> {\n  readonly _android: Android;\n  readonly _electron: Electron;\n  readonly chromium: BrowserType;\n  readonly firefox: BrowserType;\n  readonly webkit: BrowserType;\n  readonly devices: Devices;\n  readonly selectors: Selectors;\n  readonly errors: { TimeoutError: typeof TimeoutError };\n  private _selectorsOwner: SelectorsOwner;\n  _forwardPorts: number[] = [];\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.PlaywrightInitializer) {\n    super(parent, type, guid, initializer);\n    this.chromium = BrowserType.from(initializer.chromium);\n    this.firefox = BrowserType.from(initializer.firefox);\n    this.webkit = BrowserType.from(initializer.webkit);\n    this._android = Android.from(initializer.android);\n    this._electron = Electron.from(initializer.electron);\n    this.devices = {};\n    for (const { name, descriptor } of initializer.deviceDescriptors)\n      this.devices[name] = descriptor;\n    this.selectors = sharedSelectors;\n    this.errors = { TimeoutError };\n\n    this._selectorsOwner = SelectorsOwner.from(initializer.selectors);\n    this.selectors._addChannel(this._selectorsOwner);\n\n    this._channel.on('incomingSocksSocket', ({socket}) => SocksSocket.from(socket));\n  }\n\n  static from(channel: channels.PlaywrightChannel): Playwright {\n    return (channel as any)._object;\n  }\n\n  async _enablePortForwarding(ports: number[]) {\n    this._forwardPorts = ports;\n    await this._channel.setForwardedPorts({ports});\n  }\n\n  _cleanup() {\n    this.selectors._removeChannel(this._selectorsOwner);\n  }\n}\n"],"file":"playwright.js"}