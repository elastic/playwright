{"version":3,"sources":["../../src/client/worker.ts"],"names":["Worker","ChannelOwner","from","worker","_object","constructor","parent","type","guid","initializer","_page","_context","_channel","on","_workers","delete","_serviceWorkers","emit","Events","Close","url","_initializer","evaluate","pageFunction","arg","arguments","length","_wrapApiCall","channel","result","evaluateExpression","expression","String","isFunction","value","evaluateHandle","evaluateExpressionHandle","JSHandle","handle"],"mappings":";;;;;;;AAgBA;;AAEA;;AACA;;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWO,MAAMA,MAAN,SAAqBC,0BAArB,CAA4G;AACvF;AACa;AAE5B,SAAJC,IAAI,CAACC,MAAD,EAAyC;AAClD,WAAQA,MAAD,CAAgBC,OAAvB;AACD;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAuBC,IAAvB,EAAqCC,IAArC,EAAmDC,WAAnD,EAA4F;AACrG,UAAMH,MAAN,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,WAA1B;AADqG,SAPvGC,KAOuG;AAAA,SANvGC,QAMuG;;AAErG,SAAKC,QAAL,CAAcC,EAAd,CAAiB,OAAjB,EAA0B,MAAM;AAC9B,UAAI,KAAKH,KAAT,EACE,KAAKA,KAAL,CAAWI,QAAX,CAAoBC,MAApB,CAA2B,IAA3B;AACF,UAAI,KAAKJ,QAAT,EACE,KAAKA,QAAL,CAAcK,eAAd,CAA8BD,MAA9B,CAAqC,IAArC;AACF,WAAKE,IAAL,CAAUC,eAAOlB,MAAP,CAAcmB,KAAxB,EAA+B,IAA/B;AACD,KAND;AAOD;;AAEDC,EAAAA,GAAG,GAAW;AACZ,WAAO,KAAKC,YAAL,CAAkBD,GAAzB;AACD;;AAEa,QAARE,QAAQ,CAASC,YAAT,EAAqDC,GAArD,EAA4E;AACxF,sCAAmBC,SAAS,CAACC,MAA7B,EAAqC,CAArC;AACA,WAAO,KAAKC,YAAL,CAAkB,MAAOC,OAAP,IAA2C;AAClE,YAAMC,MAAM,GAAG,MAAMD,OAAO,CAACE,kBAAR,CAA2B;AAAEC,QAAAA,UAAU,EAAEC,MAAM,CAACT,YAAD,CAApB;AAAoCU,QAAAA,UAAU,EAAE,OAAOV,YAAP,KAAwB,UAAxE;AAAoFC,QAAAA,GAAG,EAAE,iCAAkBA,GAAlB;AAAzF,OAA3B,CAArB;AACA,aAAO,2BAAYK,MAAM,CAACK,KAAnB,CAAP;AACD,KAHM,CAAP;AAID;;AAEmB,QAAdC,cAAc,CAASZ,YAAT,EAAqDC,GAArD,EAAiG;AACnH,sCAAmBC,SAAS,CAACC,MAA7B,EAAqC,CAArC;AACA,WAAO,KAAKC,YAAL,CAAkB,MAAOC,OAAP,IAA2C;AAClE,YAAMC,MAAM,GAAG,MAAMD,OAAO,CAACQ,wBAAR,CAAiC;AAAEL,QAAAA,UAAU,EAAEC,MAAM,CAACT,YAAD,CAApB;AAAoCU,QAAAA,UAAU,EAAE,OAAOV,YAAP,KAAwB,UAAxE;AAAoFC,QAAAA,GAAG,EAAE,iCAAkBA,GAAlB;AAAzF,OAAjC,CAArB;AACA,aAAOa,mBAASnC,IAAT,CAAc2B,MAAM,CAACS,MAArB,CAAP;AACD,KAHM,CAAP;AAID;;AArCgH","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Events } from './events';\nimport * as channels from '../protocol/channels';\nimport { ChannelOwner } from './channelOwner';\nimport { assertMaxArguments, JSHandle, parseResult, serializeArgument } from './jsHandle';\nimport { Page } from './page';\nimport { BrowserContext } from './browserContext';\nimport * as api from '../../types/types';\nimport * as structs from '../../types/structs';\n\nexport class Worker extends ChannelOwner<channels.WorkerChannel, channels.WorkerInitializer> implements api.Worker {\n  _page: Page | undefined;  // Set for web workers.\n  _context: BrowserContext | undefined;  // Set for service workers.\n\n  static from(worker: channels.WorkerChannel): Worker {\n    return (worker as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.WorkerInitializer) {\n    super(parent, type, guid, initializer);\n    this._channel.on('close', () => {\n      if (this._page)\n        this._page._workers.delete(this);\n      if (this._context)\n        this._context._serviceWorkers.delete(this);\n      this.emit(Events.Worker.Close, this);\n    });\n  }\n\n  url(): string {\n    return this._initializer.url;\n  }\n\n  async evaluate<R, Arg>(pageFunction: structs.PageFunction<Arg, R>, arg?: Arg): Promise<R> {\n    assertMaxArguments(arguments.length, 2);\n    return this._wrapApiCall(async (channel: channels.WorkerChannel) => {\n      const result = await channel.evaluateExpression({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: serializeArgument(arg) });\n      return parseResult(result.value);\n    });\n  }\n\n  async evaluateHandle<R, Arg>(pageFunction: structs.PageFunction<Arg, R>, arg?: Arg): Promise<structs.SmartHandle<R>> {\n    assertMaxArguments(arguments.length, 2);\n    return this._wrapApiCall(async (channel: channels.WorkerChannel) => {\n      const result = await channel.evaluateExpressionHandle({ expression: String(pageFunction), isFunction: typeof pageFunction === 'function', arg: serializeArgument(arg) });\n      return JSHandle.from(result.handle) as any as structs.SmartHandle<R>;\n    });\n  }\n}\n"],"file":"worker.js"}