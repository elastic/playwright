{"version":3,"sources":["../../src/client/selectors.ts"],"names":["Selectors","_channels","Set","_registrations","register","name","script","options","source","undefined","params","channel","_channel","push","_addChannel","add","catch","e","_removeChannel","delete","SelectorsOwner","ChannelOwner","from","browser","_object","sharedSelectors"],"mappings":";;;;;;;AAgBA;;AAEA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQO,MAAMA,SAAN,CAAyC;AAAA;AAAA,SACtCC,SADsC,GAC1B,IAAIC,GAAJ,EAD0B;AAAA,SAEtCC,cAFsC,GAEe,EAFf;AAAA;;AAIhC,QAARC,QAAQ,CAACC,IAAD,EAAeC,MAAf,EAA8FC,OAAoC,GAAG,EAArI,EAAwJ;AACpK,UAAMC,MAAM,GAAG,MAAM,oCAAiBF,MAAjB,EAAyBG,SAAzB,EAAoC,KAApC,CAArB;AACA,UAAMC,MAAM,GAAG,EAAE,GAAGH,OAAL;AAAcF,MAAAA,IAAd;AAAoBG,MAAAA;AAApB,KAAf;;AACA,SAAK,MAAMG,OAAX,IAAsB,KAAKV,SAA3B,EACE,MAAMU,OAAO,CAACC,QAAR,CAAiBR,QAAjB,CAA0BM,MAA1B,CAAN;;AACF,SAAKP,cAAL,CAAoBU,IAApB,CAAyBH,MAAzB;AACD;;AAEDI,EAAAA,WAAW,CAACH,OAAD,EAA0B;AACnC,SAAKV,SAAL,CAAec,GAAf,CAAmBJ,OAAnB;;AACA,SAAK,MAAMD,MAAX,IAAqB,KAAKP,cAA1B,EAA0C;AACxC;AACAQ,MAAAA,OAAO,CAACC,QAAR,CAAiBR,QAAjB,CAA0BM,MAA1B,EAAkCM,KAAlC,CAAwCC,CAAC,IAAI,CAAE,CAA/C;AACD;AACF;;AAEDC,EAAAA,cAAc,CAACP,OAAD,EAA0B;AACtC,SAAKV,SAAL,CAAekB,MAAf,CAAsBR,OAAtB;AACD;;AAtB6C;;;;AAyBzC,MAAMS,cAAN,SAA6BC,0BAA7B,CAAoG;AAC9F,SAAJC,IAAI,CAACC,OAAD,EAAqD;AAC9D,WAAQA,OAAD,CAAiBC,OAAxB;AACD;;AAHwG;;;AAMpG,MAAMC,eAAe,GAAG,IAAIzB,SAAJ,EAAxB","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { evaluationScript } from './clientHelper';\nimport * as channels from '../protocol/channels';\nimport { ChannelOwner } from './channelOwner';\nimport { SelectorEngine } from './types';\nimport * as api from '../../types/types';\n\nexport class Selectors implements api.Selectors {\n  private _channels = new Set<SelectorsOwner>();\n  private _registrations: channels.SelectorsRegisterParams[] = [];\n\n  async register(name: string, script: string | (() => SelectorEngine) | { path?: string, content?: string }, options: { contentScript?: boolean } = {}): Promise<void> {\n    const source = await evaluationScript(script, undefined, false);\n    const params = { ...options, name, source };\n    for (const channel of this._channels)\n      await channel._channel.register(params);\n    this._registrations.push(params);\n  }\n\n  _addChannel(channel: SelectorsOwner) {\n    this._channels.add(channel);\n    for (const params of this._registrations) {\n      // This should not fail except for connection closure, but just in case we catch.\n      channel._channel.register(params).catch(e => {});\n    }\n  }\n\n  _removeChannel(channel: SelectorsOwner) {\n    this._channels.delete(channel);\n  }\n}\n\nexport class SelectorsOwner extends ChannelOwner<channels.SelectorsChannel, channels.SelectorsInitializer> {\n  static from(browser: channels.SelectorsChannel): SelectorsOwner {\n    return (browser as any)._object;\n  }\n}\n\nexport const sharedSelectors = new Selectors();\n"],"file":"selectors.js"}