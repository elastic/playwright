{"version":3,"sources":["../../src/client/browser.ts"],"names":["Browser","ChannelOwner","from","browser","_object","fromNullable","constructor","parent","type","guid","initializer","_contexts","Set","_isConnected","_closedPromise","_remoteType","_browserType","_name","name","_channel","on","_didClose","Promise","f","once","Events","Disconnected","_setBrowserType","browserType","context","newContext","options","_wrapApiCall","channel","_defaultContextOptions","contextOptions","BrowserContext","_options","add","_logger","logger","_onDidCreateContext","contexts","version","_initializer","newPage","page","_ownedContext","_ownerPage","isConnected","newBrowserCDPSession","CDPSession","session","startTracing","undefined","stopTracing","Buffer","binary","close","_connection","e","emit"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as channels from '../protocol/channels';\nimport { BrowserContext, prepareBrowserContextParams } from './browserContext';\nimport { Page } from './page';\nimport { ChannelOwner } from './channelOwner';\nimport { Events } from './events';\nimport { BrowserContextOptions } from './types';\nimport { isSafeCloseError } from '../utils/errors';\nimport * as api from '../../types/types';\nimport { CDPSession } from './cdpSession';\nimport type { BrowserType } from './browserType';\n\nexport class Browser extends ChannelOwner<channels.BrowserChannel, channels.BrowserInitializer> implements api.Browser {\n  readonly _contexts = new Set<BrowserContext>();\n  private _isConnected = true;\n  private _closedPromise: Promise<void>;\n  _remoteType: 'owns-connection' | 'uses-connection' | null = null;\n  private _browserType!: BrowserType;\n  readonly _name: string;\n\n  static from(browser: channels.BrowserChannel): Browser {\n    return (browser as any)._object;\n  }\n\n  static fromNullable(browser: channels.BrowserChannel | null): Browser | null {\n    return browser ? Browser.from(browser) : null;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.BrowserInitializer) {\n    super(parent, type, guid, initializer);\n    this._name = initializer.name;\n    this._channel.on('close', () => this._didClose());\n    this._closedPromise = new Promise(f => this.once(Events.Browser.Disconnected, f));\n  }\n\n  _setBrowserType(browserType: BrowserType) {\n    this._browserType = browserType;\n    for (const context of this._contexts)\n      context._setBrowserType(browserType);\n  }\n\n  async newContext(options: BrowserContextOptions = {}): Promise<BrowserContext> {\n    return this._wrapApiCall(async (channel: channels.BrowserChannel) => {\n      options = { ...this._browserType._defaultContextOptions, ...options };\n      const contextOptions = await prepareBrowserContextParams(options);\n      const context = BrowserContext.from((await channel.newContext(contextOptions)).context);\n      context._options = contextOptions;\n      this._contexts.add(context);\n      context._logger = options.logger || this._logger;\n      context._setBrowserType(this._browserType);\n      await this._browserType._onDidCreateContext?.(context);\n      return context;\n    });\n  }\n\n  contexts(): BrowserContext[] {\n    return [...this._contexts];\n  }\n\n  version(): string {\n    return this._initializer.version;\n  }\n\n  async newPage(options: BrowserContextOptions = {}): Promise<Page> {\n    const context = await this.newContext(options);\n    const page = await context.newPage();\n    page._ownedContext = context;\n    context._ownerPage = page;\n    return page;\n  }\n\n  isConnected(): boolean {\n    return this._isConnected;\n  }\n\n  async newBrowserCDPSession(): Promise<api.CDPSession> {\n    return this._wrapApiCall(async (channel: channels.BrowserChannel) => {\n      return CDPSession.from((await channel.newBrowserCDPSession()).session);\n    });\n  }\n\n  async startTracing(page?: Page, options: { path?: string; screenshots?: boolean; categories?: string[]; } = {}) {\n    return this._wrapApiCall(async (channel: channels.BrowserChannel) => {\n      await channel.startTracing({ ...options, page: page ? page._channel : undefined });\n    });\n  }\n\n  async stopTracing(): Promise<Buffer> {\n    return this._wrapApiCall(async (channel: channels.BrowserChannel) => {\n      return Buffer.from((await channel.stopTracing()).binary, 'base64');\n    });\n  }\n\n  async close(): Promise<void> {\n    try {\n      await this._wrapApiCall(async (channel: channels.BrowserChannel) => {\n        if (this._remoteType === 'owns-connection')\n          this._connection.close();\n        else\n          await channel.close();\n        await this._closedPromise;\n      });\n    } catch (e) {\n      if (isSafeCloseError(e))\n        return;\n      throw e;\n    }\n  }\n\n  _didClose() {\n    this._isConnected = false;\n    this.emit(Events.Browser.Disconnected, this);\n  }\n}\n"],"file":"browser.js"}