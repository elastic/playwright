{"version":3,"sources":["../../src/cli/driver.ts"],"names":["printApiJson","console","log","JSON","stringify","require","runDriver","dispatcherConnection","DispatcherConnection","Root","rootScope","playwright","PlaywrightDispatcher","transport","Transport","process","stdout","stdin","onmessage","message","dispatch","parse","send","onclose","setTimeout","exit","runServer","port","configFile","options","fs","readFileSync","toString","server","PlaywrightServer","startDefault","wsEndpoint","listen","on","close","catch","error","launchBrowserServer","browserName","browserType","launchServer"],"mappings":";;;;;;;;;;AAkBA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AA3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAaO,SAASA,YAAT,GAAwB;AAC7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeC,OAAO,CAAC,gBAAD,CAAtB,CAAZ;AACD;;AAEM,SAASC,SAAT,GAAqB;AAC1B,QAAMC,oBAAoB,GAAG,IAAIC,gCAAJ,EAA7B;AACA,MAAIC,gBAAJ,CAASF,oBAAT,EAA+B,MAAMG,SAAN,IAAmB;AAChD,UAAMC,UAAU,GAAG,mCAAnB;AACA,WAAO,IAAIC,0CAAJ,CAAyBF,SAAzB,EAAoCC,UAApC,CAAP;AACD,GAHD;AAIA,QAAME,SAAS,GAAG,IAAIC,oBAAJ,CAAcC,OAAO,CAACC,MAAtB,EAA8BD,OAAO,CAACE,KAAtC,CAAlB;;AACAJ,EAAAA,SAAS,CAACK,SAAV,GAAsBC,OAAO,IAAIZ,oBAAoB,CAACa,QAArB,CAA8BjB,IAAI,CAACkB,KAAL,CAAWF,OAAX,CAA9B,CAAjC;;AACAZ,EAAAA,oBAAoB,CAACW,SAArB,GAAiCC,OAAO,IAAIN,SAAS,CAACS,IAAV,CAAenB,IAAI,CAACC,SAAL,CAAee,OAAf,CAAf,CAA5C;;AACAN,EAAAA,SAAS,CAACU,OAAV,GAAoB,YAAY;AAC9B;AACAhB,IAAAA,oBAAoB,CAACW,SAArB,GAAiC,MAAM,CAAE,CAAzC,CAF8B,CAG9B;;;AACAM,IAAAA,UAAU,CAAC,MAAMT,OAAO,CAACU,IAAR,CAAa,CAAb,CAAP,EAAwB,KAAxB,CAAV,CAJ8B,CAK9B;;AACA,UAAM,0CAAN;AACAV,IAAAA,OAAO,CAACU,IAAR,CAAa,CAAb;AACD,GARD;AASD;;AAEM,eAAeC,SAAf,CAAyBC,IAAzB,EAAoDC,UAApD,EAAyE;AAC9E,MAAIC,OAAgC,GAAG,EAAvC;AACA,MAAID,UAAJ,EACEC,OAAO,GAAG1B,IAAI,CAACkB,KAAL,CAAWS,YAAGC,YAAH,CAAgBH,UAAhB,EAA4BI,QAA5B,EAAX,CAAV;AACF,QAAMC,MAAM,GAAG,MAAMC,mCAAiBC,YAAjB,CAA8BN,OAA9B,CAArB;AACA,QAAMO,UAAU,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcV,IAAd,CAAzB;AACAZ,EAAAA,OAAO,CAACuB,EAAR,CAAW,MAAX,EAAmB,MAAML,MAAM,CAACM,KAAP,GAAeC,KAAf,CAAqBvC,OAAO,CAACwC,KAA7B,CAAzB;AACAxC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBkC,UAA9B,EAP8E,CAOlC;AAC7C;;AAEM,eAAeM,mBAAf,CAAmCC,WAAnC,EAAwDf,UAAxD,EAA6E;AAClF,MAAIC,OAA4B,GAAG,EAAnC;AACA,MAAID,UAAJ,EACEC,OAAO,GAAG1B,IAAI,CAACkB,KAAL,CAAWS,YAAGC,YAAH,CAAgBH,UAAhB,EAA4BI,QAA5B,EAAX,CAAV;AACF,QAAMY,WAAW,GAAIjC,UAAD,CAAoBgC,WAApB,CAApB;AACA,QAAMV,MAAM,GAAG,MAAMW,WAAW,CAACC,YAAZ,CAAyBhB,OAAzB,CAArB;AACA5B,EAAAA,OAAO,CAACC,GAAR,CAAY+B,MAAM,CAACG,UAAP,EAAZ;AACD","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\nimport fs from 'fs';\nimport * as playwright from '../..';\nimport { BrowserType } from '../client/browserType';\nimport { LaunchServerOptions } from '../client/types';\nimport { DispatcherConnection, Root } from '../dispatchers/dispatcher';\nimport { PlaywrightDispatcher } from '../dispatchers/playwrightDispatcher';\nimport { Transport } from '../protocol/transport';\nimport { PlaywrightServer, PlaywrightServerOptions } from '../remote/playwrightServer';\nimport { createPlaywright } from '../server/playwright';\nimport { gracefullyCloseAll } from '../utils/processLauncher';\n\nexport function printApiJson() {\n  // Note: this file is generated by build-playwright-driver.sh\n  console.log(JSON.stringify(require('../../api.json')));\n}\n\nexport function runDriver() {\n  const dispatcherConnection = new DispatcherConnection();\n  new Root(dispatcherConnection, async rootScope => {\n    const playwright = createPlaywright();\n    return new PlaywrightDispatcher(rootScope, playwright);\n  });\n  const transport = new Transport(process.stdout, process.stdin);\n  transport.onmessage = message => dispatcherConnection.dispatch(JSON.parse(message));\n  dispatcherConnection.onmessage = message => transport.send(JSON.stringify(message));\n  transport.onclose = async () => {\n    // Drop any messages during shutdown on the floor.\n    dispatcherConnection.onmessage = () => {};\n    // Force exit after 30 seconds.\n    setTimeout(() => process.exit(0), 30000);\n    // Meanwhile, try to gracefully close all browsers.\n    await gracefullyCloseAll();\n    process.exit(0);\n  };\n}\n\nexport async function runServer(port: number | undefined,  configFile?: string) {\n  let options: PlaywrightServerOptions = {};\n  if (configFile)\n    options = JSON.parse(fs.readFileSync(configFile).toString());\n  const server = await PlaywrightServer.startDefault(options);\n  const wsEndpoint = await server.listen(port);\n  process.on('exit', () => server.close().catch(console.error));\n  console.log('Listening on ' + wsEndpoint);  // eslint-disable-line no-console\n}\n\nexport async function launchBrowserServer(browserName: string, configFile?: string) {\n  let options: LaunchServerOptions = {};\n  if (configFile)\n    options = JSON.parse(fs.readFileSync(configFile).toString());\n  const browserType = (playwright as any)[browserName] as BrowserType;\n  const server = await browserType.launchServer(options);\n  console.log(server.wsEndpoint());\n}\n"],"file":"driver.js"}