{"version":3,"sources":["../src/outofprocess.ts"],"names":["start","client","PlaywrightClient","playwright","_playwright","stop","driverProcess","_driverProcess","constructor","_closePromise","_onExit","exitCode","signal","Error","childProcess","fork","path","join","__dirname","stdio","detached","unref","on","connection","Connection","transport","Transport","stdin","stdout","onmessage","message","send","JSON","stringify","dispatch","parse","Promise","f","onclose","initializePlaywright","removeListener","destroy","stderr"],"mappings":";;;;;;;AAgBA;;AACA;;AAEA;;AACA;;;;;;AApBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQO,eAAeA,KAAf,GAAuB;AAC5B,QAAMC,MAAM,GAAG,IAAIC,gBAAJ,EAAf;AACA,QAAMC,UAAU,GAAG,MAAMF,MAAM,CAACG,WAAhC;;AACCD,EAAAA,UAAD,CAAoBE,IAApB,GAA2B,MAAMJ,MAAM,CAACI,IAAP,EAAjC;;AACCF,EAAAA,UAAD,CAAoBG,aAApB,GAAoCL,MAAM,CAACM,cAA3C;AACA,SAAOJ,UAAP;AACD;;AAED,MAAMD,gBAAN,CAAuB;AAMrBM,EAAAA,WAAW,GAAG;AAAA,SALdJ,WAKc;AAAA,SAJdG,cAIc;AAAA,SAHNE,aAGM;AAAA,SAFNC,OAEM;;AACZ,SAAKA,OAAL,GAAe,CAACC,QAAD,EAA0BC,MAA1B,KAAoD;AACjE,YAAM,IAAIC,KAAJ,CAAW,+BAA8BF,QAAS,WAAUC,MAAO,EAAnE,CAAN;AACD,KAFD;;AAIA,SAAKL,cAAL,GAAsBO,YAAY,CAACC,IAAb,CAAkBC,IAAI,CAACC,IAAL,CAAUC,SAAV,EAAqB,KAArB,EAA4B,QAA5B,CAAlB,EAAyD,CAAC,YAAD,CAAzD,EAAyE;AAC7FC,MAAAA,KAAK,EAAE,MADsF;AAE7FC,MAAAA,QAAQ,EAAE;AAFmF,KAAzE,CAAtB;;AAIA,SAAKb,cAAL,CAAoBc,KAApB;;AACA,SAAKd,cAAL,CAAoBe,EAApB,CAAuB,MAAvB,EAA+B,KAAKZ,OAApC;;AAEA,UAAMa,UAAU,GAAG,IAAIC,sBAAJ,EAAnB;AACA,UAAMC,SAAS,GAAG,IAAIC,oBAAJ,CAAc,KAAKnB,cAAL,CAAoBoB,KAAlC,EAAyC,KAAKpB,cAAL,CAAoBqB,MAA7D,CAAlB;;AACAL,IAAAA,UAAU,CAACM,SAAX,GAAuBC,OAAO,IAAIL,SAAS,CAACM,IAAV,CAAeC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAf,CAAlC;;AACAL,IAAAA,SAAS,CAACI,SAAV,GAAsBC,OAAO,IAAIP,UAAU,CAACW,QAAX,CAAoBF,IAAI,CAACG,KAAL,CAAWL,OAAX,CAApB,CAAjC;;AACA,SAAKrB,aAAL,GAAqB,IAAI2B,OAAJ,CAAYC,CAAC,IAAIZ,SAAS,CAACa,OAAV,GAAoBD,CAArC,CAArB;AAEA,SAAKjC,WAAL,GAAmBmB,UAAU,CAACgB,oBAAX,EAAnB;AACD;;AAES,QAAJlC,IAAI,GAAG;AACX,SAAKE,cAAL,CAAoBiC,cAApB,CAAmC,MAAnC,EAA2C,KAAK9B,OAAhD;;AACA,SAAKH,cAAL,CAAoBoB,KAApB,CAA0Bc,OAA1B;;AACA,SAAKlC,cAAL,CAAoBqB,MAApB,CAA2Ba,OAA3B;;AACA,SAAKlC,cAAL,CAAoBmC,MAApB,CAA2BD,OAA3B;;AACA,UAAM,KAAKhC,aAAX;AACD;;AAjCoB","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Connection } from './client/connection';\nimport { Transport } from './protocol/transport';\nimport { Playwright } from './client/playwright';\nimport * as childProcess from 'child_process';\nimport * as path from 'path';\n\nexport async function start() {\n  const client = new PlaywrightClient();\n  const playwright = await client._playwright;\n  (playwright as any).stop = () => client.stop();\n  (playwright as any).driverProcess = client._driverProcess;\n  return playwright;\n}\n\nclass PlaywrightClient {\n  _playwright: Promise<Playwright>;\n  _driverProcess: childProcess.ChildProcess;\n  private _closePromise: Promise<void>;\n  private _onExit: (exitCode: number | null, signal: string | null) => {};\n\n  constructor() {\n    this._onExit = (exitCode: number | null, signal: string | null) => {\n      throw new Error(`Server closed with exitCode=${exitCode} signal=${signal}`);\n    };\n\n    this._driverProcess = childProcess.fork(path.join(__dirname, 'cli', 'cli.js'), ['run-driver'], {\n      stdio: 'pipe',\n      detached: true,\n    });\n    this._driverProcess.unref();\n    this._driverProcess.on('exit', this._onExit);\n\n    const connection = new Connection();\n    const transport = new Transport(this._driverProcess.stdin, this._driverProcess.stdout);\n    connection.onmessage = message => transport.send(JSON.stringify(message));\n    transport.onmessage = message => connection.dispatch(JSON.parse(message));\n    this._closePromise = new Promise(f => transport.onclose = f);\n\n    this._playwright = connection.initializePlaywright();\n  }\n\n  async stop() {\n    this._driverProcess.removeListener('exit', this._onExit);\n    this._driverProcess.stdin.destroy();\n    this._driverProcess.stdout.destroy();\n    this._driverProcess.stderr.destroy();\n    await this._closePromise;\n  }\n}\n"],"file":"outofprocess.js"}