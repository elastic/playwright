{"version":3,"file":"ipc.js","names":["_util","_interopRequireDefault","require","_compilationCache","obj","__esModule","default","serializeConfig","config","passCompilationCache","result","location","configDir","resolvedConfigFile","configFile","configCLIOverrides","compilationCache","serializeCompilationCache","undefined","stdioChunkToParams","chunk","Uint8Array","buffer","Buffer","from","toString","text","util","inspect"],"sources":["../../src/common/ipc.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport util from 'util';\nimport { type SerializedCompilationCache, serializeCompilationCache } from '../transform/compilationCache';\nimport type { ConfigLocation, FullConfigInternal } from './config';\nimport type { ReporterDescription, TestInfoError, TestStatus } from '../../types/test';\n\nexport type ConfigCLIOverrides = {\n  debug?: boolean;\n  forbidOnly?: boolean;\n  fullyParallel?: boolean;\n  globalTimeout?: number;\n  maxFailures?: number;\n  outputDir?: string;\n  preserveOutputDir?: boolean;\n  quiet?: boolean;\n  repeatEach?: number;\n  retries?: number;\n  reporter?: ReporterDescription[];\n  additionalReporters?: ReporterDescription[];\n  shard?: { current: number, total: number };\n  timeout?: number;\n  tsconfig?: string;\n  ignoreSnapshots?: boolean;\n  updateSnapshots?: 'all'|'none'|'missing';\n  workers?: number | string;\n  projects?: { name: string, use?: any }[],\n  use?: any;\n};\n\nexport type SerializedConfig = {\n  location: ConfigLocation;\n  configCLIOverrides: ConfigCLIOverrides;\n  compilationCache?: SerializedCompilationCache;\n};\n\nexport type ProcessInitParams = {\n  processName: string;\n};\n\nexport type WorkerInitParams = {\n  workerIndex: number;\n  parallelIndex: number;\n  repeatEachIndex: number;\n  projectId: string;\n  config: SerializedConfig;\n  artifactsDir: string;\n};\n\nexport type TestBeginPayload = {\n  testId: string;\n  startWallTime: number;  // milliseconds since unix epoch\n};\n\nexport type AttachmentPayload = {\n  testId: string;\n  name: string;\n  path?: string;\n  body?: string;\n  contentType: string;\n};\n\nexport type TestEndPayload = {\n  testId: string;\n  duration: number;\n  status: TestStatus;\n  errors: TestInfoError[];\n  hasNonRetriableError: boolean;\n  expectedStatus: TestStatus;\n  annotations: { type: string, description?: string }[];\n  timeout: number;\n};\n\nexport type StepBeginPayload = {\n  testId: string;\n  stepId: string;\n  parentStepId: string | undefined;\n  title: string;\n  category: string;\n  wallTime: number;  // milliseconds since unix epoch\n  location?: { file: string, line: number, column: number };\n};\n\nexport type StepEndPayload = {\n  testId: string;\n  stepId: string;\n  wallTime: number;  // milliseconds since unix epoch\n  error?: TestInfoError;\n};\n\nexport type TestEntry = {\n  testId: string;\n  retry: number;\n};\n\nexport type RunPayload = {\n  file: string;\n  entries: TestEntry[];\n};\n\nexport type DonePayload = {\n  fatalErrors: TestInfoError[];\n  skipTestsDueToSetupFailure: string[];  // test ids\n  fatalUnknownTestIds?: string[];\n};\n\nexport type TestOutputPayload = {\n  text?: string;\n  buffer?: string;\n};\n\nexport type TeardownErrorsPayload = {\n  fatalErrors: TestInfoError[];\n};\n\nexport type EnvProducedPayload = [string, string | null][];\n\nexport function serializeConfig(config: FullConfigInternal, passCompilationCache: boolean): SerializedConfig {\n  const result: SerializedConfig = {\n    location: { configDir: config.configDir, resolvedConfigFile: config.config.configFile },\n    configCLIOverrides: config.configCLIOverrides,\n    compilationCache: passCompilationCache ? serializeCompilationCache() : undefined,\n  };\n  return result;\n}\n\nexport function stdioChunkToParams(chunk: Uint8Array | string): TestOutputPayload {\n  if (chunk instanceof Uint8Array)\n    return { buffer: Buffer.from(chunk).toString('base64') };\n  if (typeof chunk !== 'string')\n    return { text: util.inspect(chunk) };\n  return { text: chunk };\n}\n"],"mappings":";;;;;;;AAgBA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AAA2G,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAjB3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqHO,SAASG,eAAeA,CAACC,MAA0B,EAAEC,oBAA6B,EAAoB;EAC3G,MAAMC,MAAwB,GAAG;IAC/BC,QAAQ,EAAE;MAAEC,SAAS,EAAEJ,MAAM,CAACI,SAAS;MAAEC,kBAAkB,EAAEL,MAAM,CAACA,MAAM,CAACM;IAAW,CAAC;IACvFC,kBAAkB,EAAEP,MAAM,CAACO,kBAAkB;IAC7CC,gBAAgB,EAAEP,oBAAoB,GAAG,IAAAQ,2CAAyB,EAAC,CAAC,GAAGC;EACzE,CAAC;EACD,OAAOR,MAAM;AACf;AAEO,SAASS,kBAAkBA,CAACC,KAA0B,EAAqB;EAChF,IAAIA,KAAK,YAAYC,UAAU,EAC7B,OAAO;IAAEC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,QAAQ,CAAC,QAAQ;EAAE,CAAC;EAC1D,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAC3B,OAAO;IAAEM,IAAI,EAAEC,aAAI,CAACC,OAAO,CAACR,KAAK;EAAE,CAAC;EACtC,OAAO;IAAEM,IAAI,EAAEN;EAAM,CAAC;AACxB"}