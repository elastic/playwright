{"version":3,"file":"test.js","names":["_testType","require","_teleReceiver","Base","constructor","title","_only","_requireFile","Suite","type","testTypeImpl","location","parent","_use","_entries","_hooks","_timeout","_retries","_staticAnnotations","_tags","_modifiers","_parallelMode","_fullProject","_fileId","_type","_testTypeImpl","entries","suites","filter","entry","tests","TestCase","_addTest","test","push","_addSuite","suite","_prependSuite","unshift","allTests","result","visit","_hasTests","titlePath","_collectGrepTitlePath","path","_getOnlyItems","items","_deepClone","_clone","_deepSerialize","_serialize","_deepParse","data","_parse","kind","forEachTest","visitor","only","requireFile","timeout","retries","staticAnnotations","slice","tags","modifiers","parallelMode","hooks","map","h","fileId","fn","project","_this$_fullProject","_this$parent","exports","testType","results","expectedStatus","annotations","repeatEachIndex","id","_pool","_poolDigest","_workerHash","_projectId","outcome","computeTestCaseOutcome","ok","status","_grepTitle","match","poolDigest","workerHash","projectId","rootTestType","_appendTestResult","retry","length","parallelIndex","workerIndex","duration","startTime","Date","stdout","stderr","attachments","steps","errors","join"],"sources":["../../src/common/test.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { FixturePool } from './fixtures';\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { TestTypeImpl } from './testType';\nimport { rootTestType } from './testType';\nimport type { Annotation, FixturesWithLocation, FullProjectInternal } from './config';\nimport type { Location, FullProject } from '../../types/testReporter';\nimport { computeTestCaseOutcome } from '../isomorphic/teleReceiver';\n\nclass Base {\n  title: string;\n  _only = false;\n  _requireFile: string = '';\n\n  constructor(title: string) {\n    this.title = title;\n  }\n}\n\nexport type Modifier = {\n  type: 'slow' | 'fixme' | 'skip' | 'fail',\n  fn: Function,\n  location: Location,\n  description: string | undefined\n};\n\nexport class Suite extends Base {\n  location?: Location;\n  parent?: Suite;\n  _use: FixturesWithLocation[] = [];\n  _entries: (Suite | TestCase)[] = [];\n  _hooks: { type: 'beforeEach' | 'afterEach' | 'beforeAll' | 'afterAll', fn: Function, title: string, location: Location }[] = [];\n  _timeout: number | undefined;\n  _retries: number | undefined;\n  // Annotations known statically before running the test, e.g. `test.describe.skip()` or `test.describe({ annotation }, body)`.\n  _staticAnnotations: Annotation[] = [];\n  // Explicitly declared tags that are not a part of the title.\n  _tags: string[] = [];\n  _modifiers: Modifier[] = [];\n  _parallelMode: 'none' | 'default' | 'serial' | 'parallel' = 'none';\n  _fullProject: FullProjectInternal | undefined;\n  _fileId: string | undefined;\n  readonly _type: 'root' | 'project' | 'file' | 'describe';\n  readonly _testTypeImpl: TestTypeImpl | undefined;\n\n  constructor(title: string, type: 'root' | 'project' | 'file' | 'describe', testTypeImpl?: TestTypeImpl) {\n    super(title);\n    this._type = type;\n    this._testTypeImpl = testTypeImpl;\n  }\n\n  get type(): 'root' | 'project' | 'file' | 'describe' {\n    return this._type;\n  }\n\n  entries() {\n    return this._entries;\n  }\n\n  get suites(): Suite[] {\n    return this._entries.filter(entry => entry instanceof Suite) as Suite[];\n  }\n\n  get tests(): TestCase[] {\n    return this._entries.filter(entry => entry instanceof TestCase) as TestCase[];\n  }\n\n  _addTest(test: TestCase) {\n    test.parent = this;\n    this._entries.push(test);\n  }\n\n  _addSuite(suite: Suite) {\n    suite.parent = this;\n    this._entries.push(suite);\n  }\n\n  _prependSuite(suite: Suite) {\n    suite.parent = this;\n    this._entries.unshift(suite);\n  }\n\n  allTests(): TestCase[] {\n    const result: TestCase[] = [];\n    const visit = (suite: Suite) => {\n      for (const entry of suite._entries) {\n        if (entry instanceof Suite)\n          visit(entry);\n        else\n          result.push(entry);\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  _hasTests(): boolean {\n    let result = false;\n    const visit = (suite: Suite) => {\n      for (const entry of suite._entries) {\n        if (result)\n          return;\n        if (entry instanceof Suite)\n          visit(entry);\n        else\n          result = true;\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    // Ignore anonymous describe blocks.\n    if (this.title || this._type !== 'describe')\n      titlePath.push(this.title);\n    return titlePath;\n  }\n\n  _collectGrepTitlePath(path: string[]) {\n    if (this.parent)\n      this.parent._collectGrepTitlePath(path);\n    if (this.title || this._type !== 'describe')\n      path.push(this.title);\n    path.push(...this._tags);\n  }\n\n  _getOnlyItems(): (TestCase | Suite)[] {\n    const items: (TestCase | Suite)[] = [];\n    if (this._only)\n      items.push(this);\n    for (const suite of this.suites)\n      items.push(...suite._getOnlyItems());\n    items.push(...this.tests.filter(test => test._only));\n    return items;\n  }\n\n  _deepClone(): Suite {\n    const suite = this._clone();\n    for (const entry of this._entries) {\n      if (entry instanceof Suite)\n        suite._addSuite(entry._deepClone());\n      else\n        suite._addTest(entry._clone());\n    }\n    return suite;\n  }\n\n  _deepSerialize(): any {\n    const suite = this._serialize();\n    suite.entries = [];\n    for (const entry of this._entries) {\n      if (entry instanceof Suite)\n        suite.entries.push(entry._deepSerialize());\n      else\n        suite.entries.push(entry._serialize());\n    }\n    return suite;\n  }\n\n  static _deepParse(data: any): Suite {\n    const suite = Suite._parse(data);\n    for (const entry of data.entries) {\n      if (entry.kind === 'suite')\n        suite._addSuite(Suite._deepParse(entry));\n      else\n        suite._addTest(TestCase._parse(entry));\n    }\n    return suite;\n  }\n\n  forEachTest(visitor: (test: TestCase, suite: Suite) => void) {\n    for (const entry of this._entries) {\n      if (entry instanceof Suite)\n        entry.forEachTest(visitor);\n      else\n        visitor(entry, this);\n    }\n  }\n\n  _serialize(): any {\n    return {\n      kind: 'suite',\n      title: this.title,\n      type: this._type,\n      location: this.location,\n      only: this._only,\n      requireFile: this._requireFile,\n      timeout: this._timeout,\n      retries: this._retries,\n      staticAnnotations: this._staticAnnotations.slice(),\n      tags: this._tags.slice(),\n      modifiers: this._modifiers.slice(),\n      parallelMode: this._parallelMode,\n      hooks: this._hooks.map(h => ({ type: h.type, location: h.location, title: h.title })),\n      fileId: this._fileId,\n    };\n  }\n\n  static _parse(data: any): Suite {\n    const suite = new Suite(data.title, data.type);\n    suite.location = data.location;\n    suite._only = data.only;\n    suite._requireFile = data.requireFile;\n    suite._timeout = data.timeout;\n    suite._retries = data.retries;\n    suite._staticAnnotations = data.staticAnnotations;\n    suite._tags = data.tags;\n    suite._modifiers = data.modifiers;\n    suite._parallelMode = data.parallelMode;\n    suite._hooks = data.hooks.map((h: any) => ({ type: h.type, location: h.location, title: h.title, fn: () => { } }));\n    suite._fileId = data.fileId;\n    return suite;\n  }\n\n  _clone(): Suite {\n    const data = this._serialize();\n    const suite = Suite._parse(data);\n    suite._use = this._use.slice();\n    suite._hooks = this._hooks.slice();\n    suite._fullProject = this._fullProject;\n    return suite;\n  }\n\n  project(): FullProject | undefined {\n    return this._fullProject?.project || this.parent?.project();\n  }\n}\n\nexport class TestCase extends Base implements reporterTypes.TestCase {\n  fn: Function;\n  results: reporterTypes.TestResult[] = [];\n  location: Location;\n  parent!: Suite;\n  type: 'test' = 'test';\n\n  expectedStatus: reporterTypes.TestStatus = 'passed';\n  timeout = 0;\n  annotations: Annotation[] = [];\n  retries = 0;\n  repeatEachIndex = 0;\n\n  _testType: TestTypeImpl;\n  id = '';\n  _pool: FixturePool | undefined;\n  _poolDigest = '';\n  _workerHash = '';\n  _projectId = '';\n  // Annotations known statically before running the test, e.g. `test.skip()` or `test(title, { annotation }, body)`.\n  _staticAnnotations: Annotation[] = [];\n  // Explicitly declared tags that are not a part of the title.\n  _tags: string[] = [];\n\n  constructor(title: string, fn: Function, testType: TestTypeImpl, location: Location) {\n    super(title);\n    this.fn = fn;\n    this._testType = testType;\n    this.location = location;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    titlePath.push(this.title);\n    return titlePath;\n  }\n\n  outcome(): 'skipped' | 'expected' | 'unexpected' | 'flaky' {\n    return computeTestCaseOutcome(this);\n  }\n\n  ok(): boolean {\n    const status = this.outcome();\n    return status === 'expected' || status === 'flaky' || status === 'skipped';\n  }\n\n  get tags(): string[] {\n    return this._grepTitle().match(/@[\\S]+/g) || [];\n  }\n\n  _serialize(): any {\n    return {\n      kind: 'test',\n      id: this.id,\n      title: this.title,\n      retries: this.retries,\n      timeout: this.timeout,\n      expectedStatus: this.expectedStatus,\n      location: this.location,\n      only: this._only,\n      requireFile: this._requireFile,\n      poolDigest: this._poolDigest,\n      workerHash: this._workerHash,\n      staticAnnotations: this._staticAnnotations.slice(),\n      annotations: this.annotations.slice(),\n      tags: this._tags.slice(),\n      projectId: this._projectId,\n    };\n  }\n\n  static _parse(data: any): TestCase {\n    const test = new TestCase(data.title, () => {}, rootTestType, data.location);\n    test.id = data.id;\n    test.retries = data.retries;\n    test.timeout = data.timeout;\n    test.expectedStatus = data.expectedStatus;\n    test._only = data.only;\n    test._requireFile = data.requireFile;\n    test._poolDigest = data.poolDigest;\n    test._workerHash = data.workerHash;\n    test._staticAnnotations = data.staticAnnotations;\n    test.annotations = data.annotations;\n    test._tags = data.tags;\n    test._projectId = data.projectId;\n    return test;\n  }\n\n  _clone(): TestCase {\n    const data = this._serialize();\n    const test = TestCase._parse(data);\n    test._testType = this._testType;\n    test.fn = this.fn;\n    return test;\n  }\n\n  _appendTestResult(): reporterTypes.TestResult {\n    const result: reporterTypes.TestResult = {\n      retry: this.results.length,\n      parallelIndex: -1,\n      workerIndex: -1,\n      duration: 0,\n      startTime: new Date(),\n      stdout: [],\n      stderr: [],\n      attachments: [],\n      status: 'skipped',\n      steps: [],\n      errors: [],\n    };\n    this.results.push(result);\n    return result;\n  }\n\n  _grepTitle() {\n    const path: string[] = [];\n    this.parent._collectGrepTitlePath(path);\n    path.push(this.title);\n    path.push(...this._tags);\n    return path.join(' ');\n  }\n}\n"],"mappings":"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"}