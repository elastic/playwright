{"version":3,"file":"esmLoaderHost.js","names":["_url","_interopRequireDefault","require","_compilationCache","_transform","_portTransport","obj","__esModule","default","loaderChannel","globalThis","__esmLoaderPortPreV20","createPortTransport","esmLoaderRegistered","exports","registerESMLoader","port1","port2","MessageChannel","register","url","pathToFileURL","resolve","parentURL","__filename","data","port","transferList","PortTransport","method","params","addToCompilationCache","cache","startCollectingFileDeps","send","stopCollectingFileDeps","file","incorporateCompilationCache","result","configureESMLoader","tsconfig","singleTSConfig","serializeCompilationCache","configureESMLoaderTransformConfig","config","transformConfig"],"sources":["../../src/common/esmLoaderHost.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport url from 'url';\nimport { addToCompilationCache, serializeCompilationCache } from '../transform/compilationCache';\nimport { singleTSConfig, transformConfig } from '../transform/transform';\nimport { PortTransport } from '../transform/portTransport';\n\nlet loaderChannel: PortTransport | undefined;\n// Node.js < 20\nif ((globalThis as any).__esmLoaderPortPreV20)\n  loaderChannel = createPortTransport((globalThis as any).__esmLoaderPortPreV20);\n\n// Node.js >= 20\nexport let esmLoaderRegistered = false;\nexport function registerESMLoader() {\n  const { port1, port2 } = new MessageChannel();\n  // register will wait until the loader is initialized.\n  require('node:module').register(url.pathToFileURL(require.resolve('../transform/esmLoader')), {\n    parentURL: url.pathToFileURL(__filename),\n    data: { port: port2 },\n    transferList: [port2],\n  });\n  loaderChannel = createPortTransport(port1);\n  esmLoaderRegistered = true;\n}\n\nfunction createPortTransport(port: MessagePort) {\n  return new PortTransport(port, async (method, params) => {\n    if (method === 'pushToCompilationCache')\n      addToCompilationCache(params.cache);\n  });\n}\n\nexport async function startCollectingFileDeps() {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('startCollectingFileDeps', {});\n}\n\nexport async function stopCollectingFileDeps(file: string) {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('stopCollectingFileDeps', { file });\n}\n\nexport async function incorporateCompilationCache() {\n  if (!loaderChannel)\n    return;\n  // This is needed to gather dependency information from the esm loader\n  // that is populated from the resolve hook. We do not need to push\n  // this information proactively during load, but gather it at the end.\n  const result = await loaderChannel.send('getCompilationCache', {});\n  addToCompilationCache(result.cache);\n}\n\nexport async function configureESMLoader() {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('setSingleTSConfig', { tsconfig: singleTSConfig() });\n  await loaderChannel.send('addToCompilationCache', { cache: serializeCompilationCache() });\n}\n\nexport async function configureESMLoaderTransformConfig() {\n  if (!loaderChannel)\n    return;\n  await loaderChannel.send('setTransformConfig', { config: transformConfig() });\n}\n"],"mappings":";;;;;;;;;;;;AAgBA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AACA,IAAAE,UAAA,GAAAF,OAAA;AACA,IAAAG,cAAA,GAAAH,OAAA;AAA2D,SAAAD,uBAAAK,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAnB3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA,IAAIG,aAAwC;AAC5C;AACA,IAAKC,UAAU,CAASC,qBAAqB,EAC3CF,aAAa,GAAGG,mBAAmB,CAAEF,UAAU,CAASC,qBAAqB,CAAC;;AAEhF;AACO,IAAIE,mBAAmB,GAAAC,OAAA,CAAAD,mBAAA,GAAG,KAAK;AAC/B,SAASE,iBAAiBA,CAAA,EAAG;EAClC,MAAM;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAG,IAAIC,cAAc,CAAC,CAAC;EAC7C;EACAhB,OAAO,CAAC,aAAa,CAAC,CAACiB,QAAQ,CAACC,YAAG,CAACC,aAAa,CAACnB,OAAO,CAACoB,OAAO,CAAC,wBAAwB,CAAC,CAAC,EAAE;IAC5FC,SAAS,EAAEH,YAAG,CAACC,aAAa,CAACG,UAAU,CAAC;IACxCC,IAAI,EAAE;MAAEC,IAAI,EAAET;IAAM,CAAC;IACrBU,YAAY,EAAE,CAACV,KAAK;EACtB,CAAC,CAAC;EACFR,aAAa,GAAGG,mBAAmB,CAACI,KAAK,CAAC;EAC1CF,OAAA,CAAAD,mBAAA,GAAAA,mBAAmB,GAAG,IAAI;AAC5B;AAEA,SAASD,mBAAmBA,CAACc,IAAiB,EAAE;EAC9C,OAAO,IAAIE,4BAAa,CAACF,IAAI,EAAE,OAAOG,MAAM,EAAEC,MAAM,KAAK;IACvD,IAAID,MAAM,KAAK,wBAAwB,EACrC,IAAAE,uCAAqB,EAACD,MAAM,CAACE,KAAK,CAAC;EACvC,CAAC,CAAC;AACJ;AAEO,eAAeC,uBAAuBA,CAAA,EAAG;EAC9C,IAAI,CAACxB,aAAa,EAChB;EACF,MAAMA,aAAa,CAACyB,IAAI,CAAC,yBAAyB,EAAE,CAAC,CAAC,CAAC;AACzD;AAEO,eAAeC,sBAAsBA,CAACC,IAAY,EAAE;EACzD,IAAI,CAAC3B,aAAa,EAChB;EACF,MAAMA,aAAa,CAACyB,IAAI,CAAC,wBAAwB,EAAE;IAAEE;EAAK,CAAC,CAAC;AAC9D;AAEO,eAAeC,2BAA2BA,CAAA,EAAG;EAClD,IAAI,CAAC5B,aAAa,EAChB;EACF;EACA;EACA;EACA,MAAM6B,MAAM,GAAG,MAAM7B,aAAa,CAACyB,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;EAClE,IAAAH,uCAAqB,EAACO,MAAM,CAACN,KAAK,CAAC;AACrC;AAEO,eAAeO,kBAAkBA,CAAA,EAAG;EACzC,IAAI,CAAC9B,aAAa,EAChB;EACF,MAAMA,aAAa,CAACyB,IAAI,CAAC,mBAAmB,EAAE;IAAEM,QAAQ,EAAE,IAAAC,yBAAc,EAAC;EAAE,CAAC,CAAC;EAC7E,MAAMhC,aAAa,CAACyB,IAAI,CAAC,uBAAuB,EAAE;IAAEF,KAAK,EAAE,IAAAU,2CAAyB,EAAC;EAAE,CAAC,CAAC;AAC3F;AAEO,eAAeC,iCAAiCA,CAAA,EAAG;EACxD,IAAI,CAAClC,aAAa,EAChB;EACF,MAAMA,aAAa,CAACyB,IAAI,CAAC,oBAAoB,EAAE;IAAEU,MAAM,EAAE,IAAAC,0BAAe,EAAC;EAAE,CAAC,CAAC;AAC/E"}