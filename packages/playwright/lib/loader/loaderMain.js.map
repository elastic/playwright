{"version":3,"file":"loaderMain.js","names":["_configLoader","require","_process","_testLoader","_compilationCache","_poolBuilder","_esmLoaderHost","LoaderMain","ProcessRunner","constructor","serializedConfig","_serializedConfig","_configPromise","PoolBuilder","createForLoader","_config","deserializeConfig","loadTestFile","params","testErrors","config","fileSuite","file","rootDir","buildPools","_deepSerialize","getCompilationCacheFromLoader","incorporateCompilationCache","serializeCompilationCache","exports","create"],"sources":["../../src/loader/loaderMain.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { SerializedConfig } from '../common/ipc';\nimport { deserializeConfig } from '../common/configLoader';\nimport { ProcessRunner } from '../common/process';\nimport type { FullConfigInternal } from '../common/config';\nimport { loadTestFile } from '../common/testLoader';\nimport type { TestError } from '../../types/testReporter';\nimport { serializeCompilationCache } from '../transform/compilationCache';\nimport { PoolBuilder } from '../common/poolBuilder';\nimport { incorporateCompilationCache } from '../common/esmLoaderHost';\n\nexport class LoaderMain extends ProcessRunner {\n  private _serializedConfig: SerializedConfig;\n  private _configPromise: Promise<FullConfigInternal> | undefined;\n  private _poolBuilder = PoolBuilder.createForLoader();\n\n  constructor(serializedConfig: SerializedConfig) {\n    super();\n    this._serializedConfig = serializedConfig;\n  }\n\n  private _config(): Promise<FullConfigInternal> {\n    if (!this._configPromise)\n      this._configPromise = deserializeConfig(this._serializedConfig);\n    return this._configPromise;\n  }\n\n  async loadTestFile(params: { file: string }) {\n    const testErrors: TestError[] = [];\n    const config = await this._config();\n    const fileSuite = await loadTestFile(params.file, config.config.rootDir, testErrors);\n    this._poolBuilder.buildPools(fileSuite);\n    return { fileSuite: fileSuite._deepSerialize(), testErrors };\n  }\n\n  async getCompilationCacheFromLoader() {\n    await incorporateCompilationCache();\n    return serializeCompilationCache();\n  }\n}\n\nexport const create = (config: SerializedConfig) => new LoaderMain(config);\n"],"mappings":";;;;;;AAiBA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAEA,IAAAE,WAAA,GAAAF,OAAA;AAEA,IAAAG,iBAAA,GAAAH,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AACA,IAAAK,cAAA,GAAAL,OAAA;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYO,MAAMM,UAAU,SAASC,sBAAa,CAAC;EAK5CC,WAAWA,CAACC,gBAAkC,EAAE;IAC9C,KAAK,CAAC,CAAC;IAAC,KALFC,iBAAiB;IAAA,KACjBC,cAAc;IAAA,KACdP,YAAY,GAAGQ,wBAAW,CAACC,eAAe,CAAC,CAAC;IAIlD,IAAI,CAACH,iBAAiB,GAAGD,gBAAgB;EAC3C;EAEQK,OAAOA,CAAA,EAAgC;IAC7C,IAAI,CAAC,IAAI,CAACH,cAAc,EACtB,IAAI,CAACA,cAAc,GAAG,IAAAI,+BAAiB,EAAC,IAAI,CAACL,iBAAiB,CAAC;IACjE,OAAO,IAAI,CAACC,cAAc;EAC5B;EAEA,MAAMK,YAAYA,CAACC,MAAwB,EAAE;IAC3C,MAAMC,UAAuB,GAAG,EAAE;IAClC,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACL,OAAO,CAAC,CAAC;IACnC,MAAMM,SAAS,GAAG,MAAM,IAAAJ,wBAAY,EAACC,MAAM,CAACI,IAAI,EAAEF,MAAM,CAACA,MAAM,CAACG,OAAO,EAAEJ,UAAU,CAAC;IACpF,IAAI,CAACd,YAAY,CAACmB,UAAU,CAACH,SAAS,CAAC;IACvC,OAAO;MAAEA,SAAS,EAAEA,SAAS,CAACI,cAAc,CAAC,CAAC;MAAEN;IAAW,CAAC;EAC9D;EAEA,MAAMO,6BAA6BA,CAAA,EAAG;IACpC,MAAM,IAAAC,0CAA2B,EAAC,CAAC;IACnC,OAAO,IAAAC,2CAAyB,EAAC,CAAC;EACpC;AACF;AAACC,OAAA,CAAAtB,UAAA,GAAAA,UAAA;AAEM,MAAMuB,MAAM,GAAIV,MAAwB,IAAK,IAAIb,UAAU,CAACa,MAAM,CAAC;AAACS,OAAA,CAAAC,MAAA,GAAAA,MAAA"}