{"version":3,"file":"loadUtils.js","names":["_path","_interopRequireDefault","require","_loaderHost","_test","_util","_projectUtils","_transform","_suiteUtils","_testGroups","_compilationCache","_utilsBundle","obj","__esModule","default","collectProjectsAndTestFiles","testRun","doNotRunTestsOutsideProjectFilter","config","fsCache","Map","sourceMapCache","cliFileMatcher","cliArgs","length","createFileMatcherFromArguments","allFilesForProject","filteredProjects","filterProjects","projects","cliProjectFilter","project","files","collectFilesForProject","set","filesToRunByProject","matchedFiles","filter","file","hasMatchingSources","sourceMapSources","some","source","filteredFiles","Boolean","projectClosure","buildProjectsClosure","keys","type","treatProjectAsEmpty","includes","get","projectFiles","projectSuites","loadFileSuites","mode","errors","allTestFiles","Set","values","forEach","add","fileSuiteByFile","loaderHost","OutOfProcessLoaderHost","InProcessLoaderHost","start","fileSuite","loadTestFile","push","createDuplicateTitlesErrors","stop","dependency","dependenciesForTestFile","has","importer","path","relative","rootDir","importee","message","location","line","column","suites","map","createRootSuite","shouldFilterOnly","additionalFileMatcher","rootSuite","Suite","filteredProjectSuites","cliFileFilters","createFileFiltersFromArguments","grepMatcher","cliGrep","createTitleMatcher","forceRegExp","grepInvertMatcher","cliGrepInvert","cliTitleMatcher","title","fileSuites","projectSuite","createProjectSuite","filteredProjectSuite","filterProjectSuite","testIdMatcher","filteredRoot","_addSuite","filterOnly","delete","_hasTests","_project$fullConfig$c","repeatEach","fullConfig","configCLIOverrides","buildProjectSuite","forbidOnly","onlyTestsAndSuites","_getOnlyItems","configFilePath","configFile","undefined","createForbidOnlyErrors","shard","testGroups","createTestGroups","workers","testGroupsInThisShard","filterForShard","testsInThisShard","group","test","tests","filterTestsRemoveEmptySuites","suite","_fullProject","level","entries","_prependSuite","name","bindFileSuiteToProject","grep","grepInvert","grepTitle","_grepTitle","options","result","_deepClone","filterByFocusedLine","filterByTestIds","fullyParallel","_parallelMode","repeatEachIndex","clone","applyRepeatEachIndex","forbidOnlyCLIFlag","testOrSuite","titlePath","slice","join","configFilePathName","forbidOnlySource","error","testsByFullTitle","allTests","fullTitle","existingTest","buildItemLocation","requireOrImportDefaultFunction","expectConstructor","func","requireOrImport","errorWithFile","loadGlobalHook","resolve","loadReporter","cache","sources","endsWith","sourceMap","sourceMapSupport","retrieveSourceMap","sourceMapData","JSON","parse","dirname"],"sources":["../../src/runner/loadUtils.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport path from 'path';\nimport type { FullConfig, Reporter, TestError } from '../../types/testReporter';\nimport { InProcessLoaderHost, OutOfProcessLoaderHost } from './loaderHost';\nimport { Suite } from '../common/test';\nimport type { TestCase } from '../common/test';\nimport type { FullProjectInternal } from '../common/config';\nimport type { FullConfigInternal } from '../common/config';\nimport { createFileMatcherFromArguments, createFileFiltersFromArguments, createTitleMatcher, errorWithFile, forceRegExp } from '../util';\nimport type { Matcher, TestFileFilter } from '../util';\nimport { buildProjectsClosure, collectFilesForProject, filterProjects } from './projectUtils';\nimport type { TestRun } from './tasks';\nimport { requireOrImport } from '../transform/transform';\nimport { applyRepeatEachIndex, bindFileSuiteToProject, filterByFocusedLine, filterByTestIds, filterOnly, filterTestsRemoveEmptySuites } from '../common/suiteUtils';\nimport { createTestGroups, filterForShard, type TestGroup } from './testGroups';\nimport { dependenciesForTestFile } from '../transform/compilationCache';\nimport { sourceMapSupport } from '../utilsBundle';\nimport type { RawSourceMap } from 'source-map';\n\n\nexport async function collectProjectsAndTestFiles(testRun: TestRun, doNotRunTestsOutsideProjectFilter: boolean) {\n  const config = testRun.config;\n  const fsCache = new Map();\n  const sourceMapCache = new Map();\n  const cliFileMatcher = config.cliArgs.length ? createFileMatcherFromArguments(config.cliArgs) : null;\n\n  // First collect all files for the projects in the command line, don't apply any file filters.\n  const allFilesForProject = new Map<FullProjectInternal, string[]>();\n  const filteredProjects = filterProjects(config.projects, config.cliProjectFilter);\n  for (const project of filteredProjects) {\n    const files = await collectFilesForProject(project, fsCache);\n    allFilesForProject.set(project, files);\n  }\n\n  // Filter files based on the file filters, eliminate the empty projects.\n  const filesToRunByProject = new Map<FullProjectInternal, string[]>();\n  for (const [project, files] of allFilesForProject) {\n    const matchedFiles = files.filter(file => {\n      const hasMatchingSources = sourceMapSources(file, sourceMapCache).some(source => {\n        if (cliFileMatcher && !cliFileMatcher(source))\n          return false;\n        return true;\n      });\n      return hasMatchingSources;\n    });\n    const filteredFiles = matchedFiles.filter(Boolean) as string[];\n    filesToRunByProject.set(project, filteredFiles);\n  }\n\n  // (Re-)add all files for dependent projects, disregard filters.\n  const projectClosure = buildProjectsClosure([...filesToRunByProject.keys()]);\n  for (const [project, type] of projectClosure) {\n    if (type === 'dependency') {\n      const treatProjectAsEmpty = doNotRunTestsOutsideProjectFilter && !filteredProjects.includes(project);\n      const files = treatProjectAsEmpty ? [] : allFilesForProject.get(project) || await collectFilesForProject(project, fsCache);\n      filesToRunByProject.set(project, files);\n    }\n  }\n\n  testRun.projectFiles = filesToRunByProject;\n  testRun.projectSuites = new Map();\n}\n\nexport async function loadFileSuites(testRun: TestRun, mode: 'out-of-process' | 'in-process', errors: TestError[]) {\n  // Determine all files to load.\n  const config = testRun.config;\n  const allTestFiles = new Set<string>();\n  for (const files of testRun.projectFiles.values())\n    files.forEach(file => allTestFiles.add(file));\n\n  // Load test files.\n  const fileSuiteByFile = new Map<string, Suite>();\n  const loaderHost = mode === 'out-of-process' ? new OutOfProcessLoaderHost(config) : new InProcessLoaderHost(config);\n  if (await loaderHost.start(errors)) {\n    for (const file of allTestFiles) {\n      const fileSuite = await loaderHost.loadTestFile(file, errors);\n      fileSuiteByFile.set(file, fileSuite);\n      errors.push(...createDuplicateTitlesErrors(config, fileSuite));\n    }\n    await loaderHost.stop();\n  }\n\n  // Check that no test file imports another test file.\n  // Loader must be stopped first, since it populates the dependency tree.\n  for (const file of allTestFiles) {\n    for (const dependency of dependenciesForTestFile(file)) {\n      if (allTestFiles.has(dependency)) {\n        const importer = path.relative(config.config.rootDir, file);\n        const importee = path.relative(config.config.rootDir, dependency);\n        errors.push({\n          message: `Error: test file \"${importer}\" should not import test file \"${importee}\"`,\n          location: { file, line: 1, column: 1 },\n        });\n      }\n    }\n  }\n\n  // Collect file suites for each project.\n  for (const [project, files] of testRun.projectFiles) {\n    const suites = files.map(file => fileSuiteByFile.get(file)).filter(Boolean) as Suite[];\n    testRun.projectSuites.set(project, suites);\n  }\n}\n\nexport async function createRootSuite(testRun: TestRun, errors: TestError[], shouldFilterOnly: boolean, additionalFileMatcher?: Matcher): Promise<Suite> {\n  const config = testRun.config;\n  // Create root suite, where each child will be a project suite with cloned file suites inside it.\n  const rootSuite = new Suite('', 'root');\n  const projectSuites = new Map<FullProjectInternal, Suite>();\n  const filteredProjectSuites = new Map<FullProjectInternal, Suite>();\n\n  // Filter all the projects using grep, testId, file names.\n  {\n    // Interpret cli parameters.\n    const cliFileFilters = createFileFiltersFromArguments(config.cliArgs);\n    const grepMatcher = config.cliGrep ? createTitleMatcher(forceRegExp(config.cliGrep)) : () => true;\n    const grepInvertMatcher = config.cliGrepInvert ? createTitleMatcher(forceRegExp(config.cliGrepInvert)) : () => false;\n    const cliTitleMatcher = (title: string) => !grepInvertMatcher(title) && grepMatcher(title);\n\n    // Filter file suites for all projects.\n    for (const [project, fileSuites] of testRun.projectSuites) {\n      const projectSuite = createProjectSuite(project, fileSuites);\n      projectSuites.set(project, projectSuite);\n\n      const filteredProjectSuite = filterProjectSuite(projectSuite, { cliFileFilters, cliTitleMatcher, testIdMatcher: config.testIdMatcher, additionalFileMatcher });\n      filteredProjectSuites.set(project, filteredProjectSuite);\n    }\n  }\n\n  if (shouldFilterOnly) {\n    // Create a fake root to execute the exclusive semantics across the projects.\n    const filteredRoot = new Suite('', 'root');\n    for (const filteredProjectSuite of filteredProjectSuites.values())\n      filteredRoot._addSuite(filteredProjectSuite);\n    filterOnly(filteredRoot);\n    for (const [project, filteredProjectSuite] of filteredProjectSuites) {\n      if (!filteredRoot.suites.includes(filteredProjectSuite))\n        filteredProjectSuites.delete(project);\n    }\n  }\n\n  // Add post-filtered top-level projects to the root suite for sharding and 'only' processing.\n  const projectClosure = buildProjectsClosure([...filteredProjectSuites.keys()], project => filteredProjectSuites.get(project)!._hasTests());\n  for (const [project, type] of projectClosure) {\n    if (type === 'top-level') {\n      project.project.repeatEach = project.fullConfig.configCLIOverrides.repeatEach ?? project.project.repeatEach;\n      rootSuite._addSuite(buildProjectSuite(project, filteredProjectSuites.get(project)!));\n    }\n  }\n\n  // Complain about only.\n  if (config.config.forbidOnly) {\n    const onlyTestsAndSuites = rootSuite._getOnlyItems();\n    if (onlyTestsAndSuites.length > 0) {\n      const configFilePath = config.config.configFile ? path.relative(config.config.rootDir, config.config.configFile) : undefined;\n      errors.push(...createForbidOnlyErrors(onlyTestsAndSuites, config.configCLIOverrides.forbidOnly, configFilePath));\n    }\n  }\n\n  // Shard only the top-level projects.\n  if (config.config.shard) {\n    // Create test groups for top-level projects.\n    const testGroups: TestGroup[] = [];\n    for (const projectSuite of rootSuite.suites)\n      testGroups.push(...createTestGroups(projectSuite, config.config.workers));\n\n    // Shard test groups.\n    const testGroupsInThisShard = filterForShard(config.config.shard, testGroups);\n    const testsInThisShard = new Set<TestCase>();\n    for (const group of testGroupsInThisShard) {\n      for (const test of group.tests)\n        testsInThisShard.add(test);\n    }\n\n    // Update project suites, removing empty ones.\n    filterTestsRemoveEmptySuites(rootSuite, test => testsInThisShard.has(test));\n  }\n\n  // Now prepend dependency projects without filtration.\n  {\n    // Filtering 'only' and sharding might have reduced the number of top-level projects.\n    // Build the project closure to only include dependencies that are still needed.\n    const projectClosure = new Map(buildProjectsClosure(rootSuite.suites.map(suite => suite._fullProject!)));\n\n    // Clone file suites for dependency projects.\n    for (const [project, level] of projectClosure.entries()) {\n      if (level === 'dependency')\n        rootSuite._prependSuite(buildProjectSuite(project, projectSuites.get(project)!));\n    }\n  }\n\n  return rootSuite;\n}\n\nfunction createProjectSuite(project: FullProjectInternal, fileSuites: Suite[]): Suite {\n  const projectSuite = new Suite(project.project.name, 'project');\n  for (const fileSuite of fileSuites)\n    projectSuite._addSuite(bindFileSuiteToProject(project, fileSuite));\n\n  const grepMatcher = createTitleMatcher(project.project.grep);\n  const grepInvertMatcher = project.project.grepInvert ? createTitleMatcher(project.project.grepInvert) : null;\n  filterTestsRemoveEmptySuites(projectSuite, (test: TestCase) => {\n    const grepTitle = test._grepTitle();\n    if (grepInvertMatcher?.(grepTitle))\n      return false;\n    return grepMatcher(grepTitle);\n  });\n  return projectSuite;\n}\n\nfunction filterProjectSuite(projectSuite: Suite, options: { cliFileFilters: TestFileFilter[], cliTitleMatcher?: Matcher, testIdMatcher?: Matcher, additionalFileMatcher?: Matcher }): Suite {\n  // Fast path.\n  if (!options.cliFileFilters.length && !options.cliTitleMatcher && !options.testIdMatcher && !options.additionalFileMatcher)\n    return projectSuite;\n\n  const result = projectSuite._deepClone();\n  if (options.cliFileFilters.length)\n    filterByFocusedLine(result, options.cliFileFilters);\n  if (options.testIdMatcher)\n    filterByTestIds(result, options.testIdMatcher);\n  filterTestsRemoveEmptySuites(result, (test: TestCase) => {\n    if (options.cliTitleMatcher && !options.cliTitleMatcher(test._grepTitle()))\n      return false;\n    if (options.additionalFileMatcher && !options.additionalFileMatcher(test.location.file))\n      return false;\n    return true;\n  });\n  return result;\n}\n\nfunction buildProjectSuite(project: FullProjectInternal, projectSuite: Suite): Suite {\n  const result = new Suite(project.project.name, 'project');\n  result._fullProject = project;\n  if (project.fullyParallel)\n    result._parallelMode = 'parallel';\n\n  for (const fileSuite of projectSuite.suites) {\n    // Fast path for the repeatEach = 0.\n    result._addSuite(fileSuite);\n\n    for (let repeatEachIndex = 1; repeatEachIndex < project.project.repeatEach; repeatEachIndex++) {\n      const clone = fileSuite._deepClone();\n      applyRepeatEachIndex(project, clone, repeatEachIndex);\n      result._addSuite(clone);\n    }\n  }\n  return result;\n}\n\nfunction createForbidOnlyErrors(onlyTestsAndSuites: (TestCase | Suite)[], forbidOnlyCLIFlag: boolean | undefined, configFilePath: string | undefined): TestError[] {\n  const errors: TestError[] = [];\n  for (const testOrSuite of onlyTestsAndSuites) {\n    // Skip root and file.\n    const title = testOrSuite.titlePath().slice(2).join(' ');\n    const configFilePathName = configFilePath ? `'${configFilePath}'` : 'the Playwright configuration file';\n    const forbidOnlySource = forbidOnlyCLIFlag ? `'--forbid-only' CLI flag` : `'forbidOnly' option in ${configFilePathName}`;\n    const error: TestError = {\n      message: `Error: item focused with '.only' is not allowed due to the ${forbidOnlySource}: \"${title}\"`,\n      location: testOrSuite.location!,\n    };\n    errors.push(error);\n  }\n  return errors;\n}\n\nfunction createDuplicateTitlesErrors(config: FullConfigInternal, fileSuite: Suite): TestError[] {\n  const errors: TestError[] = [];\n  const testsByFullTitle = new Map<string, TestCase>();\n  for (const test of fileSuite.allTests()) {\n    const fullTitle = test.titlePath().slice(1).join(' › ');\n    const existingTest = testsByFullTitle.get(fullTitle);\n    if (existingTest) {\n      const error: TestError = {\n        message: `Error: duplicate test title \"${fullTitle}\", first declared in ${buildItemLocation(config.config.rootDir, existingTest)}`,\n        location: test.location,\n      };\n      errors.push(error);\n    }\n    testsByFullTitle.set(fullTitle, test);\n  }\n  return errors;\n}\n\nfunction buildItemLocation(rootDir: string, testOrSuite: Suite | TestCase) {\n  if (!testOrSuite.location)\n    return '';\n  return `${path.relative(rootDir, testOrSuite.location.file)}:${testOrSuite.location.line}`;\n}\n\nasync function requireOrImportDefaultFunction(file: string, expectConstructor: boolean) {\n  let func = await requireOrImport(file);\n  if (func && typeof func === 'object' && ('default' in func))\n    func = func['default'];\n  if (typeof func !== 'function')\n    throw errorWithFile(file, `file must export a single ${expectConstructor ? 'class' : 'function'}.`);\n  return func;\n}\n\nexport function loadGlobalHook(config: FullConfigInternal, file: string): Promise<(config: FullConfig) => any> {\n  return requireOrImportDefaultFunction(path.resolve(config.config.rootDir, file), false);\n}\n\nexport function loadReporter(config: FullConfigInternal | null, file: string): Promise<new (arg?: any) => Reporter> {\n  return requireOrImportDefaultFunction(config ? path.resolve(config.config.rootDir, file) : file, true);\n}\n\nfunction sourceMapSources(file: string, cache: Map<string, string[]>): string[] {\n  let sources = [file];\n  if (!file.endsWith('.js'))\n    return sources;\n  if (cache.has(file))\n    return cache.get(file)!;\n\n  try {\n    const sourceMap = sourceMapSupport.retrieveSourceMap(file);\n    const sourceMapData: RawSourceMap | undefined = typeof sourceMap?.map === 'string' ? JSON.parse(sourceMap.map) : sourceMap?.map;\n    if (sourceMapData?.sources)\n      sources = sourceMapData.sources.map(source => path.resolve(path.dirname(file), source));\n  } finally {\n    cache.set(file, sources);\n    return sources;\n  }\n}\n"],"mappings":"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"}