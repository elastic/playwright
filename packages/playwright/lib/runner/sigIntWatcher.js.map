{"version":3,"file":"sigIntWatcher.js","names":["SigIntWatcher","constructor","_hadSignal","_sigintPromise","_sigintHandler","sigintCallback","Promise","f","FixedNodeSIGINTHandler","off","on","promise","hadSignal","disarm","exports","_install","_handlerInstalled","process","_dispatch","_uninstall","handler","_handlers","push","length","filter","h","_ignoreNextSIGINTs","_class2","setTimeout"],"sources":["../../src/runner/sigIntWatcher.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class SigIntWatcher {\n  private _hadSignal: boolean = false;\n  private _sigintPromise: Promise<void>;\n  private _sigintHandler: () => void;\n  constructor() {\n    let sigintCallback: () => void;\n    this._sigintPromise = new Promise<void>(f => sigintCallback = f);\n    this._sigintHandler = () => {\n      FixedNodeSIGINTHandler.off(this._sigintHandler);\n      this._hadSignal = true;\n      sigintCallback();\n    };\n    FixedNodeSIGINTHandler.on(this._sigintHandler);\n  }\n\n  promise(): Promise<void> {\n    return this._sigintPromise;\n  }\n\n  hadSignal(): boolean {\n    return this._hadSignal;\n  }\n\n  disarm() {\n    FixedNodeSIGINTHandler.off(this._sigintHandler);\n  }\n}\n\n// NPM/NPX will send us duplicate SIGINT signals, so we need to ignore them.\nclass FixedNodeSIGINTHandler {\n  private static _handlers: (() => void)[] = [];\n  private static _ignoreNextSIGINTs = false;\n  private static _handlerInstalled = false;\n\n  static _dispatch = () => {\n    if (this._ignoreNextSIGINTs)\n      return;\n\n    this._ignoreNextSIGINTs = true;\n    setTimeout(() => {\n      this._ignoreNextSIGINTs = false;\n      // We remove the handler so that second Ctrl+C immediately kills the process\n      // via the default sigint handler. This is handy in the case where our shutdown\n      // takes a lot of time or is buggy.\n      //\n      // When running through NPM we might get multiple SIGINT signals\n      // for a single Ctrl+C - this is an NPM bug present since NPM v6+.\n      // https://github.com/npm/cli/issues/1591\n      // https://github.com/npm/cli/issues/2124\n      // https://github.com/npm/cli/issues/5021\n      //\n      // Therefore, removing the handler too soon will just kill the process\n      // with default handler without printing the results.\n      // We work around this by giving NPM 1000ms to send us duplicate signals.\n      // The side effect is that slow shutdown or bug in our process will force\n      // the user to hit Ctrl+C again after at least a second.\n      if (!this._handlers.length)\n        this._uninstall();\n    }, 1000);\n    for (const handler of this._handlers)\n      handler();\n  };\n\n  static _install() {\n    if (!this._handlerInstalled) {\n      this._handlerInstalled = true;\n      process.on('SIGINT', this._dispatch);\n    }\n  }\n\n  static _uninstall() {\n    if (this._handlerInstalled) {\n      this._handlerInstalled = false;\n      process.off('SIGINT', this._dispatch);\n    }\n  }\n\n  static on(handler: () => void) {\n    this._handlers.push(handler);\n    if (this._handlers.length === 1)\n      this._install();\n  }\n\n  static off(handler: () => void) {\n    this._handlers = this._handlers.filter(h => h !== handler);\n    if (!this._ignoreNextSIGINTs && !this._handlers.length)\n      this._uninstall();\n  }\n}\n"],"mappings":"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"}