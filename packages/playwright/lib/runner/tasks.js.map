{"version":3,"file":"tasks.js","names":["_fs","_interopRequireDefault","require","_path","_util","_utilsBundle","_utils","_dispatcher","_testGroups","_taskRunner","_loadUtils","_test","_projectUtils","_failureTracker","_vcs","obj","__esModule","default","readDirAsync","promisify","fs","readdir","TestRun","constructor","config","failureTracker","rootSuite","undefined","phases","projectFiles","Map","projectSuites","FailureTracker","exports","createTaskRunner","reporter","taskRunner","TaskRunner","create","globalTimeout","addGlobalSetupTasks","addTask","createLoadTask","filterOnly","failOnLoadErrors","addRunTasks","createTaskRunnerForWatchSetup","createTaskRunnerForTestServer","doNotRunDepsOutsideProjectFilter","configCLIOverrides","preserveOutputDir","process","env","PW_TEST_NO_REMOVE_OUTPUT_DIRS","createRemoveOutputDirsTask","plugin","plugins","createPluginSetupTask","globalSetup","globalTeardown","createGlobalSetupTask","createPhasesTask","createReportBeginTask","createPluginBeginTask","createRunTestsTask","createTaskRunnerForList","mode","options","createTaskRunnerForListFiles","createListFilesTask","createTaskRunnerForDevServer","setupAndWait","createStartDevServerTask","setup","Promise","onBegin","teardown","_plugin$instance","_plugin$instance$setu","factory","instance","call","configDir","_plugin$instance2","_plugin$instance2$tea","_plugin$instance3","_plugin$instance3$beg","begin","_plugin$instance4","_plugin$instance4$end","end","globalSetupResult","globalSetupFinished","teardownHook","setupHook","loadGlobalHook","_teardownHook","outputDirs","Set","projects","filterProjects","cliProjectFilter","forEach","p","add","project","outputDir","all","Array","from","map","removeFolders","then","error","code","entries","catch","e","entry","path","join","testRun","errors","createRootSuite","onRootSuite","collectProjectsAndTestFiles","files","projectSuite","Suite","name","_fullProject","_addSuite","suites","file","title","relative","rootDir","suite","location","line","column","set","softErrors","loadFileSuites","cliOnlyChangedMatcher","cliOnlyChanged","_plugin$instance5","_plugin$instance5$pop","populateDependencies","changedFiles","detectChangedTestFiles","has","allTests","length","cliPassWithNoTests","shard","cliArgs","Error","maxConcurrentTestGroups","processed","projectToSuite","allProjects","keys","teardownToSetups","buildTeardownToSetupsMap","teardownToSetupsDependents","setups","closure","buildDependentProjects","delete","i","size","phaseProjects","projectsThatShouldFinishFirst","deps","get","find","push","testGroupsInPhase","phase","dispatcher","Dispatcher","testGroups","createTestGroups","workers","debug","sort","Math","max","metadata","actualWorkers","min","successfulProjects","extraEnvByProjectId","flat","phaseTestGroups","extraEnv","dep","id","hasFailedDeps","some","run","stop","projectId","envProduced","producedEnvByProjectId","hasWorkerErrors","test","ok","reverse","devServerCleanup","message","_plugin$instance6","_plugin$instance6$sta","startDevServer","_plugin$devServerClea"],"sources":["../../src/runner/tasks.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\nimport { debug } from 'playwright-core/lib/utilsBundle';\nimport { removeFolders } from 'playwright-core/lib/utils';\nimport { Dispatcher, type EnvByProjectId } from './dispatcher';\nimport type { TestRunnerPluginRegistration } from '../plugins';\nimport { createTestGroups, type TestGroup } from '../runner/testGroups';\nimport type { Task } from './taskRunner';\nimport { TaskRunner } from './taskRunner';\nimport type { FullConfigInternal, FullProjectInternal } from '../common/config';\nimport { collectProjectsAndTestFiles, createRootSuite, loadFileSuites, loadGlobalHook } from './loadUtils';\nimport type { Matcher } from '../util';\nimport { Suite } from '../common/test';\nimport { buildDependentProjects, buildTeardownToSetupsMap, filterProjects } from './projectUtils';\nimport { FailureTracker } from './failureTracker';\nimport { detectChangedTestFiles } from './vcs';\nimport type { InternalReporter } from '../reporters/internalReporter';\n\nconst readDirAsync = promisify(fs.readdir);\n\ntype ProjectWithTestGroups = {\n  project: FullProjectInternal;\n  projectSuite: Suite;\n  testGroups: TestGroup[];\n};\n\nexport type Phase = {\n  dispatcher: Dispatcher,\n  projects: ProjectWithTestGroups[]\n};\n\nexport class TestRun {\n  readonly config: FullConfigInternal;\n  readonly failureTracker: FailureTracker;\n  rootSuite: Suite | undefined = undefined;\n  readonly phases: Phase[] = [];\n  projectFiles: Map<FullProjectInternal, string[]> = new Map();\n  projectSuites: Map<FullProjectInternal, Suite[]> = new Map();\n\n  constructor(config: FullConfigInternal) {\n    this.config = config;\n    this.failureTracker = new FailureTracker(config);\n  }\n}\n\nexport function createTaskRunner(config: FullConfigInternal, reporter: InternalReporter): TaskRunner<TestRun> {\n  const taskRunner = TaskRunner.create<TestRun>(reporter, config.config.globalTimeout);\n  addGlobalSetupTasks(taskRunner, config);\n  taskRunner.addTask('load tests', createLoadTask('in-process', { filterOnly: true, failOnLoadErrors: true }));\n  addRunTasks(taskRunner, config);\n  return taskRunner;\n}\n\nexport function createTaskRunnerForWatchSetup(config: FullConfigInternal, reporter: InternalReporter): TaskRunner<TestRun> {\n  const taskRunner = TaskRunner.create<TestRun>(reporter);\n  addGlobalSetupTasks(taskRunner, config);\n  return taskRunner;\n}\n\nexport function createTaskRunnerForTestServer(config: FullConfigInternal, reporter: InternalReporter): TaskRunner<TestRun> {\n  const taskRunner = TaskRunner.create<TestRun>(reporter);\n  taskRunner.addTask('load tests', createLoadTask('out-of-process', { filterOnly: true, failOnLoadErrors: false, doNotRunDepsOutsideProjectFilter: true }));\n  addRunTasks(taskRunner, config);\n  return taskRunner;\n}\n\nfunction addGlobalSetupTasks(taskRunner: TaskRunner<TestRun>, config: FullConfigInternal) {\n  if (!config.configCLIOverrides.preserveOutputDir && !process.env.PW_TEST_NO_REMOVE_OUTPUT_DIRS)\n    taskRunner.addTask('clear output', createRemoveOutputDirsTask());\n  for (const plugin of config.plugins)\n    taskRunner.addTask('plugin setup', createPluginSetupTask(plugin));\n  if (config.config.globalSetup || config.config.globalTeardown)\n    taskRunner.addTask('global setup', createGlobalSetupTask());\n}\n\nfunction addRunTasks(taskRunner: TaskRunner<TestRun>, config: FullConfigInternal) {\n  taskRunner.addTask('create phases', createPhasesTask());\n  taskRunner.addTask('report begin', createReportBeginTask());\n  for (const plugin of config.plugins)\n    taskRunner.addTask('plugin begin', createPluginBeginTask(plugin));\n  taskRunner.addTask('test suite', createRunTestsTask());\n  return taskRunner;\n}\n\nexport function createTaskRunnerForList(config: FullConfigInternal, reporter: InternalReporter, mode: 'in-process' | 'out-of-process', options: { failOnLoadErrors: boolean }): TaskRunner<TestRun> {\n  const taskRunner = TaskRunner.create<TestRun>(reporter, config.config.globalTimeout);\n  taskRunner.addTask('load tests', createLoadTask(mode, { ...options, filterOnly: false }));\n  taskRunner.addTask('report begin', createReportBeginTask());\n  return taskRunner;\n}\n\nexport function createTaskRunnerForListFiles(config: FullConfigInternal, reporter: InternalReporter): TaskRunner<TestRun> {\n  const taskRunner = TaskRunner.create<TestRun>(reporter, config.config.globalTimeout);\n  taskRunner.addTask('load tests', createListFilesTask());\n  taskRunner.addTask('report begin', createReportBeginTask());\n  return taskRunner;\n}\n\nexport function createTaskRunnerForDevServer(config: FullConfigInternal, reporter: InternalReporter, mode: 'in-process' | 'out-of-process', setupAndWait: boolean): TaskRunner<TestRun> {\n  const taskRunner = TaskRunner.create<TestRun>(reporter, config.config.globalTimeout);\n  if (setupAndWait) {\n    for (const plugin of config.plugins)\n      taskRunner.addTask('plugin setup', createPluginSetupTask(plugin));\n  }\n  taskRunner.addTask('load tests', createLoadTask(mode, { failOnLoadErrors: true, filterOnly: false }));\n  taskRunner.addTask('start dev server', createStartDevServerTask());\n  if (setupAndWait) {\n    taskRunner.addTask('wait until interrupted', {\n      setup: async () => new Promise(() => {}),\n    });\n  }\n  return taskRunner;\n}\n\nfunction createReportBeginTask(): Task<TestRun> {\n  return {\n    setup: async (reporter, { rootSuite }) => {\n      reporter.onBegin(rootSuite!);\n    },\n    teardown: async ({}) => {},\n  };\n}\n\nfunction createPluginSetupTask(plugin: TestRunnerPluginRegistration): Task<TestRun> {\n  return {\n    setup: async (reporter, { config }) => {\n      if (typeof plugin.factory === 'function')\n        plugin.instance = await plugin.factory();\n      else\n        plugin.instance = plugin.factory;\n      await plugin.instance?.setup?.(config.config, config.configDir, reporter);\n    },\n    teardown: async () => {\n      await plugin.instance?.teardown?.();\n    },\n  };\n}\n\nfunction createPluginBeginTask(plugin: TestRunnerPluginRegistration): Task<TestRun> {\n  return {\n    setup: async (reporter, { rootSuite }) => {\n      await plugin.instance?.begin?.(rootSuite!);\n    },\n    teardown: async () => {\n      await plugin.instance?.end?.();\n    },\n  };\n}\n\nfunction createGlobalSetupTask(): Task<TestRun> {\n  let globalSetupResult: any;\n  let globalSetupFinished = false;\n  let teardownHook: any;\n  return {\n    setup: async (reporter, { config }) => {\n      const setupHook = config.config.globalSetup ? await loadGlobalHook(config, config.config.globalSetup) : undefined;\n      teardownHook = config.config.globalTeardown ? await loadGlobalHook(config, config.config.globalTeardown) : undefined;\n      globalSetupResult = setupHook ? await setupHook(config.config) : undefined;\n      globalSetupFinished = true;\n    },\n    teardown: async (reporter, { config }) => {\n      if (typeof globalSetupResult === 'function')\n        await globalSetupResult();\n      if (globalSetupFinished)\n        await teardownHook?.(config.config);\n    },\n  };\n}\n\nfunction createRemoveOutputDirsTask(): Task<TestRun> {\n  return {\n    setup: async (reporter, { config }) => {\n      const outputDirs = new Set<string>();\n      const projects = filterProjects(config.projects, config.cliProjectFilter);\n      projects.forEach(p => outputDirs.add(p.project.outputDir));\n\n      await Promise.all(Array.from(outputDirs).map(outputDir => removeFolders([outputDir]).then(async ([error]) => {\n        if (!error)\n          return;\n        if ((error as any).code === 'EBUSY') {\n          // We failed to remove folder, might be due to the whole folder being mounted inside a container:\n          //   https://github.com/microsoft/playwright/issues/12106\n          // Do a best-effort to remove all files inside of it instead.\n          const entries = await readDirAsync(outputDir).catch(e => []);\n          await Promise.all(entries.map(entry => removeFolders([path.join(outputDir, entry)])));\n        } else {\n          throw error;\n        }\n      })));\n    },\n  };\n}\n\nfunction createListFilesTask(): Task<TestRun> {\n  return {\n    setup: async (reporter, testRun, errors) => {\n      testRun.rootSuite = await createRootSuite(testRun, errors, false);\n      testRun.failureTracker.onRootSuite(testRun.rootSuite);\n      await collectProjectsAndTestFiles(testRun, false);\n      for (const [project, files] of testRun.projectFiles) {\n        const projectSuite = new Suite(project.project.name, 'project');\n        projectSuite._fullProject = project;\n        testRun.rootSuite._addSuite(projectSuite);\n        const suites = files.map(file => {\n          const title = path.relative(testRun.config.config.rootDir, file);\n          const suite =  new Suite(title, 'file');\n          suite.location = { file, line: 0, column: 0 };\n          projectSuite._addSuite(suite);\n          return suite;\n        });\n        testRun.projectSuites.set(project, suites);\n      }\n    },\n  };\n}\n\nfunction createLoadTask(mode: 'out-of-process' | 'in-process', options: { filterOnly: boolean, failOnLoadErrors: boolean, doNotRunDepsOutsideProjectFilter?: boolean }): Task<TestRun> {\n  return {\n    setup: async (reporter, testRun, errors, softErrors) => {\n      await collectProjectsAndTestFiles(testRun, !!options.doNotRunDepsOutsideProjectFilter);\n      await loadFileSuites(testRun, mode, options.failOnLoadErrors ? errors : softErrors);\n\n      let cliOnlyChangedMatcher: Matcher | undefined = undefined;\n      if (testRun.config.cliOnlyChanged) {\n        for (const plugin of testRun.config.plugins)\n          await plugin.instance?.populateDependencies?.();\n        const changedFiles = await detectChangedTestFiles(testRun.config.cliOnlyChanged, testRun.config.configDir);\n        cliOnlyChangedMatcher = file => changedFiles.has(file);\n      }\n\n      testRun.rootSuite = await createRootSuite(testRun, options.failOnLoadErrors ? errors : softErrors, !!options.filterOnly, cliOnlyChangedMatcher);\n      testRun.failureTracker.onRootSuite(testRun.rootSuite);\n      // Fail when no tests.\n      if (options.failOnLoadErrors && !testRun.rootSuite.allTests().length && !testRun.config.cliPassWithNoTests && !testRun.config.config.shard && !testRun.config.cliOnlyChanged) {\n        if (testRun.config.cliArgs.length) {\n          throw new Error([\n            `No tests found.`,\n            `Make sure that arguments are regular expressions matching test files.`,\n            `You may need to escape symbols like \"$\" or \"*\" and quote the arguments.`,\n          ].join('\\n'));\n        }\n        throw new Error(`No tests found`);\n      }\n    },\n  };\n}\n\nfunction createPhasesTask(): Task<TestRun> {\n  return {\n    setup: async (reporter, testRun) => {\n      let maxConcurrentTestGroups = 0;\n\n      const processed = new Set<FullProjectInternal>();\n      const projectToSuite = new Map(testRun.rootSuite!.suites.map(suite => [suite._fullProject!, suite]));\n      const allProjects = [...projectToSuite.keys()];\n      const teardownToSetups = buildTeardownToSetupsMap(allProjects);\n      const teardownToSetupsDependents = new Map<FullProjectInternal, FullProjectInternal[]>();\n      for (const [teardown, setups] of teardownToSetups) {\n        const closure = buildDependentProjects(setups, allProjects);\n        closure.delete(teardown);\n        teardownToSetupsDependents.set(teardown, [...closure]);\n      }\n\n      for (let i = 0; i < projectToSuite.size; i++) {\n        // Find all projects that have all their dependencies processed by previous phases.\n        const phaseProjects: FullProjectInternal[] = [];\n        for (const project of projectToSuite.keys()) {\n          if (processed.has(project))\n            continue;\n          const projectsThatShouldFinishFirst = [...project.deps, ...(teardownToSetupsDependents.get(project) || [])];\n          if (projectsThatShouldFinishFirst.find(p => !processed.has(p)))\n            continue;\n          phaseProjects.push(project);\n        }\n\n        // Create a new phase.\n        for (const project of phaseProjects)\n          processed.add(project);\n        if (phaseProjects.length) {\n          let testGroupsInPhase = 0;\n          const phase: Phase = { dispatcher: new Dispatcher(testRun.config, reporter, testRun.failureTracker), projects: [] };\n          testRun.phases.push(phase);\n          for (const project of phaseProjects) {\n            const projectSuite = projectToSuite.get(project)!;\n            const testGroups = createTestGroups(projectSuite, testRun.config.config.workers);\n            phase.projects.push({ project, projectSuite, testGroups });\n            testGroupsInPhase += testGroups.length;\n          }\n          debug('pw:test:task')(`created phase #${testRun.phases.length} with ${phase.projects.map(p => p.project.project.name).sort()} projects, ${testGroupsInPhase} testGroups`);\n          maxConcurrentTestGroups = Math.max(maxConcurrentTestGroups, testGroupsInPhase);\n        }\n      }\n\n      testRun.config.config.metadata.actualWorkers = Math.min(testRun.config.config.workers, maxConcurrentTestGroups);\n    },\n  };\n}\n\nfunction createRunTestsTask(): Task<TestRun> {\n  return {\n    setup: async (reporter, { phases, failureTracker }) => {\n      const successfulProjects = new Set<FullProjectInternal>();\n      const extraEnvByProjectId: EnvByProjectId = new Map();\n      const teardownToSetups = buildTeardownToSetupsMap(phases.map(phase => phase.projects.map(p => p.project)).flat());\n\n      for (const { dispatcher, projects } of phases) {\n        // Each phase contains dispatcher and a set of test groups.\n        // We don't want to run the test groups belonging to the projects\n        // that depend on the projects that failed previously.\n        const phaseTestGroups: TestGroup[] = [];\n        for (const { project, testGroups } of projects) {\n          // Inherit extra environment variables from dependencies.\n          let extraEnv: Record<string, string | undefined> = {};\n          for (const dep of project.deps)\n            extraEnv = { ...extraEnv, ...extraEnvByProjectId.get(dep.id) };\n          for (const setup of teardownToSetups.get(project) || [])\n            extraEnv = { ...extraEnv, ...extraEnvByProjectId.get(setup.id) };\n          extraEnvByProjectId.set(project.id, extraEnv);\n\n          const hasFailedDeps = project.deps.some(p => !successfulProjects.has(p));\n          if (!hasFailedDeps)\n            phaseTestGroups.push(...testGroups);\n        }\n\n        if (phaseTestGroups.length) {\n          await dispatcher!.run(phaseTestGroups, extraEnvByProjectId);\n          await dispatcher.stop();\n          for (const [projectId, envProduced] of dispatcher.producedEnvByProjectId()) {\n            const extraEnv = extraEnvByProjectId.get(projectId) || {};\n            extraEnvByProjectId.set(projectId, { ...extraEnv, ...envProduced });\n          }\n        }\n\n        // If the worker broke, fail everything, we have no way of knowing which\n        // projects failed.\n        if (!failureTracker.hasWorkerErrors()) {\n          for (const { project, projectSuite } of projects) {\n            const hasFailedDeps = project.deps.some(p => !successfulProjects.has(p));\n            if (!hasFailedDeps && !projectSuite.allTests().some(test => !test.ok()))\n              successfulProjects.add(project);\n          }\n        }\n      }\n    },\n    teardown: async (reporter, { phases }) => {\n      for (const { dispatcher } of phases.reverse())\n        await dispatcher.stop();\n    },\n  };\n}\n\nfunction createStartDevServerTask(): Task<TestRun> {\n  return {\n    setup: async (reporter, testRun, errors, softErrors) => {\n      if (testRun.config.plugins.some(plugin => !!plugin.devServerCleanup)) {\n        errors.push({ message: `DevServer is already running` });\n        return;\n      }\n      for (const plugin of testRun.config.plugins)\n        plugin.devServerCleanup = await plugin.instance?.startDevServer?.();\n      if (!testRun.config.plugins.some(plugin => !!plugin.devServerCleanup))\n        errors.push({ message: `DevServer is not available in the package you are using. Did you mean to use component testing?` });\n    },\n\n    teardown: async (reporter, testRun) => {\n      for (const plugin of testRun.config.plugins) {\n        await plugin.devServerCleanup?.();\n        plugin.devServerCleanup = undefined;\n      }\n    },\n  };\n}\n"],"mappings":"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"}