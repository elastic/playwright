{"version":3,"file":"testServer.js","names":["_fs","_interopRequireDefault","require","_path","_server","_utils","_compilationCache","_reporters","_tasks","_utilsBundle","_list","_sigIntWatcher","_fsWatcher","_runner","_configLoader","_webServerPlugin","_util","_teleReceiver","_internalReporter","obj","__esModule","default","originalStdoutWrite","process","stdout","write","originalStderrWrite","stderr","TestServer","constructor","configLocation","_configLocation","_dispatcher","start","options","TestServerDispatcher","startTraceViewerServer","transport","stop","_this$_dispatcher","_this$_dispatcher2","_setInterceptStdio","runGlobalTeardown","_watcher","_watchedProjectDirs","Set","_ignoredProjectOutputs","_watchedTestDependencies","_testRun","_queue","Promise","resolve","_globalSetup","_devServer","_dispatchEvent","_plugins","_serializer","_watchTestDirs","_closeOnDisconnect","dispatch","method","params","onclose","gracefullyProcessExitDoNotHang","Watcher","events","collector","forEach","f","collectAffectedTestFiles","file","testFiles","_this$transport$sendE","_this$transport","sendEvent","call","_wireReporter","messageSink","createReporterForTestServer","_collectingInternalReporter","extraReporters","report","collectingReporter","e","push","reporter","InternalReporter","initialize","serializer","closeOnDisconnect","interceptStdio","watchTestDirs","ping","open","isUnderTest","location","line","catch","console","error","resizeTerminal","columns","cols","rows","checkBrowsers","hasBrowsers","hasSomeBrowsers","installBrowsers","runGlobalSetup","overrides","outputDir","ListReporter","config","_loadConfigOrReportError","status","taskRunner","createTaskRunnerForWatchSetup","onConfigure","testRun","TestRun","cleanup","globalCleanup","runDeferCleanup","onEnd","onExit","globalSetup","undefined","startDevServer","stopDevServer","createTaskRunnerForDevServer","devServer","clearCache","_loadConfig","clearCacheAndLogToConsole","listFiles","_params$projects","cliProjectFilter","projects","length","createTaskRunnerForListFiles","run","listTests","result","then","_innerListTests","_updateWatchedDirs","printInternalError","_params$projects2","repeatEach","retries","cliArgs","locations","cliGrep","grep","cliGrepInvert","grepInvert","cliListOnly","createTaskRunnerForList","failOnLoadErrors","p","add","project","testDir","resolveCtDirs","templateDir","outDir","_updateWatcher","reportPending","update","runTests","_innerRunTests","_params$projects3","stopTests","preserveOutputDir","timeout","reporters","map","r","use","trace","mode","sources","_live","video","headless","headed","_optionContextReuseMode","reuseContext","_optionConnectOptions","connectWsEndpoint","wsEndpoint","updateSnapshots","workers","env","PW_LIVE_TRACE_STACKS","wireReporter","testIdSet","testIds","cliPassWithNoTests","testIdMatcher","id","has","configReporters","createReporters","createTaskRunnerForTestServer","ManualPromise","watch","fileName","fileNames","dependenciesForTestFile","findRelatedTestFiles","errors","runner","Runner","files","_this$_testRun","_this$_testRun2","intercept","PWTEST_DEBUG","chunk","chunkToPayload","closeGracefully","loadConfig","webServerPluginsForConfig","plugins","factory","splice","serializeError","baseFullConfig","onError","exports","runUIMode","configFile","resolveConfigLocation","innerRunTestServer","server","cancelPromise","installRootRedirect","webApp","host","port","openTraceInBrowser","urlPrefix","page","openTraceViewerApp","PWTEST_HEADED_FOR_TEST","persistentContextOptions","handleSIGINT","on","runTestServer","log","replace","wsGuid","openUI","restartWithExperimentalTsEsm","testServer","sigintWatcher","SigIntWatcher","stdin","promise","disarm","hadSignal","type","Buffer","buffer","toString","text","browserName","registry","findExecutable","executablePathOrDie","executables","defaultExecutables","install","relativeTemplateDir","ctTemplateDir","fs","promises","realpath","path","normalize","join","configDir","ctCacheDir","_playwrightTest","override","removeFolderAndLogToConsole","cacheDir","folder","existsSync","rm","recursive","force"],"sources":["../../src/runner/testServer.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { installRootRedirect, openTraceInBrowser, openTraceViewerApp, registry, startTraceViewerServer } from 'playwright-core/lib/server';\nimport { ManualPromise, gracefullyProcessExitDoNotHang, isUnderTest } from 'playwright-core/lib/utils';\nimport type { Transport, HttpServer } from 'playwright-core/lib/utils';\nimport type * as reporterTypes from '../../types/testReporter';\nimport { collectAffectedTestFiles, dependenciesForTestFile } from '../transform/compilationCache';\nimport type { ConfigLocation, FullConfigInternal } from '../common/config';\nimport { createReporterForTestServer, createReporters } from './reporters';\nimport { TestRun, createTaskRunnerForList, createTaskRunnerForTestServer, createTaskRunnerForWatchSetup, createTaskRunnerForListFiles, createTaskRunnerForDevServer } from './tasks';\nimport { open } from 'playwright-core/lib/utilsBundle';\nimport ListReporter from '../reporters/list';\nimport { SigIntWatcher } from './sigIntWatcher';\nimport { Watcher } from '../fsWatcher';\nimport type { ReportEntry, TestServerInterface, TestServerInterfaceEventEmitters } from '../isomorphic/testServerInterface';\nimport { Runner } from './runner';\nimport type { ConfigCLIOverrides } from '../common/ipc';\nimport { loadConfig, resolveConfigLocation, restartWithExperimentalTsEsm } from '../common/configLoader';\nimport { webServerPluginsForConfig } from '../plugins/webServerPlugin';\nimport type { TraceViewerRedirectOptions, TraceViewerServerOptions } from 'playwright-core/lib/server/trace/viewer/traceViewer';\nimport type { TestRunnerPluginRegistration } from '../plugins';\nimport { serializeError } from '../util';\nimport { cacheDir } from '../transform/compilationCache';\nimport { baseFullConfig } from '../isomorphic/teleReceiver';\nimport { InternalReporter } from '../reporters/internalReporter';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\nconst originalStdoutWrite = process.stdout.write;\nconst originalStderrWrite = process.stderr.write;\n\nclass TestServer {\n  private _configLocation: ConfigLocation;\n  private _dispatcher: TestServerDispatcher | undefined;\n\n  constructor(configLocation: ConfigLocation) {\n    this._configLocation = configLocation;\n  }\n\n  async start(options: { host?: string, port?: number }): Promise<HttpServer> {\n    this._dispatcher = new TestServerDispatcher(this._configLocation);\n    return await startTraceViewerServer({ ...options, transport: this._dispatcher.transport });\n  }\n\n  async stop() {\n    await this._dispatcher?._setInterceptStdio(false);\n    await this._dispatcher?.runGlobalTeardown();\n  }\n}\n\nexport class TestServerDispatcher implements TestServerInterface {\n  private _configLocation: ConfigLocation;\n\n  private _watcher: Watcher;\n  private _watchedProjectDirs = new Set<string>();\n  private _ignoredProjectOutputs = new Set<string>();\n  private _watchedTestDependencies = new Set<string>();\n\n  private _testRun: { run: Promise<reporterTypes.FullResult['status']>, stop: ManualPromise<void> } | undefined;\n  readonly transport: Transport;\n  private _queue = Promise.resolve();\n  private _globalSetup: { cleanup: () => Promise<any>, report: ReportEntry[] } | undefined;\n  private _devServer: { cleanup: () => Promise<any>, report: ReportEntry[] } | undefined;\n  readonly _dispatchEvent: TestServerInterfaceEventEmitters['dispatchEvent'];\n  private _plugins: TestRunnerPluginRegistration[] | undefined;\n  private _serializer = require.resolve('./uiModeReporter');\n  private _watchTestDirs = false;\n  private _closeOnDisconnect = false;\n\n  constructor(configLocation: ConfigLocation) {\n    this._configLocation = configLocation;\n    this.transport = {\n      dispatch: (method, params) => (this as any)[method](params),\n      onclose: () => {\n        if (this._closeOnDisconnect)\n          gracefullyProcessExitDoNotHang(0);\n      },\n    };\n    this._watcher = new Watcher(events => {\n      const collector = new Set<string>();\n      events.forEach(f => collectAffectedTestFiles(f.file, collector));\n      this._dispatchEvent('testFilesChanged', { testFiles: [...collector] });\n    });\n    this._dispatchEvent = (method, params) => this.transport.sendEvent?.(method, params);\n  }\n\n  private async _wireReporter(messageSink: (message: any) => void) {\n    return await createReporterForTestServer(this._serializer, messageSink);\n  }\n\n  private async _collectingInternalReporter(...extraReporters: ReporterV2[]) {\n    const report: ReportEntry[] = [];\n    const collectingReporter = await createReporterForTestServer(this._serializer, e => report.push(e));\n    return { reporter: new InternalReporter([collectingReporter, ...extraReporters]), report };\n  }\n\n  async initialize(params: Parameters<TestServerInterface['initialize']>[0]): ReturnType<TestServerInterface['initialize']> {\n    // Note: this method can be called multiple times, for example from a new connection after UI mode reload.\n    this._serializer = params.serializer || require.resolve('./uiModeReporter');\n    this._closeOnDisconnect = !!params.closeOnDisconnect;\n    await this._setInterceptStdio(!!params.interceptStdio);\n    this._watchTestDirs = !!params.watchTestDirs;\n  }\n\n  async ping() {}\n\n  async open(params: Parameters<TestServerInterface['open']>[0]): ReturnType<TestServerInterface['open']> {\n    if (isUnderTest())\n      return;\n    // eslint-disable-next-line no-console\n    open('vscode://file/' + params.location.file + ':' + params.location.line).catch(e => console.error(e));\n  }\n\n  async resizeTerminal(params: Parameters<TestServerInterface['resizeTerminal']>[0]): ReturnType<TestServerInterface['resizeTerminal']> {\n    process.stdout.columns = params.cols;\n    process.stdout.rows = params.rows;\n    process.stderr.columns = params.cols;\n    process.stderr.columns = params.rows;\n  }\n\n  async checkBrowsers(): Promise<{ hasBrowsers: boolean; }> {\n    return { hasBrowsers: hasSomeBrowsers() };\n  }\n\n  async installBrowsers() {\n    await installBrowsers();\n  }\n\n  async runGlobalSetup(params: Parameters<TestServerInterface['runGlobalSetup']>[0]): ReturnType<TestServerInterface['runGlobalSetup']> {\n    await this.runGlobalTeardown();\n\n    const overrides: ConfigCLIOverrides = {\n      outputDir: params.outputDir,\n    };\n    const { reporter, report } = await this._collectingInternalReporter(new ListReporter());\n    const config = await this._loadConfigOrReportError(reporter, overrides);\n    if (!config)\n      return { status: 'failed', report };\n\n    const taskRunner = createTaskRunnerForWatchSetup(config, reporter);\n    reporter.onConfigure(config.config);\n    const testRun = new TestRun(config);\n    const { status, cleanup: globalCleanup } = await taskRunner.runDeferCleanup(testRun, 0);\n    await reporter.onEnd({ status });\n    await reporter.onExit();\n    if (status !== 'passed') {\n      await globalCleanup();\n      return { report, status };\n    }\n    this._globalSetup = { cleanup: globalCleanup, report };\n    return { report, status };\n  }\n\n  async runGlobalTeardown() {\n    const globalSetup = this._globalSetup;\n    const status = await globalSetup?.cleanup();\n    this._globalSetup = undefined;\n    return { status, report: globalSetup?.report || [] };\n  }\n\n  async startDevServer(params: Parameters<TestServerInterface['startDevServer']>[0]): ReturnType<TestServerInterface['startDevServer']> {\n    await this.stopDevServer({});\n\n    const { reporter, report } = await this._collectingInternalReporter();\n    const config = await this._loadConfigOrReportError(reporter);\n    if (!config)\n      return { report, status: 'failed' };\n\n    const taskRunner = createTaskRunnerForDevServer(config, reporter, 'out-of-process', false);\n    const testRun = new TestRun(config);\n    reporter.onConfigure(config.config);\n    const { status, cleanup } = await taskRunner.runDeferCleanup(testRun, 0);\n    await reporter.onEnd({ status });\n    await reporter.onExit();\n    if (status !== 'passed') {\n      await cleanup();\n      return { report, status };\n    }\n    this._devServer = { cleanup, report };\n    return { report, status };\n  }\n\n  async stopDevServer(params: Parameters<TestServerInterface['stopDevServer']>[0]): ReturnType<TestServerInterface['stopDevServer']> {\n    const devServer = this._devServer;\n    const status = await devServer?.cleanup();\n    this._devServer = undefined;\n    return { status, report: devServer?.report || [] };\n  }\n\n  async clearCache(params: Parameters<TestServerInterface['clearCache']>[0]): ReturnType<TestServerInterface['clearCache']> {\n    const { config } = await this._loadConfig();\n    if (config)\n      await clearCacheAndLogToConsole(config);\n  }\n\n  async listFiles(params: Parameters<TestServerInterface['listFiles']>[0]): ReturnType<TestServerInterface['listFiles']> {\n    const { reporter, report } = await this._collectingInternalReporter();\n    const config = await this._loadConfigOrReportError(reporter);\n    if (!config)\n      return { status: 'failed', report };\n\n    config.cliProjectFilter = params.projects?.length ? params.projects : undefined;\n    const taskRunner = createTaskRunnerForListFiles(config, reporter);\n    reporter.onConfigure(config.config);\n    const testRun = new TestRun(config);\n    const status = await taskRunner.run(testRun, 0);\n    await reporter.onEnd({ status });\n    await reporter.onExit();\n    return { report, status };\n  }\n\n  async listTests(params: Parameters<TestServerInterface['listTests']>[0]): ReturnType<TestServerInterface['listTests']> {\n    let result: Awaited<ReturnType<TestServerInterface['listTests']>>;\n    this._queue = this._queue.then(async () => {\n      const { config, report, status } = await this._innerListTests(params);\n      if (config)\n        await this._updateWatchedDirs(config);\n      result = { report, status };\n    }).catch(printInternalError);\n    await this._queue;\n    return result!;\n  }\n\n  private async _innerListTests(params: Parameters<TestServerInterface['listTests']>[0]): Promise<{\n    report: ReportEntry[],\n    reporter: InternalReporter,\n    status: reporterTypes.FullResult['status'],\n    config?: FullConfigInternal,\n  }> {\n    const overrides: ConfigCLIOverrides = {\n      repeatEach: 1,\n      retries: 0,\n      outputDir: params.outputDir,\n    };\n    const { reporter, report } = await this._collectingInternalReporter();\n    const config = await this._loadConfigOrReportError(reporter, overrides);\n    if (!config)\n      return { report, reporter, status: 'failed' };\n\n    config.cliArgs = params.locations || [];\n    config.cliGrep = params.grep;\n    config.cliGrepInvert = params.grepInvert;\n    config.cliProjectFilter = params.projects?.length ? params.projects : undefined;\n    config.cliListOnly = true;\n\n    const taskRunner = createTaskRunnerForList(config, reporter, 'out-of-process', { failOnLoadErrors: false });\n    const testRun = new TestRun(config);\n    reporter.onConfigure(config.config);\n    const status = await taskRunner.run(testRun, 0);\n    await reporter.onEnd({ status });\n    await reporter.onExit();\n    return { config, report, reporter, status };\n  }\n\n  private async _updateWatchedDirs(config: FullConfigInternal) {\n    this._watchedProjectDirs = new Set();\n    this._ignoredProjectOutputs = new Set();\n    for (const p of config.projects) {\n      this._watchedProjectDirs.add(p.project.testDir);\n      this._ignoredProjectOutputs.add(p.project.outputDir);\n    }\n\n    const result = await resolveCtDirs(config);\n    if (result) {\n      this._watchedProjectDirs.add(result.templateDir);\n      this._ignoredProjectOutputs.add(result.outDir);\n    }\n\n    if (this._watchTestDirs)\n      await this._updateWatcher(false);\n  }\n\n  private async _updateWatcher(reportPending: boolean) {\n    await this._watcher.update([...this._watchedProjectDirs, ...this._watchedTestDependencies], [...this._ignoredProjectOutputs], reportPending);\n  }\n\n  async runTests(params: Parameters<TestServerInterface['runTests']>[0]): ReturnType<TestServerInterface['runTests']> {\n    let result: Awaited<ReturnType<TestServerInterface['runTests']>> = { status: 'passed' };\n    this._queue = this._queue.then(async () => {\n      result = await this._innerRunTests(params).catch(e => { printInternalError(e); return { status: 'failed' }; });\n    });\n    await this._queue;\n    return result;\n  }\n\n  private async _innerRunTests(params: Parameters<TestServerInterface['runTests']>[0]): ReturnType<TestServerInterface['runTests']> {\n    await this.stopTests();\n    const overrides: ConfigCLIOverrides = {\n      repeatEach: 1,\n      retries: 0,\n      preserveOutputDir: true,\n      timeout: params.timeout,\n      reporter: params.reporters ? params.reporters.map(r => [r]) : undefined,\n      use: {\n        trace: params.trace === 'on' ? { mode: 'on', sources: false, _live: true } : (params.trace === 'off' ? 'off' : undefined),\n        video: params.video === 'on' ? 'on' : (params.video === 'off' ? 'off' : undefined),\n        headless: params.headed ? false : undefined,\n        _optionContextReuseMode: params.reuseContext ? 'when-possible' : undefined,\n        _optionConnectOptions: params.connectWsEndpoint ? { wsEndpoint: params.connectWsEndpoint } : undefined,\n      },\n      outputDir: params.outputDir,\n      updateSnapshots: params.updateSnapshots,\n      workers: params.workers,\n    };\n    if (params.trace === 'on')\n      process.env.PW_LIVE_TRACE_STACKS = '1';\n    else\n      process.env.PW_LIVE_TRACE_STACKS = undefined;\n\n    const wireReporter = await this._wireReporter(e => this._dispatchEvent('report', e));\n    const config = await this._loadConfigOrReportError(new InternalReporter([wireReporter]), overrides);\n    if (!config)\n      return { status: 'failed' };\n\n    const testIdSet = params.testIds ? new Set<string>(params.testIds) : null;\n    config.cliListOnly = false;\n    config.cliPassWithNoTests = true;\n    config.cliArgs = params.locations || [];\n    config.cliGrep = params.grep;\n    config.cliGrepInvert = params.grepInvert;\n    config.cliProjectFilter = params.projects?.length ? params.projects : undefined;\n    config.testIdMatcher = testIdSet ? id => testIdSet.has(id) : undefined;\n\n    const configReporters = await createReporters(config, 'test', true);\n    const reporter = new InternalReporter([...configReporters, wireReporter]);\n    const taskRunner = createTaskRunnerForTestServer(config, reporter);\n    const testRun = new TestRun(config);\n    reporter.onConfigure(config.config);\n    const stop = new ManualPromise();\n    const run = taskRunner.run(testRun, 0, stop).then(async status => {\n      await reporter.onEnd({ status });\n      await reporter.onExit();\n      this._testRun = undefined;\n      return status;\n    });\n    this._testRun = { run, stop };\n    return { status: await run };\n  }\n\n  async watch(params: { fileNames: string[]; }) {\n    this._watchedTestDependencies = new Set();\n    for (const fileName of params.fileNames) {\n      this._watchedTestDependencies.add(fileName);\n      dependenciesForTestFile(fileName).forEach(file => this._watchedTestDependencies.add(file));\n    }\n    await this._updateWatcher(true);\n  }\n\n  async findRelatedTestFiles(params: Parameters<TestServerInterface['findRelatedTestFiles']>[0]): ReturnType<TestServerInterface['findRelatedTestFiles']> {\n    const { config, error } = await this._loadConfig();\n    if (error)\n      return { testFiles: [], errors: [error] };\n    const runner = new Runner(config!);\n    return runner.findRelatedTestFiles('out-of-process', params.files);\n  }\n\n  async stopTests() {\n    this._testRun?.stop?.resolve();\n    await this._testRun?.run;\n  }\n\n  async _setInterceptStdio(intercept: boolean) {\n    if (process.env.PWTEST_DEBUG)\n      return;\n    if (intercept) {\n      process.stdout.write = (chunk: string | Buffer) => {\n        this._dispatchEvent('stdio', chunkToPayload('stdout', chunk));\n        return true;\n      };\n      process.stderr.write = (chunk: string | Buffer) => {\n        this._dispatchEvent('stdio', chunkToPayload('stderr', chunk));\n        return true;\n      };\n    } else {\n      process.stdout.write = originalStdoutWrite;\n      process.stderr.write = originalStderrWrite;\n    }\n  }\n\n  async closeGracefully() {\n    gracefullyProcessExitDoNotHang(0);\n  }\n\n  private async _loadConfig(overrides?: ConfigCLIOverrides): Promise<{ config: FullConfigInternal | null, error?: reporterTypes.TestError }> {\n    try {\n      const config = await loadConfig(this._configLocation, overrides);\n      // Preserve plugin instances between setup and build.\n      if (!this._plugins) {\n        webServerPluginsForConfig(config).forEach(p => config.plugins.push({ factory: p }));\n        this._plugins = config.plugins || [];\n      } else {\n        config.plugins.splice(0, config.plugins.length, ...this._plugins);\n      }\n      return { config };\n    } catch (e) {\n      return { config: null, error: serializeError(e) };\n    }\n  }\n\n  private async _loadConfigOrReportError(reporter: InternalReporter, overrides?: ConfigCLIOverrides): Promise<FullConfigInternal | null> {\n    const { config, error } = await this._loadConfig(overrides);\n    if (config)\n      return config;\n    // Produce dummy config when it has an error.\n    reporter.onConfigure(baseFullConfig);\n    reporter.onError(error!);\n    await reporter.onEnd({ status: 'failed' });\n    await reporter.onExit();\n    return null;\n  }\n}\n\nexport async function runUIMode(configFile: string | undefined, options: TraceViewerServerOptions & TraceViewerRedirectOptions): Promise<reporterTypes.FullResult['status'] | 'restarted'> {\n  const configLocation = resolveConfigLocation(configFile);\n  return await innerRunTestServer(configLocation, options, async (server: HttpServer, cancelPromise: ManualPromise<void>) => {\n    await installRootRedirect(server, [], { ...options, webApp: 'uiMode.html' });\n    if (options.host !== undefined || options.port !== undefined) {\n      await openTraceInBrowser(server.urlPrefix('human-readable'));\n    } else {\n      const page = await openTraceViewerApp(server.urlPrefix('precise'), 'chromium', {\n        headless: isUnderTest() && process.env.PWTEST_HEADED_FOR_TEST !== '1',\n        persistentContextOptions: {\n          handleSIGINT: false,\n        },\n      });\n      page.on('close', () => cancelPromise.resolve());\n    }\n  });\n}\n\nexport async function runTestServer(configFile: string | undefined, options: { host?: string, port?: number }): Promise<reporterTypes.FullResult['status'] | 'restarted'> {\n  const configLocation = resolveConfigLocation(configFile);\n  return await innerRunTestServer(configLocation, options, async server => {\n    // eslint-disable-next-line no-console\n    console.log('Listening on ' + server.urlPrefix('precise').replace('http:', 'ws:') + '/' + server.wsGuid());\n  });\n}\n\nasync function innerRunTestServer(configLocation: ConfigLocation, options: { host?: string, port?: number }, openUI: (server: HttpServer, cancelPromise: ManualPromise<void>, configLocation: ConfigLocation) => Promise<void>): Promise<reporterTypes.FullResult['status'] | 'restarted'> {\n  if (restartWithExperimentalTsEsm(undefined, true))\n    return 'restarted';\n  const testServer = new TestServer(configLocation);\n  const cancelPromise = new ManualPromise<void>();\n  const sigintWatcher = new SigIntWatcher();\n  process.stdin.on('close', () => gracefullyProcessExitDoNotHang(0));\n  void sigintWatcher.promise().then(() => cancelPromise.resolve());\n  try {\n    const server = await testServer.start(options);\n    await openUI(server, cancelPromise, configLocation);\n    await cancelPromise;\n  } finally {\n    await testServer.stop();\n    sigintWatcher.disarm();\n  }\n  return sigintWatcher.hadSignal() ? 'interrupted' : 'passed';\n}\n\ntype StdioPayload = {\n  type: 'stdout' | 'stderr';\n  text?: string;\n  buffer?: string;\n};\n\nfunction chunkToPayload(type: 'stdout' | 'stderr', chunk: Buffer | string): StdioPayload {\n  if (chunk instanceof Buffer)\n    return { type, buffer: chunk.toString('base64') };\n  return { type, text: chunk };\n}\n\nfunction hasSomeBrowsers(): boolean {\n  for (const browserName of ['chromium', 'webkit', 'firefox']) {\n    try {\n      registry.findExecutable(browserName)!.executablePathOrDie('javascript');\n      return true;\n    } catch {\n    }\n  }\n  return false;\n}\n\nasync function installBrowsers() {\n  const executables = registry.defaultExecutables();\n  await registry.install(executables, false);\n}\n\nfunction printInternalError(e: Error) {\n  // eslint-disable-next-line no-console\n  console.error('Internal error:', e);\n}\n\n// TODO: remove CT dependency.\nexport async function resolveCtDirs(config: FullConfigInternal) {\n  const use = config.config.projects[0].use as any;\n  const relativeTemplateDir = use.ctTemplateDir || 'playwright';\n  const templateDir = await fs.promises.realpath(path.normalize(path.join(config.configDir, relativeTemplateDir))).catch(() => undefined);\n  if (!templateDir)\n    return null;\n  const outDir = use.ctCacheDir ? path.resolve(config.configDir, use.ctCacheDir) : path.resolve(templateDir, '.cache');\n  return {\n    outDir,\n    templateDir\n  };\n}\n\nexport async function clearCacheAndLogToConsole(config: FullConfigInternal) {\n  const override = (config.config as any)['@playwright/test']?.['cli']?.['clear-cache'];\n  if (override) {\n    await override(config);\n    return;\n  }\n  await removeFolderAndLogToConsole(cacheDir);\n}\n\nexport async function removeFolderAndLogToConsole(folder: string) {\n  try {\n    if (!fs.existsSync(folder))\n      return;\n    // eslint-disable-next-line no-console\n    console.log(`Removing ${await fs.promises.realpath(folder)}`);\n    await fs.promises.rm(folder, { recursive: true, force: true });\n  } catch {\n  }\n}\n"],"mappings":"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"}