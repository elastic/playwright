{"version":3,"file":"runner.js","names":["_fs","_interopRequireDefault","require","_path","_utils","_webServerPlugin","_projectUtils","_reporters","_tasks","_reporterV","_compilationCache","_internalReporter","obj","__esModule","default","Runner","constructor","config","_config","listTestFiles","projectNames","projects","filterProjects","report","project","push","name","testDir","use","testIdAttribute","files","collectFilesForProject","runAllTests","listOnly","cliListOnly","deadline","globalTimeout","monotonicTime","webServerPluginsForConfig","forEach","p","plugins","factory","reporters","createReporters","reporter","InternalReporter","taskRunner","createTaskRunnerForList","failOnLoadErrors","createTaskRunner","testRun","TestRun","onConfigure","taskStatus","run","status","failureTracker","result","modifiedResult","onEnd","writeLastRunInfo","onExit","Promise","resolve","process","stdout","write","stderr","loadAllTests","mode","errors","wrapReporterAsV2","onError","error","suite","rootSuite","findRelatedTestFiles","_playwrightTest","testFiles","resolvedFiles","map","file","path","cwd","override","affectedTestFiles","runDevServer","createConsoleReporter","createTaskRunnerForDevServer","exports","_testRun$rootSuite","cliProjectFilter","outputDir","fs","promises","mkdir","recursive","lastRunReportFile","join","failedTests","allTests","filter","t","ok","id","lastRunReport","JSON","stringify","undefined","writeFile","readLastRunInfo","parse","readFile"],"sources":["../../src/runner/runner.ts"],"sourcesContent":["/**\n * Copyright 2019 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { monotonicTime } from 'playwright-core/lib/utils';\nimport type { FullResult, TestError } from '../../types/testReporter';\nimport { webServerPluginsForConfig } from '../plugins/webServerPlugin';\nimport { collectFilesForProject, filterProjects } from './projectUtils';\nimport { createConsoleReporter, createReporters } from './reporters';\nimport { TestRun, createTaskRunner, createTaskRunnerForDevServer, createTaskRunnerForList } from './tasks';\nimport type { FullConfigInternal } from '../common/config';\nimport type { Suite } from '../common/test';\nimport { wrapReporterAsV2 } from '../reporters/reporterV2';\nimport { affectedTestFiles } from '../transform/compilationCache';\nimport { InternalReporter } from '../reporters/internalReporter';\n\ntype ProjectConfigWithFiles = {\n  name: string;\n  testDir: string;\n  use: { testIdAttribute?: string };\n  files: string[];\n};\n\ntype ConfigListFilesReport = {\n  projects: ProjectConfigWithFiles[];\n  error?: TestError;\n};\n\nexport type FindRelatedTestFilesReport = {\n  testFiles: string[];\n  errors?: TestError[];\n};\n\nexport class Runner {\n  private _config: FullConfigInternal;\n\n  constructor(config: FullConfigInternal) {\n    this._config = config;\n  }\n\n  async listTestFiles(projectNames?: string[]): Promise<ConfigListFilesReport> {\n    const projects = filterProjects(this._config.projects, projectNames);\n    const report: ConfigListFilesReport = {\n      projects: [],\n    };\n    for (const project of projects) {\n      report.projects.push({\n        name: project.project.name,\n        testDir: project.project.testDir,\n        use: { testIdAttribute: project.project.use.testIdAttribute },\n        files: await collectFilesForProject(project)\n      });\n    }\n    return report;\n  }\n\n  async runAllTests(): Promise<FullResult['status']> {\n    const config = this._config;\n    const listOnly = config.cliListOnly;\n    const deadline = config.config.globalTimeout ? monotonicTime() + config.config.globalTimeout : 0;\n\n    // Legacy webServer support.\n    webServerPluginsForConfig(config).forEach(p => config.plugins.push({ factory: p }));\n\n    const reporters = await createReporters(config, listOnly ? 'list' : 'test', false);\n    const reporter = new InternalReporter(reporters);\n    const taskRunner = listOnly ? createTaskRunnerForList(\n        config,\n        reporter,\n        'in-process',\n        { failOnLoadErrors: true }) : createTaskRunner(config, reporter);\n\n    const testRun = new TestRun(config);\n    reporter.onConfigure(config.config);\n\n    const taskStatus = await taskRunner.run(testRun, deadline);\n    let status: FullResult['status'] = testRun.failureTracker.result();\n    if (status === 'passed' && taskStatus !== 'passed')\n      status = taskStatus;\n    const modifiedResult = await reporter.onEnd({ status });\n    if (modifiedResult && modifiedResult.status)\n      status = modifiedResult.status;\n\n    if (!listOnly)\n      await writeLastRunInfo(testRun, status);\n\n    await reporter.onExit();\n\n    // Calling process.exit() might truncate large stdout/stderr output.\n    // See https://github.com/nodejs/node/issues/6456.\n    // See https://github.com/nodejs/node/issues/12921\n    await new Promise<void>(resolve => process.stdout.write('', () => resolve()));\n    await new Promise<void>(resolve => process.stderr.write('', () => resolve()));\n    return status;\n  }\n\n  async loadAllTests(mode: 'in-process' | 'out-of-process' = 'in-process'): Promise<{ status: FullResult['status'], suite?: Suite, errors: TestError[] }> {\n    const config = this._config;\n    const errors: TestError[] = [];\n    const reporter = new InternalReporter([wrapReporterAsV2({\n      onError(error: TestError) {\n        errors.push(error);\n      }\n    })]);\n    const taskRunner = createTaskRunnerForList(config, reporter, mode, { failOnLoadErrors: true });\n    const testRun = new TestRun(config);\n    reporter.onConfigure(config.config);\n\n    const taskStatus = await taskRunner.run(testRun, 0);\n    let status: FullResult['status'] = testRun.failureTracker.result();\n    if (status === 'passed' && taskStatus !== 'passed')\n      status = taskStatus;\n    const modifiedResult = await reporter.onEnd({ status });\n    if (modifiedResult && modifiedResult.status)\n      status = modifiedResult.status;\n    await reporter.onExit();\n    return { status, suite: testRun.rootSuite, errors };\n  }\n\n  async findRelatedTestFiles(mode: 'in-process' | 'out-of-process', files: string[]): Promise<FindRelatedTestFilesReport>  {\n    const result = await this.loadAllTests(mode);\n    if (result.status !== 'passed' || !result.suite)\n      return { errors: result.errors, testFiles: [] };\n\n    const resolvedFiles = (files as string[]).map(file => path.resolve(process.cwd(), file));\n    const override = (this._config.config as any)['@playwright/test']?.['cli']?.['find-related-test-files'];\n    if (override)\n      return await override(resolvedFiles, this._config);\n    return { testFiles: affectedTestFiles(resolvedFiles) };\n  }\n\n  async runDevServer() {\n    const reporter = new InternalReporter([createConsoleReporter()]);\n    const taskRunner = createTaskRunnerForDevServer(this._config, reporter, 'in-process', true);\n    const testRun = new TestRun(this._config);\n    reporter.onConfigure(this._config.config);\n    const status = await taskRunner.run(testRun, 0);\n    await reporter.onEnd({ status });\n    await reporter.onExit();\n    return { status };\n  }\n}\n\nexport type LastRunInfo = {\n  status: FullResult['status'];\n  failedTests: string[];\n};\n\nasync function writeLastRunInfo(testRun: TestRun, status: FullResult['status']) {\n  const [project] = filterProjects(testRun.config.projects, testRun.config.cliProjectFilter);\n  if (!project)\n    return;\n  const outputDir = project.project.outputDir;\n  await fs.promises.mkdir(outputDir, { recursive: true });\n  const lastRunReportFile = path.join(outputDir, '.last-run.json');\n  const failedTests = testRun.rootSuite?.allTests().filter(t => !t.ok()).map(t => t.id);\n  const lastRunReport = JSON.stringify({ status, failedTests }, undefined, 2);\n  await fs.promises.writeFile(lastRunReportFile, lastRunReport);\n}\n\nexport async function readLastRunInfo(config: FullConfigInternal): Promise<LastRunInfo> {\n  const [project] = filterProjects(config.projects, config.cliProjectFilter);\n  if (!project)\n    return { status: 'passed', failedTests: [] };\n  const outputDir = project.project.outputDir;\n  try {\n    const lastRunReportFile = path.join(outputDir, '.last-run.json');\n    return JSON.parse(await fs.promises.readFile(lastRunReportFile, 'utf8')) as LastRunInfo;\n  } catch {\n  }\n  return { status: 'passed', failedTests: [] };\n}\n"],"mappings":"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"}