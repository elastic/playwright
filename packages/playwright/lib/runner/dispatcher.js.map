{"version":3,"file":"dispatcher.js","names":["_ipc","require","_utils","_workerHost","_utilsBundle","Dispatcher","constructor","config","reporter","failureTracker","_workerSlots","_queue","_queuedOrRunningHashCount","Map","_finished","ManualPromise","_isStopped","_config","_reporter","_failureTracker","_extraEnvByProjectId","_producedEnvByProjectId","_scheduleJob","length","job","index","findIndex","w","busy","worker","hash","workerHash","didSendStop","shift","_startJobInWorker","_checkFinished","stopCallback","stop","catch","jobDispatcher","JobDispatcher","skipWholeJob","undefined","startError","_createWorker","serializeConfig","on","start","onExit","runInWorker","result","jobResult","_updateCounterForWorkerHash","didFail","_isWorkerRedundant","newJob","unshift","isDone","some","resolve","workersWithSameHash","slot","get","delta","set","run","testGroups","extraEnvByProjectId","group","hasReachedMaxFailures","i","workers","push","testGroup","parallelIndex","loaderData","projectConfig","projects","find","p","id","projectId","outputDir","project","WorkerHost","handleOutput","params","_this$_workerSlots$pa","chunk","chunkFromParams","currentlyRunning","test","stdout","onStdOut","stderr","onStdErr","onWorkerError","error","fatalErrors","onError","producedEnv","producedEnvByProjectId","Promise","all","map","exports","_job","_stopCallback","_listeners","_failedTests","Set","_failedWithNonRetriableError","_remainingByTestId","_dataByTestId","_parallelIndex","_workerIndex","_currentlyRunning","tests","e","_onTestBegin","testId","_appendTestResult","steps","workerIndex","startTime","Date","startWallTime","onTestBegin","_onTestEnd","status","errors","data","delete","duration","expectedStatus","annotations","timeout","isFailure","add","hasNonRetriableError","_addNonretriableTestAndSerialModeParents","_reportTestEnd","parent","_parallelMode","_onStepBegin","parentStep","parentStepId","step","title","titlePath","parentPath","category","wallTime","location","stepId","onStepBegin","_onStepEnd","getTime","onStepEnd","_onAttach","attachment","name","path","contentType","body","Buffer","from","attachments","_failTestWithErrors","runData","_massSkipTestsFromRemaining","testIds","values","has","_onDone","size","skipTestsDueToSetupFailure","fatalUnknownTestIds","unexpectedExitError","message","keys","retryCandidates","serialSuitesWithFailures","failedTest","outermostSerialSuite","testsBelongingToSomeSerialSuiteWithFailures","filter","serialSuite","allTests","forEach","remaining","results","retries","unexpectedly","code","signal","eventsHelper","removeEventListeners","runPayload","file","requireFile","entries","retry","runTestGroup","addEventListener","bind","allTestsSkipped","every","onTestEnd","hadMaxFailures","colors","red","maxFailures","text","buffer"],"sources":["../../src/runner/dispatcher.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { TestBeginPayload, TestEndPayload, DonePayload, TestOutputPayload, StepBeginPayload, StepEndPayload, TeardownErrorsPayload, RunPayload, SerializedConfig, AttachmentPayload } from '../common/ipc';\nimport { serializeConfig } from '../common/ipc';\nimport type { TestResult, TestStep, TestError } from '../../types/testReporter';\nimport type { Suite } from '../common/test';\nimport type { ProcessExitData } from './processHost';\nimport type { TestCase } from '../common/test';\nimport { ManualPromise, type RegisteredListener, eventsHelper } from 'playwright-core/lib/utils';\nimport { WorkerHost } from './workerHost';\nimport type { TestGroup } from './testGroups';\nimport type { FullConfigInternal } from '../common/config';\nimport type { ReporterV2 } from '../reporters/reporterV2';\nimport type { FailureTracker } from './failureTracker';\nimport { colors } from 'playwright-core/lib/utilsBundle';\n\nexport type EnvByProjectId = Map<string, Record<string, string | undefined>>;\n\nexport class Dispatcher {\n  private _workerSlots: { busy: boolean, worker?: WorkerHost, jobDispatcher?: JobDispatcher }[] = [];\n  private _queue: TestGroup[] = [];\n  private _queuedOrRunningHashCount = new Map<string, number>();\n  private _finished = new ManualPromise<void>();\n  private _isStopped = true;\n\n  private _config: FullConfigInternal;\n  private _reporter: ReporterV2;\n  private _failureTracker: FailureTracker;\n\n  private _extraEnvByProjectId: EnvByProjectId = new Map();\n  private _producedEnvByProjectId: EnvByProjectId = new Map();\n\n  constructor(config: FullConfigInternal, reporter: ReporterV2, failureTracker: FailureTracker) {\n    this._config = config;\n    this._reporter = reporter;\n    this._failureTracker = failureTracker;\n  }\n\n  private async _scheduleJob() {\n    // 1. Find a job to run.\n    if (this._isStopped || !this._queue.length)\n      return;\n    const job = this._queue[0];\n\n    // 2. Find a worker with the same hash, or just some free worker.\n    let index = this._workerSlots.findIndex(w => !w.busy && w.worker && w.worker.hash() === job.workerHash && !w.worker.didSendStop());\n    if (index === -1)\n      index = this._workerSlots.findIndex(w => !w.busy);\n    // No workers available, bail out.\n    if (index === -1)\n      return;\n\n    // 3. Claim both the job and the worker, run the job and release the worker.\n    this._queue.shift();\n    this._workerSlots[index].busy = true;\n    await this._startJobInWorker(index, job);\n    this._workerSlots[index].busy = false;\n\n    // 4. Check the \"finished\" condition.\n    this._checkFinished();\n\n    // 5. We got a free worker - perhaps we can immediately start another job?\n    void this._scheduleJob();\n  }\n\n  private async _startJobInWorker(index: number, job: TestGroup) {\n    const stopCallback = () => this.stop().catch(() => {});\n    const jobDispatcher = new JobDispatcher(job, this._reporter, this._failureTracker, stopCallback);\n    if (jobDispatcher.skipWholeJob())\n      return;\n\n    let worker = this._workerSlots[index].worker;\n\n    // 1. Restart the worker if it has the wrong hash or is being stopped already.\n    if (worker && (worker.hash() !== job.workerHash || worker.didSendStop())) {\n      await worker.stop();\n      worker = undefined;\n      if (this._isStopped) // Check stopped signal after async hop.\n        return;\n    }\n    this._workerSlots[index].jobDispatcher = jobDispatcher;\n\n    // 2. Start the worker if it is down.\n    let startError;\n    if (!worker) {\n      worker = this._createWorker(job, index, serializeConfig(this._config, true));\n      this._workerSlots[index].worker = worker;\n      worker.on('exit', () => this._workerSlots[index].worker = undefined);\n      startError = await worker.start();\n      if (this._isStopped) // Check stopped signal after async hop.\n        return;\n    }\n\n    // 3. Run the job.\n    if (startError)\n      jobDispatcher.onExit(startError);\n    else\n      jobDispatcher.runInWorker(worker);\n    const result = await jobDispatcher.jobResult;\n    this._workerSlots[index].jobDispatcher = undefined;\n    this._updateCounterForWorkerHash(job.workerHash, -1);\n\n    // 4. When worker encounters error, we stop it and create a new one.\n    //    We also do not keep the worker alive if it cannot serve any more jobs.\n    if (result.didFail)\n      void worker.stop(true /* didFail */);\n    else if (this._isWorkerRedundant(worker))\n      void worker.stop();\n\n    // 5. Possibly schedule a new job with leftover tests and/or retries.\n    if (!this._isStopped && result.newJob) {\n      this._queue.unshift(result.newJob);\n      this._updateCounterForWorkerHash(job.workerHash, +1);\n    }\n  }\n\n  private _checkFinished() {\n    if (this._finished.isDone())\n      return;\n\n    // Check that we have no more work to do.\n    if (this._queue.length && !this._isStopped)\n      return;\n\n    // Make sure all workers have finished the current job.\n    if (this._workerSlots.some(w => w.busy))\n      return;\n\n    this._finished.resolve();\n  }\n\n  private _isWorkerRedundant(worker: WorkerHost) {\n    let workersWithSameHash = 0;\n    for (const slot of this._workerSlots) {\n      if (slot.worker && !slot.worker.didSendStop() && slot.worker.hash() === worker.hash())\n        workersWithSameHash++;\n    }\n    return workersWithSameHash > this._queuedOrRunningHashCount.get(worker.hash())!;\n  }\n\n  private _updateCounterForWorkerHash(hash: string, delta: number) {\n    this._queuedOrRunningHashCount.set(hash, delta + (this._queuedOrRunningHashCount.get(hash) || 0));\n  }\n\n  async run(testGroups: TestGroup[], extraEnvByProjectId: EnvByProjectId) {\n    this._extraEnvByProjectId = extraEnvByProjectId;\n    this._queue = testGroups;\n    for (const group of testGroups)\n      this._updateCounterForWorkerHash(group.workerHash, +1);\n    this._isStopped = false;\n    this._workerSlots = [];\n    // 0. Stop right away if we have reached max failures.\n    if (this._failureTracker.hasReachedMaxFailures())\n      void this.stop();\n    // 1. Allocate workers.\n    for (let i = 0; i < this._config.config.workers; i++)\n      this._workerSlots.push({ busy: false });\n    // 2. Schedule enough jobs.\n    for (let i = 0; i < this._workerSlots.length; i++)\n      void this._scheduleJob();\n    this._checkFinished();\n    // 3. More jobs are scheduled when the worker becomes free.\n    // 4. Wait for all jobs to finish.\n    await this._finished;\n  }\n\n  _createWorker(testGroup: TestGroup, parallelIndex: number, loaderData: SerializedConfig) {\n    const projectConfig = this._config.projects.find(p => p.id === testGroup.projectId)!;\n    const outputDir = projectConfig.project.outputDir;\n    const worker = new WorkerHost(testGroup, parallelIndex, loaderData, this._extraEnvByProjectId.get(testGroup.projectId) || {}, outputDir);\n    const handleOutput = (params: TestOutputPayload) => {\n      const chunk = chunkFromParams(params);\n      if (worker.didFail()) {\n        // Note: we keep reading stdio from workers that are currently stopping after failure,\n        // to debug teardown issues. However, we avoid spoiling the test result from\n        // the next retry.\n        return { chunk };\n      }\n      const currentlyRunning = this._workerSlots[parallelIndex].jobDispatcher?.currentlyRunning();\n      if (!currentlyRunning)\n        return { chunk };\n      return { chunk, test: currentlyRunning.test, result: currentlyRunning.result };\n    };\n    worker.on('stdOut', (params: TestOutputPayload) => {\n      const { chunk, test, result } = handleOutput(params);\n      result?.stdout.push(chunk);\n      this._reporter.onStdOut(chunk, test, result);\n    });\n    worker.on('stdErr', (params: TestOutputPayload) => {\n      const { chunk, test, result } = handleOutput(params);\n      result?.stderr.push(chunk);\n      this._reporter.onStdErr(chunk, test, result);\n    });\n    worker.on('teardownErrors', (params: TeardownErrorsPayload) => {\n      this._failureTracker.onWorkerError();\n      for (const error of params.fatalErrors)\n        this._reporter.onError(error);\n    });\n    worker.on('exit', () => {\n      const producedEnv = this._producedEnvByProjectId.get(testGroup.projectId) || {};\n      this._producedEnvByProjectId.set(testGroup.projectId, { ...producedEnv, ...worker.producedEnv() });\n    });\n    return worker;\n  }\n\n  producedEnvByProjectId() {\n    return this._producedEnvByProjectId;\n  }\n\n  async stop() {\n    if (this._isStopped)\n      return;\n    this._isStopped = true;\n    await Promise.all(this._workerSlots.map(({ worker }) => worker?.stop()));\n    this._checkFinished();\n  }\n}\n\nclass JobDispatcher {\n  jobResult = new ManualPromise<{ newJob?: TestGroup, didFail: boolean }>();\n\n  private _listeners: RegisteredListener[] = [];\n  private _failedTests = new Set<TestCase>();\n  private _failedWithNonRetriableError = new Set<TestCase|Suite>();\n  private _remainingByTestId = new Map<string, TestCase>();\n  private _dataByTestId = new Map<string, { test: TestCase, result: TestResult, steps: Map<string, TestStep> }>();\n  private _parallelIndex = 0;\n  private _workerIndex = 0;\n  private _currentlyRunning: { test: TestCase, result: TestResult } | undefined;\n\n  constructor(private _job: TestGroup, private _reporter: ReporterV2, private _failureTracker: FailureTracker, private _stopCallback: () => void) {\n    this._remainingByTestId = new Map(this._job.tests.map(e => [e.id, e]));\n  }\n\n  private _onTestBegin(params: TestBeginPayload) {\n    const test = this._remainingByTestId.get(params.testId);\n    if (!test) {\n      // TODO: this should never be the case, report an internal error?\n      return;\n    }\n    const result = test._appendTestResult();\n    this._dataByTestId.set(test.id, { test, result, steps: new Map() });\n    result.parallelIndex = this._parallelIndex;\n    result.workerIndex = this._workerIndex;\n    result.startTime = new Date(params.startWallTime);\n    this._reporter.onTestBegin(test, result);\n    this._currentlyRunning = { test, result };\n  }\n\n  private _onTestEnd(params: TestEndPayload) {\n    if (this._failureTracker.hasReachedMaxFailures()) {\n      // Do not show more than one error to avoid confusion, but report\n      // as interrupted to indicate that we did actually start the test.\n      params.status = 'interrupted';\n      params.errors = [];\n    }\n    const data = this._dataByTestId.get(params.testId);\n    if (!data) {\n      // TODO: this should never be the case, report an internal error?\n      return;\n    }\n    this._dataByTestId.delete(params.testId);\n    this._remainingByTestId.delete(params.testId);\n    const { result, test } = data;\n    result.duration = params.duration;\n    result.errors = params.errors;\n    result.error = result.errors[0];\n    result.status = params.status;\n    test.expectedStatus = params.expectedStatus;\n    test.annotations = params.annotations;\n    test.timeout = params.timeout;\n    const isFailure = result.status !== 'skipped' && result.status !== test.expectedStatus;\n    if (isFailure)\n      this._failedTests.add(test);\n    if (params.hasNonRetriableError)\n      this._addNonretriableTestAndSerialModeParents(test);\n    this._reportTestEnd(test, result);\n    this._currentlyRunning = undefined;\n  }\n\n  private _addNonretriableTestAndSerialModeParents(test: TestCase) {\n    this._failedWithNonRetriableError.add(test);\n    for (let parent: Suite | undefined = test.parent; parent; parent = parent.parent) {\n      if (parent._parallelMode === 'serial')\n        this._failedWithNonRetriableError.add(parent);\n    }\n  }\n\n  private _onStepBegin(params: StepBeginPayload) {\n    const data = this._dataByTestId.get(params.testId);\n    if (!data) {\n      // The test has finished, but steps are still coming. Just ignore them.\n      return;\n    }\n    const { result, steps, test } = data;\n    const parentStep = params.parentStepId ? steps.get(params.parentStepId) : undefined;\n    const step: TestStep = {\n      title: params.title,\n      titlePath: () => {\n        const parentPath = parentStep?.titlePath() || [];\n        return [...parentPath, params.title];\n      },\n      parent: parentStep,\n      category: params.category,\n      startTime: new Date(params.wallTime),\n      duration: -1,\n      steps: [],\n      location: params.location,\n    };\n    steps.set(params.stepId, step);\n    (parentStep || result).steps.push(step);\n    this._reporter.onStepBegin(test, result, step);\n  }\n\n  private _onStepEnd(params: StepEndPayload) {\n    const data = this._dataByTestId.get(params.testId);\n    if (!data) {\n      // The test has finished, but steps are still coming. Just ignore them.\n      return;\n    }\n    const { result, steps, test } = data;\n    const step = steps.get(params.stepId);\n    if (!step) {\n      this._reporter.onStdErr('Internal error: step end without step begin: ' + params.stepId, test, result);\n      return;\n    }\n    step.duration = params.wallTime - step.startTime.getTime();\n    if (params.error)\n      step.error = params.error;\n    steps.delete(params.stepId);\n    this._reporter.onStepEnd(test, result, step);\n  }\n\n  private _onAttach(params: AttachmentPayload) {\n    const data = this._dataByTestId.get(params.testId)!;\n    if (!data) {\n      // The test has finished, but attachments are still coming. Just ignore them.\n      return;\n    }\n    const attachment = {\n      name: params.name,\n      path: params.path,\n      contentType: params.contentType,\n      body: params.body !== undefined ? Buffer.from(params.body, 'base64') : undefined\n    };\n    data.result.attachments.push(attachment);\n  }\n\n  private _failTestWithErrors(test: TestCase, errors: TestError[]) {\n    const runData = this._dataByTestId.get(test.id);\n    // There might be a single test that has started but has not finished yet.\n    let result: TestResult;\n    if (runData) {\n      result = runData.result;\n    } else {\n      result = test._appendTestResult();\n      this._reporter.onTestBegin(test, result);\n    }\n    result.errors = [...errors];\n    result.error = result.errors[0];\n    result.status = errors.length ? 'failed' : 'skipped';\n    this._reportTestEnd(test, result);\n    this._failedTests.add(test);\n  }\n\n  private _massSkipTestsFromRemaining(testIds: Set<string>, errors: TestError[]) {\n    for (const test of this._remainingByTestId.values()) {\n      if (!testIds.has(test.id))\n        continue;\n      if (!this._failureTracker.hasReachedMaxFailures()) {\n        this._failTestWithErrors(test, errors);\n        errors = []; // Only report errors for the first test.\n      }\n      this._remainingByTestId.delete(test.id);\n    }\n    if (errors.length) {\n      // We had fatal errors after all tests have passed - most likely in some teardown.\n      // Let's just fail the test run.\n      this._failureTracker.onWorkerError();\n      for (const error of errors)\n        this._reporter.onError(error);\n    }\n  }\n\n  private _onDone(params: DonePayload & { unexpectedExitError?: TestError }) {\n    // We won't file remaining if:\n    // - there are no remaining\n    // - we are here not because something failed\n    // - no unrecoverable worker error\n    if (!this._remainingByTestId.size && !this._failedTests.size && !params.fatalErrors.length && !params.skipTestsDueToSetupFailure.length && !params.fatalUnknownTestIds && !params.unexpectedExitError) {\n      this._finished({ didFail: false });\n      return;\n    }\n\n    for (const testId of params.fatalUnknownTestIds || []) {\n      const test = this._remainingByTestId.get(testId);\n      if (test) {\n        this._remainingByTestId.delete(testId);\n        this._failTestWithErrors(test, [{ message: `Test not found in the worker process. Make sure test title does not change.` }]);\n      }\n    }\n\n    if (params.fatalErrors.length) {\n      // In case of fatal errors, report first remaining test as failing with these errors,\n      // and all others as skipped.\n      this._massSkipTestsFromRemaining(new Set(this._remainingByTestId.keys()), params.fatalErrors);\n    }\n    // Handle tests that should be skipped because of the setup failure.\n    this._massSkipTestsFromRemaining(new Set(params.skipTestsDueToSetupFailure), []);\n\n    if (params.unexpectedExitError) {\n      // When worker exits during a test, we blame the test itself.\n      //\n      // The most common situation when worker exits while not running a test is:\n      //   worker failed to require the test file (at the start) because of an exception in one of imports.\n      // In this case, \"skip\" all remaining tests, to avoid running into the same exception over and over.\n      if (this._currentlyRunning)\n        this._massSkipTestsFromRemaining(new Set([this._currentlyRunning.test.id]), [params.unexpectedExitError]);\n      else\n        this._massSkipTestsFromRemaining(new Set(this._remainingByTestId.keys()), [params.unexpectedExitError]);\n    }\n\n    const retryCandidates = new Set<TestCase>();\n    const serialSuitesWithFailures = new Set<Suite>();\n\n    for (const failedTest of this._failedTests) {\n      if (this._failedWithNonRetriableError.has(failedTest))\n        continue;\n      retryCandidates.add(failedTest);\n\n      let outermostSerialSuite: Suite | undefined;\n      for (let parent: Suite | undefined = failedTest.parent; parent; parent = parent.parent) {\n        if (parent._parallelMode ===  'serial')\n          outermostSerialSuite = parent;\n      }\n      if (outermostSerialSuite && !this._failedWithNonRetriableError.has(outermostSerialSuite))\n        serialSuitesWithFailures.add(outermostSerialSuite);\n    }\n\n    // If we have failed tests that belong to a serial suite,\n    // we should skip all future tests from the same serial suite.\n    const testsBelongingToSomeSerialSuiteWithFailures = [...this._remainingByTestId.values()].filter(test => {\n      let parent: Suite | undefined = test.parent;\n      while (parent && !serialSuitesWithFailures.has(parent))\n        parent = parent.parent;\n      return !!parent;\n    });\n    this._massSkipTestsFromRemaining(new Set(testsBelongingToSomeSerialSuiteWithFailures.map(test => test.id)), []);\n\n    for (const serialSuite of serialSuitesWithFailures) {\n      // Add all tests from failed serial suites for possible retry.\n      // These will only be retried together, because they have the same\n      // \"retries\" setting and the same number of previous runs.\n      serialSuite.allTests().forEach(test => retryCandidates.add(test));\n    }\n\n    const remaining = [...this._remainingByTestId.values()];\n    for (const test of retryCandidates) {\n      if (test.results.length < test.retries + 1)\n        remaining.push(test);\n    }\n\n    // This job is over, we will schedule another one.\n    const newJob = remaining.length ? { ...this._job, tests: remaining } : undefined;\n    this._finished({ didFail: true, newJob });\n  }\n\n  onExit(data: ProcessExitData) {\n    const unexpectedExitError: TestError | undefined = data.unexpectedly ? {\n      message: `Error: worker process exited unexpectedly (code=${data.code}, signal=${data.signal})`\n    } : undefined;\n    this._onDone({ skipTestsDueToSetupFailure: [], fatalErrors: [], unexpectedExitError });\n  }\n\n  private _finished(result: { newJob?: TestGroup, didFail: boolean }) {\n    eventsHelper.removeEventListeners(this._listeners);\n    this.jobResult.resolve(result);\n  }\n\n  runInWorker(worker: WorkerHost) {\n    this._parallelIndex = worker.parallelIndex;\n    this._workerIndex = worker.workerIndex;\n\n    const runPayload: RunPayload = {\n      file: this._job.requireFile,\n      entries: this._job.tests.map(test => {\n        return { testId: test.id, retry: test.results.length };\n      }),\n    };\n    worker.runTestGroup(runPayload);\n\n    this._listeners = [\n      eventsHelper.addEventListener(worker, 'testBegin', this._onTestBegin.bind(this)),\n      eventsHelper.addEventListener(worker, 'testEnd', this._onTestEnd.bind(this)),\n      eventsHelper.addEventListener(worker, 'stepBegin', this._onStepBegin.bind(this)),\n      eventsHelper.addEventListener(worker, 'stepEnd', this._onStepEnd.bind(this)),\n      eventsHelper.addEventListener(worker, 'attach', this._onAttach.bind(this)),\n      eventsHelper.addEventListener(worker, 'done', this._onDone.bind(this)),\n      eventsHelper.addEventListener(worker, 'exit', this.onExit.bind(this)),\n    ];\n  }\n\n  skipWholeJob(): boolean {\n    // If all the tests in a group are skipped, we report them immediately\n    // without sending anything to a worker. This avoids creating unnecessary worker processes.\n    //\n    // However, if there is at least one non-skipped test in a group, we'll send\n    // the whole group to the worker process and report tests in the natural order,\n    // with skipped tests mixed in-between non-skipped. This makes\n    // for a better reporter experience.\n    const allTestsSkipped = this._job.tests.every(test => test.expectedStatus === 'skipped');\n    if (allTestsSkipped && !this._failureTracker.hasReachedMaxFailures()) {\n      for (const test of this._job.tests) {\n        const result = test._appendTestResult();\n        this._reporter.onTestBegin(test, result);\n        result.status = 'skipped';\n        this._reportTestEnd(test, result);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  currentlyRunning() {\n    return this._currentlyRunning;\n  }\n\n  private _reportTestEnd(test: TestCase, result: TestResult) {\n    this._reporter.onTestEnd(test, result);\n    const hadMaxFailures = this._failureTracker.hasReachedMaxFailures();\n    this._failureTracker.onTestEnd(test, result);\n    if (this._failureTracker.hasReachedMaxFailures()) {\n      this._stopCallback();\n      if (!hadMaxFailures)\n        this._reporter.onError({ message: colors.red(`Testing stopped early after ${this._failureTracker.maxFailures()} maximum allowed failures.`) });\n    }\n  }\n}\n\nfunction chunkFromParams(params: TestOutputPayload): string | Buffer {\n  if (typeof params.text === 'string')\n    return params.text;\n  return Buffer.from(params.buffer!, 'base64');\n}\n"],"mappings":"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"}