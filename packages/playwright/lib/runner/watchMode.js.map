{"version":3,"file":"watchMode.js","names":["_readline","_interopRequireDefault","require","_path","_utils","_utilsBundle","_utilsBundle2","_base","_playwrightServer","_testServer","_stream","_testServerConnection","_teleSuiteUpdater","_configLoader","obj","__esModule","default","InMemoryTransport","EventEmitter","constructor","send","_send","close","emit","onclose","listener","on","onerror","onmessage","onopen","data","runWatchModeLoop","configLocation","initialOptions","restartWithExperimentalTsEsm","undefined","options","testServerDispatcher","TestServerDispatcher","transport","id","method","params","JSON","parse","result","dispatch","stringify","e","error","String","sendEvent","testServerConnection","TestServerConnection","teleSuiteUpdater","TeleSuiteUpdater","pathSeparator","path","sep","onUpdate","dirtyTestIds","Set","onDirtyTests","ManualPromise","queue","Promise","resolve","changedFiles","onTestFilesChanged","testFiles","forEach","file","add","then","_onDirtyTests$resolve","_onDirtyTests","size","report","listTests","locations","files","projects","grep","processListReport","test","rootSuite","allTests","has","location","clear","call","onReport","processTestReportEvent","initialize","interceptStdio","watchTestDirs","runGlobalSetup","lastRun","type","runTests","printPrompt","readCommandPromise","readCommand","race","isDone","command","testIds","title","selectedProjects","enquirer","prompt","name","message","choices","suites","map","s","catch","length","filePattern","trim","split","testPattern","failedTestIds","filter","t","ok","toggleShowBrowser","teardown","runGlobalTeardown","status","watchOptions","printConfiguration","connectWsEndpoint","reuseContext","workers","headed","rl","readline","createInterface","input","process","stdin","escapeCodeTimeout","emitKeypressEvents","isTTY","setRawMode","handler","text","key","ctrl","platform","kill","ppid","pid","stdout","write","separator","colors","bold","dim","finally","off","showBrowserServer","seq","packageManagerCommand","getPackageManagerExecCommand","tokens","push","p","blue","red","a","lines","join","PlaywrightServer","mode","createGuid","maxConnections","listen","_showBrowserServer"],"sources":["../../src/runner/watchMode.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport readline from 'readline';\nimport path from 'path';\nimport { createGuid, getPackageManagerExecCommand, ManualPromise } from 'playwright-core/lib/utils';\nimport type { ConfigLocation } from '../common/config';\nimport type { FullResult } from '../../types/testReporter';\nimport { colors } from 'playwright-core/lib/utilsBundle';\nimport { enquirer } from '../utilsBundle';\nimport { separator } from '../reporters/base';\nimport { PlaywrightServer } from 'playwright-core/lib/remote/playwrightServer';\nimport { TestServerDispatcher } from './testServer';\nimport { EventEmitter } from 'stream';\nimport { type TestServerTransport, TestServerConnection } from '../isomorphic/testServerConnection';\nimport { TeleSuiteUpdater } from '../isomorphic/teleSuiteUpdater';\nimport { restartWithExperimentalTsEsm } from '../common/configLoader';\n\nclass InMemoryTransport extends EventEmitter implements TestServerTransport {\n  public readonly _send: (data: string) => void;\n\n  constructor(send: (data: any) => void) {\n    super();\n    this._send = send;\n  }\n\n  close() {\n    this.emit('close');\n  }\n\n  onclose(listener: () => void): void {\n    this.on('close', listener);\n  }\n\n  onerror(listener: () => void): void {\n    // no-op to fulfil the interface, the user of InMemoryTransport doesn't emit any errors.\n  }\n\n  onmessage(listener: (message: string) => void): void {\n    this.on('message', listener);\n  }\n\n  onopen(listener: () => void): void {\n    this.on('open', listener);\n  }\n\n  send(data: string): void {\n    this._send(data);\n  }\n}\n\ninterface WatchModeOptions {\n  files?: string[];\n  projects?: string[];\n  grep?: string;\n}\n\nexport async function runWatchModeLoop(configLocation: ConfigLocation, initialOptions: WatchModeOptions): Promise<FullResult['status'] | 'restarted'> {\n  if (restartWithExperimentalTsEsm(undefined, true))\n    return 'restarted';\n\n  const options: WatchModeOptions = { ...initialOptions };\n\n  const testServerDispatcher = new TestServerDispatcher(configLocation);\n  const transport = new InMemoryTransport(\n      async data => {\n        const { id, method, params } = JSON.parse(data);\n        try {\n          const result = await testServerDispatcher.transport.dispatch(method, params);\n          transport.emit('message', JSON.stringify({ id, result }));\n        } catch (e) {\n          transport.emit('message', JSON.stringify({ id, error: String(e) }));\n        }\n      }\n  );\n  testServerDispatcher.transport.sendEvent = (method, params) => {\n    transport.emit('message', JSON.stringify({ method, params }));\n  };\n  const testServerConnection = new TestServerConnection(transport);\n  transport.emit('open');\n\n  const teleSuiteUpdater = new TeleSuiteUpdater({ pathSeparator: path.sep, onUpdate() { } });\n\n  const dirtyTestIds = new Set<string>();\n  let onDirtyTests = new ManualPromise();\n\n  let queue = Promise.resolve();\n  const changedFiles = new Set<string>();\n  testServerConnection.onTestFilesChanged(({ testFiles }) => {\n    testFiles.forEach(file => changedFiles.add(file));\n\n    queue = queue.then(async () => {\n      if (changedFiles.size === 0)\n        return;\n\n      const { report } = await testServerConnection.listTests({ locations: options.files, projects: options.projects, grep: options.grep });\n      teleSuiteUpdater.processListReport(report);\n\n      for (const test of teleSuiteUpdater.rootSuite!.allTests()) {\n        if (changedFiles.has(test.location.file))\n          dirtyTestIds.add(test.id);\n      }\n\n      changedFiles.clear();\n\n      if (dirtyTestIds.size > 0)\n        onDirtyTests.resolve?.();\n    });\n  });\n  testServerConnection.onReport(report => teleSuiteUpdater.processTestReportEvent(report));\n\n  await testServerConnection.initialize({ interceptStdio: false, watchTestDirs: true });\n  await testServerConnection.runGlobalSetup({});\n\n  const { report } = await testServerConnection.listTests({ locations: options.files, projects: options.projects, grep: options.grep });\n  teleSuiteUpdater.processListReport(report);\n\n  let lastRun: { type: 'changed' | 'regular' | 'failed', failedTestIds?: string[], dirtyTestIds?: string[] } = { type: 'regular' };\n  let result: FullResult['status'] = 'passed';\n\n  // Enter the watch loop.\n  await runTests(options, testServerConnection);\n\n  while (true) {\n    printPrompt();\n    const readCommandPromise = readCommand();\n    await Promise.race([\n      onDirtyTests,\n      readCommandPromise,\n    ]);\n    if (!readCommandPromise.isDone())\n      readCommandPromise.resolve('changed');\n\n    const command = await readCommandPromise;\n\n    if (command === 'changed') {\n      onDirtyTests = new ManualPromise();\n      const testIds = [...dirtyTestIds];\n      dirtyTestIds.clear();\n      await runTests(options, testServerConnection, { testIds, title: 'files changed' });\n      lastRun = { type: 'changed', dirtyTestIds: testIds };\n      continue;\n    }\n\n    if (command === 'run') {\n      // All means reset filters.\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'project') {\n      const { selectedProjects } = await enquirer.prompt<{ selectedProjects: string[] }>({\n        type: 'multiselect',\n        name: 'selectedProjects',\n        message: 'Select projects',\n        choices: teleSuiteUpdater.rootSuite!.suites.map(s => s.title),\n      }).catch(() => ({ selectedProjects: null }));\n      if (!selectedProjects)\n        continue;\n      options.projects = selectedProjects.length ? selectedProjects : undefined;\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'file') {\n      const { filePattern } = await enquirer.prompt<{ filePattern: string }>({\n        type: 'text',\n        name: 'filePattern',\n        message: 'Input filename pattern (regex)',\n      }).catch(() => ({ filePattern: null }));\n      if (filePattern === null)\n        continue;\n      if (filePattern.trim())\n        options.files = filePattern.split(' ');\n      else\n        options.files = undefined;\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'grep') {\n      const { testPattern } = await enquirer.prompt<{ testPattern: string }>({\n        type: 'text',\n        name: 'testPattern',\n        message: 'Input test name pattern (regex)',\n      }).catch(() => ({ testPattern: null }));\n      if (testPattern === null)\n        continue;\n      if (testPattern.trim())\n        options.grep = testPattern;\n      else\n        options.grep = undefined;\n      await runTests(options, testServerConnection);\n      lastRun = { type: 'regular' };\n      continue;\n    }\n\n    if (command === 'failed') {\n      const failedTestIds = teleSuiteUpdater.rootSuite!.allTests().filter(t => !t.ok()).map(t => t.id);\n      await runTests({}, testServerConnection, { title: 'running failed tests', testIds: failedTestIds });\n      lastRun = { type: 'failed', failedTestIds };\n      continue;\n    }\n\n    if (command === 'repeat') {\n      if (lastRun.type === 'regular') {\n        await runTests(options, testServerConnection, { title: 're-running tests' });\n        continue;\n      } else if (lastRun.type === 'changed') {\n        await runTests(options, testServerConnection, { title: 're-running tests', testIds: lastRun.dirtyTestIds });\n      } else if (lastRun.type === 'failed') {\n        await runTests({}, testServerConnection, { title: 're-running tests', testIds: lastRun.failedTestIds });\n      }\n      continue;\n    }\n\n    if (command === 'toggle-show-browser') {\n      await toggleShowBrowser();\n      continue;\n    }\n\n    if (command === 'exit')\n      break;\n\n    if (command === 'interrupted') {\n      result = 'interrupted';\n      break;\n    }\n  }\n\n  const teardown = await testServerConnection.runGlobalTeardown({});\n\n  return result === 'passed' ? teardown.status : result;\n}\n\nasync function runTests(watchOptions: WatchModeOptions, testServerConnection: TestServerConnection, options?: {\n    title?: string,\n    testIds?: string[],\n  }) {\n  printConfiguration(watchOptions, options?.title);\n\n  await testServerConnection.runTests({\n    grep: watchOptions.grep,\n    testIds: options?.testIds,\n    locations: watchOptions?.files,\n    projects: watchOptions.projects,\n    connectWsEndpoint,\n    reuseContext: connectWsEndpoint ? true : undefined,\n    workers: connectWsEndpoint ? 1 : undefined,\n    headed: connectWsEndpoint ? true : undefined,\n  });\n}\n\nfunction readCommand(): ManualPromise<Command> {\n  const result = new ManualPromise<Command>();\n  const rl = readline.createInterface({ input: process.stdin, escapeCodeTimeout: 50 });\n  readline.emitKeypressEvents(process.stdin, rl);\n  if (process.stdin.isTTY)\n    process.stdin.setRawMode(true);\n\n  const handler = (text: string, key: any) => {\n    if (text === '\\x03' || text === '\\x1B' || (key && key.name === 'escape') || (key && key.ctrl && key.name === 'c')) {\n      result.resolve('interrupted');\n      return;\n    }\n    if (process.platform !== 'win32' && key && key.ctrl && key.name === 'z') {\n      process.kill(process.ppid, 'SIGTSTP');\n      process.kill(process.pid, 'SIGTSTP');\n    }\n    const name = key?.name;\n    if (name === 'q') {\n      result.resolve('exit');\n      return;\n    }\n    if (name === 'h') {\n      process.stdout.write(`${separator()}\nRun tests\n  ${colors.bold('enter')}    ${colors.dim('run tests')}\n  ${colors.bold('f')}        ${colors.dim('run failed tests')}\n  ${colors.bold('r')}        ${colors.dim('repeat last run')}\n  ${colors.bold('q')}        ${colors.dim('quit')}\n\nChange settings\n  ${colors.bold('c')}        ${colors.dim('set project')}\n  ${colors.bold('p')}        ${colors.dim('set file filter')}\n  ${colors.bold('t')}        ${colors.dim('set title filter')}\n  ${colors.bold('s')}        ${colors.dim('toggle show & reuse the browser')}\n`);\n      return;\n    }\n\n    switch (name) {\n      case 'return': result.resolve('run'); break;\n      case 'r': result.resolve('repeat'); break;\n      case 'c': result.resolve('project'); break;\n      case 'p': result.resolve('file'); break;\n      case 't': result.resolve('grep'); break;\n      case 'f': result.resolve('failed'); break;\n      case 's': result.resolve('toggle-show-browser'); break;\n    }\n  };\n\n  process.stdin.on('keypress', handler);\n  void result.finally(() => {\n    process.stdin.off('keypress', handler);\n    rl.close();\n    if (process.stdin.isTTY)\n      process.stdin.setRawMode(false);\n  });\n  return result;\n}\n\nlet showBrowserServer: PlaywrightServer | undefined;\nlet connectWsEndpoint: string | undefined = undefined;\nlet seq = 0;\n\nfunction printConfiguration(options: WatchModeOptions, title?: string) {\n  const packageManagerCommand = getPackageManagerExecCommand();\n  const tokens: string[] = [];\n  tokens.push(`${packageManagerCommand} playwright test`);\n  if (options.projects)\n    tokens.push(...options.projects.map(p => colors.blue(`--project ${p}`)));\n  if (options.grep)\n    tokens.push(colors.red(`--grep ${options.grep}`));\n  if (options.files)\n    tokens.push(...options.files.map(a => colors.bold(a)));\n  if (title)\n    tokens.push(colors.dim(`(${title})`));\n  if (seq)\n    tokens.push(colors.dim(`#${seq}`));\n  ++seq;\n  const lines: string[] = [];\n  const sep = separator();\n  lines.push('\\x1Bc' + sep);\n  lines.push(`${tokens.join(' ')}`);\n  lines.push(`${colors.dim('Show & reuse browser:')} ${colors.bold(showBrowserServer ? 'on' : 'off')}`);\n  process.stdout.write(lines.join('\\n'));\n}\n\nfunction printPrompt() {\n  const sep = separator();\n  process.stdout.write(`\n${sep}\n${colors.dim('Waiting for file changes. Press')} ${colors.bold('enter')} ${colors.dim('to run tests')}, ${colors.bold('q')} ${colors.dim('to quit or')} ${colors.bold('h')} ${colors.dim('for more options.')}\n`);\n}\n\nasync function toggleShowBrowser() {\n  if (!showBrowserServer) {\n    showBrowserServer = new PlaywrightServer({ mode: 'extension', path: '/' + createGuid(), maxConnections: 1 });\n    connectWsEndpoint = await showBrowserServer.listen();\n    process.stdout.write(`${colors.dim('Show & reuse browser:')} ${colors.bold('on')}\\n`);\n  } else {\n    await showBrowserServer?.close();\n    showBrowserServer = undefined;\n    connectWsEndpoint = undefined;\n    process.stdout.write(`${colors.dim('Show & reuse browser:')} ${colors.bold('off')}\\n`);\n  }\n}\n\ntype Command = 'run' | 'failed' | 'repeat' | 'changed' | 'project' | 'file' | 'grep' | 'exit' | 'interrupted' | 'toggle-show-browser';\n"],"mappings":"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"}