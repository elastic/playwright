{"version":3,"file":"testGroups.js","names":["createTestGroups","projectSuite","workers","groups","Map","createGroup","test","workerHash","_workerHash","requireFile","_requireFile","repeatEachIndex","projectId","_projectId","tests","allTests","withWorkerHash","get","set","withRequireFile","general","parallel","parallelWithHooks","insideParallel","outerMostSequentialSuite","hasAllHooks","parent","_parallelMode","_hooks","some","hook","type","push","key","group","result","values","length","parallelWithHooksGroupSize","Math","ceil","lastGroup","filterForShard","shard","testGroups","shardableTotal","shardSize","floor","total","extraOne","currentShard","current","from","min","to","Set","add"],"sources":["../../src/runner/testGroups.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Suite, TestCase } from '../common/test';\n\nexport type TestGroup = {\n  workerHash: string;\n  requireFile: string;\n  repeatEachIndex: number;\n  projectId: string;\n  tests: TestCase[];\n};\n\nexport function createTestGroups(projectSuite: Suite, workers: number): TestGroup[] {\n  // This function groups tests that can be run together.\n  // Tests cannot be run together when:\n  // - They belong to different projects - requires different workers.\n  // - They have a different repeatEachIndex - requires different workers.\n  // - They have a different set of worker fixtures in the pool - requires different workers.\n  // - They have a different requireFile - reuses the worker, but runs each requireFile separately.\n  // - They belong to a parallel suite.\n\n  // Using the map \"workerHash -> requireFile -> group\" makes us preserve the natural order\n  // of worker hashes and require files for the simple cases.\n  const groups = new Map<string, Map<string, {\n    // Tests that must be run in order are in the same group.\n    general: TestGroup,\n\n    // There are 3 kinds of parallel tests:\n    // - Tests belonging to parallel suites, without beforeAll/afterAll hooks.\n    //   These can be run independently, they are put into their own group, key === test.\n    // - Tests belonging to parallel suites, with beforeAll/afterAll hooks.\n    //   These should share the worker as much as possible, put into single parallelWithHooks group.\n    //   We'll divide them into equally-sized groups later.\n    // - Tests belonging to serial suites inside parallel suites.\n    //   These should run as a serial group, each group is independent, key === serial suite.\n    parallel: Map<Suite | TestCase, TestGroup>,\n    parallelWithHooks: TestGroup,\n  }>>();\n\n  const createGroup = (test: TestCase): TestGroup => {\n    return {\n      workerHash: test._workerHash,\n      requireFile: test._requireFile,\n      repeatEachIndex: test.repeatEachIndex,\n      projectId: test._projectId,\n      tests: [],\n    };\n  };\n\n  for (const test of projectSuite.allTests()) {\n    let withWorkerHash = groups.get(test._workerHash);\n    if (!withWorkerHash) {\n      withWorkerHash = new Map();\n      groups.set(test._workerHash, withWorkerHash);\n    }\n    let withRequireFile = withWorkerHash.get(test._requireFile);\n    if (!withRequireFile) {\n      withRequireFile = {\n        general: createGroup(test),\n        parallel: new Map(),\n        parallelWithHooks: createGroup(test),\n      };\n      withWorkerHash.set(test._requireFile, withRequireFile);\n    }\n\n    // Note that a parallel suite cannot be inside a serial suite. This is enforced in TestType.\n    let insideParallel = false;\n    let outerMostSequentialSuite: Suite | undefined;\n    let hasAllHooks = false;\n    for (let parent: Suite | undefined = test.parent; parent; parent = parent.parent) {\n      if (parent._parallelMode === 'serial' || parent._parallelMode === 'default')\n        outerMostSequentialSuite = parent;\n      insideParallel = insideParallel || parent._parallelMode === 'parallel';\n      hasAllHooks = hasAllHooks || parent._hooks.some(hook => hook.type === 'beforeAll' || hook.type === 'afterAll');\n    }\n\n    if (insideParallel) {\n      if (hasAllHooks && !outerMostSequentialSuite) {\n        withRequireFile.parallelWithHooks.tests.push(test);\n      } else {\n        const key = outerMostSequentialSuite || test;\n        let group = withRequireFile.parallel.get(key);\n        if (!group) {\n          group = createGroup(test);\n          withRequireFile.parallel.set(key, group);\n        }\n        group.tests.push(test);\n      }\n    } else {\n      withRequireFile.general.tests.push(test);\n    }\n  }\n\n  const result: TestGroup[] = [];\n  for (const withWorkerHash of groups.values()) {\n    for (const withRequireFile of withWorkerHash.values()) {\n      // Tests without parallel mode should run serially as a single group.\n      if (withRequireFile.general.tests.length)\n        result.push(withRequireFile.general);\n\n      // Parallel test groups without beforeAll/afterAll can be run independently.\n      result.push(...withRequireFile.parallel.values());\n\n      // Tests with beforeAll/afterAll should try to share workers as much as possible.\n      const parallelWithHooksGroupSize = Math.ceil(withRequireFile.parallelWithHooks.tests.length / workers);\n      let lastGroup: TestGroup | undefined;\n      for (const test of withRequireFile.parallelWithHooks.tests) {\n        if (!lastGroup || lastGroup.tests.length >= parallelWithHooksGroupSize) {\n          lastGroup = createGroup(test);\n          result.push(lastGroup);\n        }\n        lastGroup.tests.push(test);\n      }\n    }\n  }\n  return result;\n}\n\nexport function filterForShard(shard: { total: number, current: number }, testGroups: TestGroup[]): Set<TestGroup> {\n  // Note that sharding works based on test groups.\n  // This means parallel files will be sharded by single tests,\n  // while non-parallel files will be sharded by the whole file.\n  //\n  // Shards are still balanced by the number of tests, not files,\n  // even in the case of non-paralleled files.\n\n  let shardableTotal = 0;\n  for (const group of testGroups)\n    shardableTotal += group.tests.length;\n\n  // Each shard gets some tests.\n  const shardSize = Math.floor(shardableTotal / shard.total);\n  // First few shards get one more test each.\n  const extraOne = shardableTotal - shardSize * shard.total;\n\n  const currentShard = shard.current - 1; // Make it zero-based for calculations.\n  const from = shardSize * currentShard + Math.min(extraOne, currentShard);\n  const to = from + shardSize + (currentShard < extraOne ? 1 : 0);\n\n  let current = 0;\n  const result = new Set<TestGroup>();\n  for (const group of testGroups) {\n    // Any test group goes to the shard that contains the first test of this group.\n    // So, this shard gets any group that starts at [from; to)\n    if (current >= from && current < to)\n      result.add(group);\n    current += group.tests.length;\n  }\n  return result;\n}\n"],"mappings":"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"}