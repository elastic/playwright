{"version":3,"file":"portTransport.js","names":["PortTransport","constructor","port","handler","_lastId","_port","_callbacks","Map","addEventListener","event","message","data","id","ackId","method","params","result","postMessage","callback","get","delete","_resetRef","send","Promise","f","set","size","ref","unref","exports"],"sources":["../../src/transform/portTransport.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class PortTransport {\n  private _lastId = 0;\n  private _port: MessagePort;\n  private _callbacks = new Map<number, (result: any) => void>();\n\n  constructor(port: MessagePort, handler: (method: string, params: any) => Promise<any>) {\n    this._port = port;\n    port.addEventListener('message', async event => {\n      const message = event.data;\n      const { id, ackId, method, params, result } = message;\n      if (id) {\n        const result = await handler(method, params);\n        this._port.postMessage({ ackId: id, result });\n        return;\n      }\n\n      if (ackId) {\n        const callback = this._callbacks.get(ackId);\n        this._callbacks.delete(ackId);\n        this._resetRef();\n        callback?.(result);\n        return;\n      }\n    });\n    // Make sure to unref **after** adding a 'message' event listener.\n    // https://nodejs.org/api/worker_threads.html#portref\n    this._resetRef();\n  }\n\n  async send(method: string, params: any) {\n    return await new Promise<any>(f => {\n      const id = ++this._lastId;\n      this._callbacks.set(id, f);\n      this._resetRef();\n      this._port.postMessage({ id, method, params });\n    });\n  }\n\n  private _resetRef() {\n    if (this._callbacks.size) {\n      // When we are waiting for a response, ref the port to prevent this process from exiting.\n      (this._port as any).ref();\n    } else {\n      // When we are not waiting for a response, unref the port to prevent this process\n      // from hanging forever.\n      (this._port as any).unref();\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMA,aAAa,CAAC;EAKzBC,WAAWA,CAACC,IAAiB,EAAEC,OAAsD,EAAE;IAAA,KAJ/EC,OAAO,GAAG,CAAC;IAAA,KACXC,KAAK;IAAA,KACLC,UAAU,GAAG,IAAIC,GAAG,CAAgC,CAAC;IAG3D,IAAI,CAACF,KAAK,GAAGH,IAAI;IACjBA,IAAI,CAACM,gBAAgB,CAAC,SAAS,EAAE,MAAMC,KAAK,IAAI;MAC9C,MAAMC,OAAO,GAAGD,KAAK,CAACE,IAAI;MAC1B,MAAM;QAAEC,EAAE;QAAEC,KAAK;QAAEC,MAAM;QAAEC,MAAM;QAAEC;MAAO,CAAC,GAAGN,OAAO;MACrD,IAAIE,EAAE,EAAE;QACN,MAAMI,MAAM,GAAG,MAAMb,OAAO,CAACW,MAAM,EAAEC,MAAM,CAAC;QAC5C,IAAI,CAACV,KAAK,CAACY,WAAW,CAAC;UAAEJ,KAAK,EAAED,EAAE;UAAEI;QAAO,CAAC,CAAC;QAC7C;MACF;MAEA,IAAIH,KAAK,EAAE;QACT,MAAMK,QAAQ,GAAG,IAAI,CAACZ,UAAU,CAACa,GAAG,CAACN,KAAK,CAAC;QAC3C,IAAI,CAACP,UAAU,CAACc,MAAM,CAACP,KAAK,CAAC;QAC7B,IAAI,CAACQ,SAAS,CAAC,CAAC;QAChBH,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAGF,MAAM,CAAC;QAClB;MACF;IACF,CAAC,CAAC;IACF;IACA;IACA,IAAI,CAACK,SAAS,CAAC,CAAC;EAClB;EAEA,MAAMC,IAAIA,CAACR,MAAc,EAAEC,MAAW,EAAE;IACtC,OAAO,MAAM,IAAIQ,OAAO,CAAMC,CAAC,IAAI;MACjC,MAAMZ,EAAE,GAAG,EAAE,IAAI,CAACR,OAAO;MACzB,IAAI,CAACE,UAAU,CAACmB,GAAG,CAACb,EAAE,EAAEY,CAAC,CAAC;MAC1B,IAAI,CAACH,SAAS,CAAC,CAAC;MAChB,IAAI,CAAChB,KAAK,CAACY,WAAW,CAAC;QAAEL,EAAE;QAAEE,MAAM;QAAEC;MAAO,CAAC,CAAC;IAChD,CAAC,CAAC;EACJ;EAEQM,SAASA,CAAA,EAAG;IAClB,IAAI,IAAI,CAACf,UAAU,CAACoB,IAAI,EAAE;MACxB;MACC,IAAI,CAACrB,KAAK,CAASsB,GAAG,CAAC,CAAC;IAC3B,CAAC,MAAM;MACL;MACA;MACC,IAAI,CAACtB,KAAK,CAASuB,KAAK,CAAC,CAAC;IAC7B;EACF;AACF;AAACC,OAAA,CAAA7B,aAAA,GAAAA,aAAA"}