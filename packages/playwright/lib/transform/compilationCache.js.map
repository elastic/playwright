{"version":3,"file":"compilationCache.js","names":["_fs","_interopRequireDefault","require","_os","_path","_utilsBundle","_globals","obj","__esModule","default","cacheDir","exports","process","env","PWTEST_CACHE_DIR","_process$geteuid","_process","platform","path","join","os","tmpdir","geteuid","call","sourceMaps","Map","memoryCache","fileDependencies","externalDependencies","installSourceMapSupport","Error","stackTraceLimit","sourceMapSupport","install","environment","handleUncaughtExceptions","retrieveSourceMap","source","has","sourceMapPath","get","map","JSON","parse","fs","readFileSync","url","_innerAddToCompilationCacheAndSerialize","filename","entry","set","moduleUrl","getFromCompilationCache","hash","cache","codePath","cachedCode","cachePath","calculateCachePath","dataPath","serializedCache","addToCache","code","data","isWorkerProcess","mkdirSync","dirname","recursive","writeFileSync","stringify","size","Object","fromEntries","entries","undefined","serializeCompilationCache","deps","addToCompilationCache","payload","existing","Set","filePath","fileName","basename","extname","replace","depsCollector","startCollectingFileDeps","stopCollectingFileDeps","delete","dep","belongsToNodeModules","currentFileDepsCollector","setExternalDependencies","depsSet","filter","fileDependenciesForTest","collectAffectedTestFiles","changedFile","testFileCollector","isTestFile","file","add","testFile","importingFile","depsOfImportingFile","depsOfTestFile","affectedTestFiles","changes","result","change","internalDependenciesForTestFile","dependenciesForTestFile","testDependency","externalDependency","kPlaywrightInternalPrefix","resolve","__dirname","includes","sep","startsWith","endsWith","getUserData","pluginName","existsSync","promises","readFile"],"sources":["../../src/transform/compilationCache.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\nimport { sourceMapSupport } from '../utilsBundle';\nimport { isWorkerProcess } from '../common/globals';\n\nexport type MemoryCache = {\n  codePath: string;\n  sourceMapPath: string;\n  dataPath: string;\n  moduleUrl?: string;\n};\n\nexport type SerializedCompilationCache = {\n  sourceMaps: [string, string][],\n  memoryCache: [string, MemoryCache][],\n  fileDependencies: [string, string[]][],\n  externalDependencies: [string, string[]][],\n};\n\n// Assumptions for the compilation cache:\n// - Files in the temp directory we work with can disappear at any moment, either some of them or all together.\n// - Multiple workers can be trying to read from the compilation cache at the same time.\n// - There is a single invocation of the test runner at a time.\n//\n// Therefore, we implement the following logic:\n// - Never assume that file is present, always try to read it to determine whether it's actually present.\n// - Never write to the cache from worker processes to avoid \"multiple writers\" races.\n// - Since we perform all static imports in the runner beforehand, most of the time\n//   workers should be able to read from the cache.\n// - For workers-only dynamic imports or some cache problems, we will re-transpile files in\n//   each worker anew.\n\nexport const cacheDir = process.env.PWTEST_CACHE_DIR || (() => {\n  if (process.platform === 'win32')\n    return path.join(os.tmpdir(), `playwright-transform-cache`);\n  // Use `geteuid()` instead of more natural `os.userInfo().username`\n  // since `os.userInfo()` is not always available.\n  // Note: `process.geteuid()` is not available on windows.\n  // See https://github.com/microsoft/playwright/issues/22721\n  return path.join(os.tmpdir(), `playwright-transform-cache-` + process.geteuid?.());\n})();\n\nconst sourceMaps: Map<string, string> = new Map();\nconst memoryCache = new Map<string, MemoryCache>();\n// Dependencies resolved by the loader.\nconst fileDependencies = new Map<string, Set<string>>();\n// Dependencies resolved by the external bundler.\nconst externalDependencies = new Map<string, Set<string>>();\n\nexport function installSourceMapSupport() {\n  Error.stackTraceLimit = 200;\n\n  sourceMapSupport.install({\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap(source) {\n      if (!sourceMaps.has(source))\n        return null;\n      const sourceMapPath = sourceMaps.get(source)!;\n      try {\n        return {\n          map: JSON.parse(fs.readFileSync(sourceMapPath, 'utf-8')),\n          url: source,\n        };\n      } catch {\n        return null;\n      }\n    }\n  });\n}\n\nfunction _innerAddToCompilationCacheAndSerialize(filename: string, entry: MemoryCache) {\n  sourceMaps.set(entry.moduleUrl || filename, entry.sourceMapPath);\n  memoryCache.set(filename, entry);\n  return {\n    sourceMaps: [[entry.moduleUrl || filename, entry.sourceMapPath]],\n    memoryCache: [[filename, entry]],\n    fileDependencies: [],\n    externalDependencies: [],\n  };\n}\n\ntype CompilationCacheLookupResult = {\n  serializedCache?: any;\n  cachedCode?: string;\n  addToCache?: (code: string, map: any | undefined | null, data: Map<string, any>) => { serializedCache?: any };\n};\n\nexport function getFromCompilationCache(filename: string, hash: string, moduleUrl?: string): CompilationCacheLookupResult {\n  // First check the memory cache by filename, this cache will always work in the worker,\n  // because we just compiled this file in the loader.\n  const cache = memoryCache.get(filename);\n  if (cache?.codePath) {\n    try {\n      return { cachedCode: fs.readFileSync(cache.codePath, 'utf-8') };\n    } catch {\n      // Not able to read the file - fall through.\n    }\n  }\n\n  // Then do the disk cache, this cache works between the Playwright Test runs.\n  const cachePath = calculateCachePath(filename, hash);\n  const codePath = cachePath + '.js';\n  const sourceMapPath = cachePath + '.map';\n  const dataPath = cachePath + '.data';\n  try {\n    const cachedCode = fs.readFileSync(codePath, 'utf8');\n    const serializedCache = _innerAddToCompilationCacheAndSerialize(filename, { codePath, sourceMapPath, dataPath, moduleUrl });\n    return { cachedCode, serializedCache };\n  } catch {\n  }\n\n  return {\n    addToCache: (code: string, map: any | undefined | null, data: Map<string, any>) => {\n      if (isWorkerProcess())\n        return {};\n      fs.mkdirSync(path.dirname(cachePath), { recursive: true });\n      if (map)\n        fs.writeFileSync(sourceMapPath, JSON.stringify(map), 'utf8');\n      if (data.size)\n        fs.writeFileSync(dataPath, JSON.stringify(Object.fromEntries(data.entries()), undefined, 2), 'utf8');\n      fs.writeFileSync(codePath, code, 'utf8');\n      const serializedCache = _innerAddToCompilationCacheAndSerialize(filename, { codePath, sourceMapPath, dataPath, moduleUrl });\n      return { serializedCache };\n    }\n  };\n}\n\nexport function serializeCompilationCache(): SerializedCompilationCache {\n  return {\n    sourceMaps: [...sourceMaps.entries()],\n    memoryCache: [...memoryCache.entries()],\n    fileDependencies: [...fileDependencies.entries()].map(([filename, deps]) => ([filename, [...deps]])),\n    externalDependencies: [...externalDependencies.entries()].map(([filename, deps]) => ([filename, [...deps]])),\n  };\n}\n\nexport function addToCompilationCache(payload: SerializedCompilationCache) {\n  for (const entry of payload.sourceMaps)\n    sourceMaps.set(entry[0], entry[1]);\n  for (const entry of payload.memoryCache)\n    memoryCache.set(entry[0], entry[1]);\n  for (const entry of payload.fileDependencies) {\n    const existing = fileDependencies.get(entry[0]) || [];\n    fileDependencies.set(entry[0], new Set([...entry[1], ...existing]));\n  }\n  for (const entry of payload.externalDependencies) {\n    const existing = externalDependencies.get(entry[0]) || [];\n    externalDependencies.set(entry[0], new Set([...entry[1], ...existing]));\n  }\n}\n\nfunction calculateCachePath(filePath: string, hash: string): string {\n  const fileName = path.basename(filePath, path.extname(filePath)).replace(/\\W/g, '') + '_' + hash;\n  return path.join(cacheDir, hash[0] + hash[1], fileName);\n}\n\n// Since ESM and CJS collect dependencies differently,\n// we go via the global state to collect them.\nlet depsCollector: Set<string> | undefined;\n\nexport function startCollectingFileDeps() {\n  depsCollector = new Set();\n}\n\nexport function stopCollectingFileDeps(filename: string) {\n  if (!depsCollector)\n    return;\n  depsCollector.delete(filename);\n  for (const dep of depsCollector) {\n    if (belongsToNodeModules(dep))\n      depsCollector.delete(dep);\n  }\n  fileDependencies.set(filename, depsCollector);\n  depsCollector = undefined;\n}\n\nexport function currentFileDepsCollector(): Set<string> | undefined {\n  return depsCollector;\n}\n\nexport function setExternalDependencies(filename: string, deps: string[]) {\n  const depsSet = new Set(deps.filter(dep => !belongsToNodeModules(dep) && dep !== filename));\n  externalDependencies.set(filename, depsSet);\n}\n\nexport function fileDependenciesForTest() {\n  return fileDependencies;\n}\n\nexport function collectAffectedTestFiles(changedFile: string, testFileCollector: Set<string>) {\n  const isTestFile = (file: string) => fileDependencies.has(file);\n\n  if (isTestFile(changedFile))\n    testFileCollector.add(changedFile);\n\n  for (const [testFile, deps] of fileDependencies) {\n    if (deps.has(changedFile))\n      testFileCollector.add(testFile);\n  }\n\n  for (const [importingFile, depsOfImportingFile] of externalDependencies) {\n    if (depsOfImportingFile.has(changedFile)) {\n      if (isTestFile(importingFile))\n        testFileCollector.add(importingFile);\n\n      for (const [testFile, depsOfTestFile] of fileDependencies) {\n        if (depsOfTestFile.has(importingFile))\n          testFileCollector.add(testFile);\n      }\n    }\n  }\n}\n\nexport function affectedTestFiles(changes: string[]): string[] {\n  const result = new Set<string>();\n  for (const change of changes)\n    collectAffectedTestFiles(change, result);\n  return [...result];\n}\n\nexport function internalDependenciesForTestFile(filename: string): Set<string> | undefined{\n  return fileDependencies.get(filename);\n}\n\nexport function dependenciesForTestFile(filename: string): Set<string> {\n  const result = new Set<string>();\n  for (const testDependency of fileDependencies.get(filename) || []) {\n    result.add(testDependency);\n    for (const externalDependency of externalDependencies.get(testDependency) || [])\n      result.add(externalDependency);\n  }\n  for (const dep of externalDependencies.get(filename) || [])\n    result.add(dep);\n  return result;\n}\n\n// This is only used in the dev mode, specifically excluding\n// files from packages/playwright*. In production mode, node_modules covers\n// that.\nconst kPlaywrightInternalPrefix = path.resolve(__dirname, '../../../playwright');\n\nexport function belongsToNodeModules(file: string) {\n  if (file.includes(`${path.sep}node_modules${path.sep}`))\n    return true;\n  if (file.startsWith(kPlaywrightInternalPrefix) && (file.endsWith('.js') || file.endsWith('.mjs')))\n    return true;\n  return false;\n}\n\nexport async function getUserData(pluginName: string): Promise<Map<string, any>> {\n  const result = new Map<string, any>();\n  for (const [fileName, cache] of memoryCache) {\n    if (!cache.dataPath)\n      continue;\n    if (!fs.existsSync(cache.dataPath))\n      continue;\n    const data = JSON.parse(await fs.promises.readFile(cache.dataPath, 'utf8'));\n    if (data[pluginName])\n      result.set(fileName, data[pluginName]);\n  }\n  return result;\n}\n"],"mappings":"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"}