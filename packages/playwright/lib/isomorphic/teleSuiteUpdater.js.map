{"version":3,"file":"teleSuiteUpdater.js","names":["_teleReceiver","require","_testTree","TeleSuiteUpdater","constructor","options","rootSuite","config","loadErrors","progress","total","passed","failed","skipped","_receiver","_lastRunReceiver","_lastRunTestCount","_options","_testResultsSnapshot","TeleReporterReceiver","_createReporter","mergeProjects","mergeTestCases","resolvePath","rootDir","relativePath","pathSeparator","clearPreviousResultsWhenTestBegins","version","onConfigure","c","onBegin","suite","allTests","length","undefined","test","_this$_testResultsSna","results","get","id","onUpdate","onEnd","onTestBegin","testResult","statusEx","onTestEnd","outcome","status","onError","error","_handleOnError","printsToStdio","onStdOut","onStdErr","onExit","onStepBegin","onStepEnd","processGlobalReport","report","receiver","message","dispatch","processListReport","_this$rootSuite","tests","Map","map","reset","processTestReportEvent","_this$_lastRunReceive","_this$_receiver$dispa","catch","_this$_options$onErro","_this$_options","push","call","asModel","TeleSuite","exports"],"sources":["../../src/isomorphic/teleSuiteUpdater.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TeleReporterReceiver, TeleSuite } from './teleReceiver';\nimport { statusEx } from './testTree';\nimport type { ReporterV2 } from '../reporters/reporterV2';\nimport type * as reporterTypes from '../../types/testReporter';\n\nexport type TeleSuiteUpdaterProgress = {\n  total: number;\n  passed: number;\n  failed: number;\n  skipped: number;\n};\n\nexport type TeleSuiteUpdaterTestModel = {\n  config: reporterTypes.FullConfig;\n  rootSuite: reporterTypes.Suite;\n  loadErrors: reporterTypes.TestError[];\n  progress: TeleSuiteUpdaterProgress;\n};\n\nexport type TeleSuiteUpdaterOptions = {\n  onUpdate: (force?: boolean) => void,\n  onError?: (error: reporterTypes.TestError) => void;\n  pathSeparator: string;\n};\n\nexport class TeleSuiteUpdater {\n  rootSuite: TeleSuite | undefined;\n  config: reporterTypes.FullConfig | undefined;\n  readonly loadErrors: reporterTypes.TestError[] = [];\n  readonly progress: TeleSuiteUpdaterProgress = {\n    total: 0,\n    passed: 0,\n    failed: 0,\n    skipped: 0,\n  };\n\n  private _receiver: TeleReporterReceiver;\n  private _lastRunReceiver: TeleReporterReceiver | undefined;\n  private _lastRunTestCount = 0;\n  private _options: TeleSuiteUpdaterOptions;\n  private _testResultsSnapshot: Map<string, reporterTypes.TestResult[]> | undefined;\n\n  constructor(options: TeleSuiteUpdaterOptions) {\n    this._receiver = new TeleReporterReceiver(this._createReporter(), {\n      mergeProjects: true,\n      mergeTestCases: true,\n      resolvePath: (rootDir, relativePath) => rootDir + options.pathSeparator + relativePath,\n      clearPreviousResultsWhenTestBegins: true,\n    });\n    this._options = options;\n  }\n\n  private _createReporter(): ReporterV2 {\n    return {\n      version: () => 'v2',\n\n      onConfigure: (c: reporterTypes.FullConfig) => {\n        this.config = c;\n        // TeleReportReceiver is merging everything into a single suite, so when we\n        // run one test, we still get many tests via rootSuite.allTests().length.\n        // To work around that, have a dedicated per-run receiver that will only have\n        // suite for a single test run, and hence will have correct total.\n        this._lastRunReceiver = new TeleReporterReceiver({\n          onBegin: (suite: reporterTypes.Suite) => {\n            this._lastRunTestCount = suite.allTests().length;\n            this._lastRunReceiver = undefined;\n          }\n        }, {\n          mergeProjects: true,\n          mergeTestCases: false,\n          resolvePath: (rootDir, relativePath) => rootDir + this._options.pathSeparator + relativePath,\n        });\n      },\n\n      onBegin: (suite: reporterTypes.Suite) => {\n        if (!this.rootSuite)\n          this.rootSuite = suite as TeleSuite;\n        // As soon as new test tree is built add previous results, before calling onUpdate\n        // to avoid flashing empty results in the UI.\n        if (this._testResultsSnapshot) {\n          for (const test of this.rootSuite.allTests())\n            test.results = this._testResultsSnapshot?.get(test.id) || test.results;\n          this._testResultsSnapshot = undefined;\n        }\n        this.progress.total = this._lastRunTestCount;\n        this.progress.passed = 0;\n        this.progress.failed = 0;\n        this.progress.skipped = 0;\n        this._options.onUpdate(true);\n      },\n\n      onEnd: () => {\n        this._options.onUpdate(true);\n      },\n\n      onTestBegin: (test: reporterTypes.TestCase, testResult: reporterTypes.TestResult) => {\n        (testResult as any)[statusEx] = 'running';\n        this._options.onUpdate();\n      },\n\n      onTestEnd: (test: reporterTypes.TestCase, testResult: reporterTypes.TestResult) => {\n        if (test.outcome() === 'skipped')\n          ++this.progress.skipped;\n        else if (test.outcome() === 'unexpected')\n          ++this.progress.failed;\n        else\n          ++this.progress.passed;\n        (testResult as any)[statusEx] = testResult.status;\n        this._options.onUpdate();\n      },\n\n      onError: (error: reporterTypes.TestError) => this._handleOnError(error),\n\n      printsToStdio: () => {\n        return false;\n      },\n\n      onStdOut: () => { },\n      onStdErr: () => { },\n      onExit: () => { },\n      onStepBegin: () => { },\n      onStepEnd: () => { },\n    };\n  }\n\n  processGlobalReport(report: any[]) {\n    const receiver = new TeleReporterReceiver({\n      onConfigure: (c: reporterTypes.FullConfig) => {\n        this.config = c;\n      },\n      onError: (error: reporterTypes.TestError) => this._handleOnError(error)\n    });\n    for (const message of report)\n      void receiver.dispatch(message);\n  }\n\n  processListReport(report: any[]) {\n    // Save test results and reset all projects, the results will be restored after\n    // new project structure is built.\n    const tests = this.rootSuite?.allTests() || [];\n    this._testResultsSnapshot = new Map(tests.map(test => [test.id, test.results]));\n    this._receiver.reset();\n    for (const message of report)\n      void this._receiver.dispatch(message);\n  }\n\n  processTestReportEvent(message: any) {\n    // The order of receiver dispatches matters here, we want to assign `lastRunTestCount`\n    // before we use it.\n    this._lastRunReceiver?.dispatch(message)?.catch(() => { });\n    this._receiver.dispatch(message)?.catch(() => { });\n  }\n\n  private _handleOnError(error: reporterTypes.TestError) {\n    this.loadErrors.push(error);\n    this._options.onError?.(error);\n    this._options.onUpdate();\n  }\n\n  asModel(): TeleSuiteUpdaterTestModel {\n    return {\n      rootSuite: this.rootSuite || new TeleSuite('', 'root'),\n      config: this.config!,\n      loadErrors: this.loadErrors,\n      progress: this.progress,\n    };\n  }\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA2BO,MAAME,gBAAgB,CAAC;EAiB5BC,WAAWA,CAACC,OAAgC,EAAE;IAAA,KAhB9CC,SAAS;IAAA,KACTC,MAAM;IAAA,KACGC,UAAU,GAA8B,EAAE;IAAA,KAC1CC,QAAQ,GAA6B;MAC5CC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,CAAC;MACTC,MAAM,EAAE,CAAC;MACTC,OAAO,EAAE;IACX,CAAC;IAAA,KAEOC,SAAS;IAAA,KACTC,gBAAgB;IAAA,KAChBC,iBAAiB,GAAG,CAAC;IAAA,KACrBC,QAAQ;IAAA,KACRC,oBAAoB;IAG1B,IAAI,CAACJ,SAAS,GAAG,IAAIK,kCAAoB,CAAC,IAAI,CAACC,eAAe,CAAC,CAAC,EAAE;MAChEC,aAAa,EAAE,IAAI;MACnBC,cAAc,EAAE,IAAI;MACpBC,WAAW,EAAEA,CAACC,OAAO,EAAEC,YAAY,KAAKD,OAAO,GAAGnB,OAAO,CAACqB,aAAa,GAAGD,YAAY;MACtFE,kCAAkC,EAAE;IACtC,CAAC,CAAC;IACF,IAAI,CAACV,QAAQ,GAAGZ,OAAO;EACzB;EAEQe,eAAeA,CAAA,EAAe;IACpC,OAAO;MACLQ,OAAO,EAAEA,CAAA,KAAM,IAAI;MAEnBC,WAAW,EAAGC,CAA2B,IAAK;QAC5C,IAAI,CAACvB,MAAM,GAAGuB,CAAC;QACf;QACA;QACA;QACA;QACA,IAAI,CAACf,gBAAgB,GAAG,IAAII,kCAAoB,CAAC;UAC/CY,OAAO,EAAGC,KAA0B,IAAK;YACvC,IAAI,CAAChB,iBAAiB,GAAGgB,KAAK,CAACC,QAAQ,CAAC,CAAC,CAACC,MAAM;YAChD,IAAI,CAACnB,gBAAgB,GAAGoB,SAAS;UACnC;QACF,CAAC,EAAE;UACDd,aAAa,EAAE,IAAI;UACnBC,cAAc,EAAE,KAAK;UACrBC,WAAW,EAAEA,CAACC,OAAO,EAAEC,YAAY,KAAKD,OAAO,GAAG,IAAI,CAACP,QAAQ,CAACS,aAAa,GAAGD;QAClF,CAAC,CAAC;MACJ,CAAC;MAEDM,OAAO,EAAGC,KAA0B,IAAK;QACvC,IAAI,CAAC,IAAI,CAAC1B,SAAS,EACjB,IAAI,CAACA,SAAS,GAAG0B,KAAkB;QACrC;QACA;QACA,IAAI,IAAI,CAACd,oBAAoB,EAAE;UAC7B,KAAK,MAAMkB,IAAI,IAAI,IAAI,CAAC9B,SAAS,CAAC2B,QAAQ,CAAC,CAAC;YAAA,IAAAI,qBAAA;YAC1CD,IAAI,CAACE,OAAO,GAAG,EAAAD,qBAAA,OAAI,CAACnB,oBAAoB,cAAAmB,qBAAA,uBAAzBA,qBAAA,CAA2BE,GAAG,CAACH,IAAI,CAACI,EAAE,CAAC,KAAIJ,IAAI,CAACE,OAAO;UAAC;UACzE,IAAI,CAACpB,oBAAoB,GAAGiB,SAAS;QACvC;QACA,IAAI,CAAC1B,QAAQ,CAACC,KAAK,GAAG,IAAI,CAACM,iBAAiB;QAC5C,IAAI,CAACP,QAAQ,CAACE,MAAM,GAAG,CAAC;QACxB,IAAI,CAACF,QAAQ,CAACG,MAAM,GAAG,CAAC;QACxB,IAAI,CAACH,QAAQ,CAACI,OAAO,GAAG,CAAC;QACzB,IAAI,CAACI,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAC;MAC9B,CAAC;MAEDC,KAAK,EAAEA,CAAA,KAAM;QACX,IAAI,CAACzB,QAAQ,CAACwB,QAAQ,CAAC,IAAI,CAAC;MAC9B,CAAC;MAEDE,WAAW,EAAEA,CAACP,IAA4B,EAAEQ,UAAoC,KAAK;QAClFA,UAAU,CAASC,kBAAQ,CAAC,GAAG,SAAS;QACzC,IAAI,CAAC5B,QAAQ,CAACwB,QAAQ,CAAC,CAAC;MAC1B,CAAC;MAEDK,SAAS,EAAEA,CAACV,IAA4B,EAAEQ,UAAoC,KAAK;QACjF,IAAIR,IAAI,CAACW,OAAO,CAAC,CAAC,KAAK,SAAS,EAC9B,EAAE,IAAI,CAACtC,QAAQ,CAACI,OAAO,CAAC,KACrB,IAAIuB,IAAI,CAACW,OAAO,CAAC,CAAC,KAAK,YAAY,EACtC,EAAE,IAAI,CAACtC,QAAQ,CAACG,MAAM,CAAC,KAEvB,EAAE,IAAI,CAACH,QAAQ,CAACE,MAAM;QACvBiC,UAAU,CAASC,kBAAQ,CAAC,GAAGD,UAAU,CAACI,MAAM;QACjD,IAAI,CAAC/B,QAAQ,CAACwB,QAAQ,CAAC,CAAC;MAC1B,CAAC;MAEDQ,OAAO,EAAGC,KAA8B,IAAK,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC;MAEvEE,aAAa,EAAEA,CAAA,KAAM;QACnB,OAAO,KAAK;MACd,CAAC;MAEDC,QAAQ,EAAEA,CAAA,KAAM,CAAE,CAAC;MACnBC,QAAQ,EAAEA,CAAA,KAAM,CAAE,CAAC;MACnBC,MAAM,EAAEA,CAAA,KAAM,CAAE,CAAC;MACjBC,WAAW,EAAEA,CAAA,KAAM,CAAE,CAAC;MACtBC,SAAS,EAAEA,CAAA,KAAM,CAAE;IACrB,CAAC;EACH;EAEAC,mBAAmBA,CAACC,MAAa,EAAE;IACjC,MAAMC,QAAQ,GAAG,IAAIzC,kCAAoB,CAAC;MACxCU,WAAW,EAAGC,CAA2B,IAAK;QAC5C,IAAI,CAACvB,MAAM,GAAGuB,CAAC;MACjB,CAAC;MACDmB,OAAO,EAAGC,KAA8B,IAAK,IAAI,CAACC,cAAc,CAACD,KAAK;IACxE,CAAC,CAAC;IACF,KAAK,MAAMW,OAAO,IAAIF,MAAM,EAC1B,KAAKC,QAAQ,CAACE,QAAQ,CAACD,OAAO,CAAC;EACnC;EAEAE,iBAAiBA,CAACJ,MAAa,EAAE;IAAA,IAAAK,eAAA;IAC/B;IACA;IACA,MAAMC,KAAK,GAAG,EAAAD,eAAA,OAAI,CAAC1D,SAAS,cAAA0D,eAAA,uBAAdA,eAAA,CAAgB/B,QAAQ,CAAC,CAAC,KAAI,EAAE;IAC9C,IAAI,CAACf,oBAAoB,GAAG,IAAIgD,GAAG,CAACD,KAAK,CAACE,GAAG,CAAC/B,IAAI,IAAI,CAACA,IAAI,CAACI,EAAE,EAAEJ,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC;IAC/E,IAAI,CAACxB,SAAS,CAACsD,KAAK,CAAC,CAAC;IACtB,KAAK,MAAMP,OAAO,IAAIF,MAAM,EAC1B,KAAK,IAAI,CAAC7C,SAAS,CAACgD,QAAQ,CAACD,OAAO,CAAC;EACzC;EAEAQ,sBAAsBA,CAACR,OAAY,EAAE;IAAA,IAAAS,qBAAA,EAAAC,qBAAA;IACnC;IACA;IACA,CAAAD,qBAAA,OAAI,CAACvD,gBAAgB,cAAAuD,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBR,QAAQ,CAACD,OAAO,CAAC,cAAAS,qBAAA,eAAxCA,qBAAA,CAA0CE,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC;IAC1D,CAAAD,qBAAA,OAAI,CAACzD,SAAS,CAACgD,QAAQ,CAACD,OAAO,CAAC,cAAAU,qBAAA,eAAhCA,qBAAA,CAAkCC,KAAK,CAAC,MAAM,CAAE,CAAC,CAAC;EACpD;EAEQrB,cAAcA,CAACD,KAA8B,EAAE;IAAA,IAAAuB,qBAAA,EAAAC,cAAA;IACrD,IAAI,CAAClE,UAAU,CAACmE,IAAI,CAACzB,KAAK,CAAC;IAC3B,CAAAuB,qBAAA,IAAAC,cAAA,OAAI,CAACzD,QAAQ,EAACgC,OAAO,cAAAwB,qBAAA,eAArBA,qBAAA,CAAAG,IAAA,CAAAF,cAAA,EAAwBxB,KAAK,CAAC;IAC9B,IAAI,CAACjC,QAAQ,CAACwB,QAAQ,CAAC,CAAC;EAC1B;EAEAoC,OAAOA,CAAA,EAA8B;IACnC,OAAO;MACLvE,SAAS,EAAE,IAAI,CAACA,SAAS,IAAI,IAAIwE,uBAAS,CAAC,EAAE,EAAE,MAAM,CAAC;MACtDvE,MAAM,EAAE,IAAI,CAACA,MAAO;MACpBC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BC,QAAQ,EAAE,IAAI,CAACA;IACjB,CAAC;EACH;AACF;AAACsE,OAAA,CAAA5E,gBAAA,GAAAA,gBAAA"}