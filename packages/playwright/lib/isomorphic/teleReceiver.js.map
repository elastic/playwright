{"version":3,"file":"teleReceiver.js","names":["TeleReporterReceiver","constructor","reporter","options","isListing","_rootSuite","_options","_reporter","_tests","Map","_rootDir","_config","TeleSuite","reset","_entries","clear","dispatch","message","method","params","_onConfigure","config","_onProject","project","_onBegin","_onTestBegin","testId","result","_onTestEnd","test","_onStepBegin","resultId","step","_onStepEnd","_onError","error","_onStdIO","type","data","isBase64","_onEnd","_onExit","_this$_reporter$onCon","_this$_reporter","rootDir","_parseConfig","onConfigure","call","projectSuite","mergeProjects","suites","find","suite","name","undefined","_addSuite","_project","_parseProject","_mergeSuiteInto","_this$_reporter$onBeg","_this$_reporter2","onBegin","payload","_this$_reporter$onTes","_this$_reporter3","get","clearPreviousResultsWhenTestBegins","results","testResult","_createTestResult","id","retry","workerIndex","parallelIndex","setStartTimeNumber","startTime","onTestBegin","testEndPayload","_result$errors","_this$_reporter$onTes2","_this$_reporter4","timeout","expectedStatus","annotations","r","_id","duration","status","errors","attachments","_parseAttachments","onTestEnd","_stepMap","_this$_reporter$onSte","_this$_reporter5","parentStep","parentStepId","location","_absoluteLocation","TeleTestStep","steps","push","set","onStepBegin","_this$_reporter$onSte2","_this$_reporter6","onStepEnd","_this$_reporter$onErr","_this$_reporter7","onError","chunk","globalThis","Buffer","from","atob","_this$_reporter$onStd","_this$_reporter8","stdout","onStdOut","_this$_reporter$onStd2","_this$_reporter9","stderr","onStdErr","_this$_reporter$onEnd","_this$_reporter10","onEnd","Date","_this$_reporter$onExi","_this$_reporter11","onExit","baseFullConfig","configOverrides","configFile","reportSlowTests","quiet","metadata","outputDir","_absolutePath","repeatEach","retries","testDir","testIgnore","parseRegexPatterns","testMatch","grep","grepInvert","dependencies","teardown","snapshotDir","use","map","a","body","base64","jsonSuite","parent","targetSuite","s","title","entries","forEach","e","_mergeTestInto","jsonTest","targetTest","mergeTestCases","tests","repeatEachIndex","TeleTestCase","_addTest","_updateTest","_payload$tags","_payload$annotations","tags","file","relativePath","resolvePath","exports","_requireFile","_timeout","_retries","_parallelMode","_type","filter","allTests","visit","entry","titlePath","_this$_project","_this$parent","fn","outcome","computeTestCaseOutcome","ok","TeleTestResult","length","category","_startTime","_this$parent2","parentPath","value","forbidOnly","fullyParallel","globalSetup","globalTeardown","globalTimeout","maxFailures","preserveOutput","projects","process","env","CI","max","threshold","shard","updateSnapshots","version","workers","webServer","serializeRegexPatterns","patterns","Array","isArray","source","flags","p","RegExp","skipped","didNotRun","expected","interrupted","unexpected"],"sources":["../../src/isomorphic/teleReceiver.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Annotation } from '../common/config';\nimport type { Metadata } from '../../types/test';\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\nexport type StringIntern = (s: string) => string;\nexport type JsonLocation = reporterTypes.Location;\nexport type JsonError = string;\nexport type JsonStackFrame = { file: string, line: number, column: number };\n\nexport type JsonStdIOType = 'stdout' | 'stderr';\n\nexport type JsonConfig = Pick<reporterTypes.FullConfig, 'configFile' | 'globalTimeout' | 'maxFailures' | 'metadata' | 'rootDir' | 'version' | 'workers'>;\n\nexport type JsonPattern = {\n  s?: string;\n  r?: { source: string, flags: string };\n};\n\nexport type JsonProject = {\n  grep: JsonPattern[];\n  grepInvert: JsonPattern[];\n  metadata: Metadata;\n  name: string;\n  dependencies: string[];\n  // This is relative to root dir.\n  snapshotDir: string;\n  // This is relative to root dir.\n  outputDir: string;\n  repeatEach: number;\n  retries: number;\n  suites: JsonSuite[];\n  teardown?: string;\n  // This is relative to root dir.\n  testDir: string;\n  testIgnore: JsonPattern[];\n  testMatch: JsonPattern[];\n  timeout: number;\n};\n\nexport type JsonSuite = {\n  title: string;\n  location?: JsonLocation;\n  entries: (JsonSuite | JsonTestCase)[];\n};\n\nexport type JsonTestCase = {\n  testId: string;\n  title: string;\n  location: JsonLocation;\n  retries: number;\n  tags?: string[];\n  repeatEachIndex: number;\n  annotations?: { type: string, description?: string }[];\n};\n\nexport type JsonTestEnd = {\n  testId: string;\n  expectedStatus: reporterTypes.TestStatus;\n  timeout: number;\n  annotations: { type: string, description?: string }[];\n};\n\nexport type JsonTestResultStart = {\n  id: string;\n  retry: number;\n  workerIndex: number;\n  parallelIndex: number;\n  startTime: number;\n};\n\nexport type JsonAttachment = Omit<reporterTypes.TestResult['attachments'][0], 'body'> & { base64?: string };\n\nexport type JsonTestResultEnd = {\n  id: string;\n  duration: number;\n  status: reporterTypes.TestStatus;\n  errors: reporterTypes.TestError[];\n  attachments: JsonAttachment[];\n};\n\nexport type JsonTestStepStart = {\n  id: string;\n  parentStepId?: string;\n  title: string;\n  category: string,\n  startTime: number;\n  location?: reporterTypes.Location;\n};\n\nexport type JsonTestStepEnd = {\n  id: string;\n  duration: number;\n  error?: reporterTypes.TestError;\n};\n\nexport type JsonFullResult = {\n  status: reporterTypes.FullResult['status'];\n  startTime: number;\n  duration: number;\n};\n\nexport type JsonEvent = {\n  method: string;\n  params: any\n};\n\ntype TeleReporterReceiverOptions = {\n  mergeProjects?: boolean;\n  mergeTestCases?: boolean;\n  resolvePath?: (rootDir: string, relativePath: string) => string;\n  configOverrides?: Pick<reporterTypes.FullConfig, 'configFile' | 'quiet' | 'reportSlowTests' | 'reporter'>;\n  clearPreviousResultsWhenTestBegins?: boolean;\n};\n\nexport class TeleReporterReceiver {\n  public isListing = false;\n  private _rootSuite: TeleSuite;\n  private _options: TeleReporterReceiverOptions;\n  private _reporter: Partial<ReporterV2>;\n  private _tests = new Map<string, TeleTestCase>();\n  private _rootDir!: string;\n  private _config!: reporterTypes.FullConfig;\n\n  constructor(reporter: Partial<ReporterV2>, options: TeleReporterReceiverOptions = {}) {\n    this._rootSuite = new TeleSuite('', 'root');\n    this._options = options;\n    this._reporter = reporter;\n  }\n\n  reset() {\n    this._rootSuite._entries = [];\n    this._tests.clear();\n  }\n\n  dispatch(message: JsonEvent): Promise<void> | void {\n    const { method, params } = message;\n    if (method === 'onConfigure') {\n      this._onConfigure(params.config);\n      return;\n    }\n    if (method === 'onProject') {\n      this._onProject(params.project);\n      return;\n    }\n    if (method === 'onBegin') {\n      this._onBegin();\n      return;\n    }\n    if (method === 'onTestBegin') {\n      this._onTestBegin(params.testId, params.result);\n      return;\n    }\n    if (method === 'onTestEnd') {\n      this._onTestEnd(params.test, params.result);\n      return;\n    }\n    if (method === 'onStepBegin') {\n      this._onStepBegin(params.testId, params.resultId, params.step);\n      return;\n    }\n    if (method === 'onStepEnd') {\n      this._onStepEnd(params.testId, params.resultId, params.step);\n      return;\n    }\n    if (method === 'onError') {\n      this._onError(params.error);\n      return;\n    }\n    if (method === 'onStdIO') {\n      this._onStdIO(params.type, params.testId, params.resultId, params.data, params.isBase64);\n      return;\n    }\n    if (method === 'onEnd')\n      return this._onEnd(params.result);\n    if (method === 'onExit')\n      return this._onExit();\n  }\n\n  private _onConfigure(config: JsonConfig) {\n    this._rootDir = config.rootDir;\n    this._config = this._parseConfig(config);\n    this._reporter.onConfigure?.(this._config);\n  }\n\n  private _onProject(project: JsonProject) {\n    let projectSuite = this._options.mergeProjects ? this._rootSuite.suites.find(suite => suite.project()!.name === project.name) : undefined;\n    if (!projectSuite) {\n      projectSuite = new TeleSuite(project.name, 'project');\n      this._rootSuite._addSuite(projectSuite);\n    }\n    // Always update project in watch mode.\n    projectSuite._project = this._parseProject(project);\n    for (const suite of project.suites)\n      this._mergeSuiteInto(suite, projectSuite);\n  }\n\n  private _onBegin() {\n    this._reporter.onBegin?.(this._rootSuite);\n  }\n\n  private _onTestBegin(testId: string, payload: JsonTestResultStart) {\n    const test = this._tests.get(testId)!;\n    if (this._options.clearPreviousResultsWhenTestBegins)\n      test.results = [];\n    const testResult = test._createTestResult(payload.id);\n    testResult.retry = payload.retry;\n    testResult.workerIndex = payload.workerIndex;\n    testResult.parallelIndex = payload.parallelIndex;\n    testResult.setStartTimeNumber(payload.startTime);\n    this._reporter.onTestBegin?.(test, testResult);\n  }\n\n  private _onTestEnd(testEndPayload: JsonTestEnd, payload: JsonTestResultEnd) {\n    const test = this._tests.get(testEndPayload.testId)!;\n    test.timeout = testEndPayload.timeout;\n    test.expectedStatus = testEndPayload.expectedStatus;\n    test.annotations = testEndPayload.annotations;\n    const result = test.results.find(r => r._id === payload.id)!;\n    result.duration = payload.duration;\n    result.status = payload.status;\n    result.errors = payload.errors;\n    result.error = result.errors?.[0];\n    result.attachments = this._parseAttachments(payload.attachments);\n    this._reporter.onTestEnd?.(test, result);\n    // Free up the memory as won't see these step ids.\n    result._stepMap = new Map();\n  }\n\n  private _onStepBegin(testId: string, resultId: string, payload: JsonTestStepStart) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    const parentStep = payload.parentStepId ? result._stepMap.get(payload.parentStepId) : undefined;\n\n    const location = this._absoluteLocation(payload.location);\n    const step = new TeleTestStep(payload, parentStep, location);\n    if (parentStep)\n      parentStep.steps.push(step);\n    else\n      result.steps.push(step);\n    result._stepMap.set(payload.id, step);\n    this._reporter.onStepBegin?.(test, result, step);\n  }\n\n  private _onStepEnd(testId: string, resultId: string, payload: JsonTestStepEnd) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    const step = result._stepMap.get(payload.id)!;\n    step.duration = payload.duration;\n    step.error = payload.error;\n    this._reporter.onStepEnd?.(test, result, step);\n  }\n\n  private _onError(error: reporterTypes.TestError) {\n    this._reporter.onError?.(error);\n  }\n\n  private _onStdIO(type: JsonStdIOType, testId: string | undefined, resultId: string | undefined, data: string, isBase64: boolean) {\n    const chunk = isBase64 ? ((globalThis as any).Buffer ? Buffer.from(data, 'base64') : atob(data)) : data;\n    const test = testId ? this._tests.get(testId) : undefined;\n    const result = test && resultId ? test.results.find(r => r._id === resultId) : undefined;\n    if (type === 'stdout') {\n      result?.stdout.push(chunk);\n      this._reporter.onStdOut?.(chunk, test, result);\n    } else {\n      result?.stderr.push(chunk);\n      this._reporter.onStdErr?.(chunk, test, result);\n    }\n  }\n\n  private async _onEnd(result: JsonFullResult): Promise<void> {\n    await this._reporter.onEnd?.({\n      status: result.status,\n      startTime: new Date(result.startTime),\n      duration: result.duration,\n    });\n  }\n\n  private _onExit(): Promise<void> | void {\n    return this._reporter.onExit?.();\n  }\n\n  private _parseConfig(config: JsonConfig): reporterTypes.FullConfig {\n    const result = { ...baseFullConfig, ...config };\n    if (this._options.configOverrides) {\n      result.configFile = this._options.configOverrides.configFile;\n      result.reportSlowTests = this._options.configOverrides.reportSlowTests;\n      result.quiet = this._options.configOverrides.quiet;\n      result.reporter = [...this._options.configOverrides.reporter];\n    }\n    return result;\n  }\n\n  private _parseProject(project: JsonProject): TeleFullProject {\n    return {\n      metadata: project.metadata,\n      name: project.name,\n      outputDir: this._absolutePath(project.outputDir),\n      repeatEach: project.repeatEach,\n      retries: project.retries,\n      testDir: this._absolutePath(project.testDir),\n      testIgnore: parseRegexPatterns(project.testIgnore),\n      testMatch: parseRegexPatterns(project.testMatch),\n      timeout: project.timeout,\n      grep: parseRegexPatterns(project.grep) as RegExp[],\n      grepInvert: parseRegexPatterns(project.grepInvert) as RegExp[],\n      dependencies: project.dependencies,\n      teardown: project.teardown,\n      snapshotDir: this._absolutePath(project.snapshotDir),\n      use: {},\n    };\n  }\n\n  private _parseAttachments(attachments: JsonAttachment[]): reporterTypes.TestResult['attachments'] {\n    return attachments.map(a => {\n      return {\n        ...a,\n        body: a.base64 && (globalThis as any).Buffer ? Buffer.from(a.base64, 'base64') : undefined,\n      };\n    });\n  }\n\n  private _mergeSuiteInto(jsonSuite: JsonSuite, parent: TeleSuite): void {\n    let targetSuite = parent.suites.find(s => s.title === jsonSuite.title);\n    if (!targetSuite) {\n      targetSuite = new TeleSuite(jsonSuite.title, parent.type === 'project' ? 'file' : 'describe');\n      parent._addSuite(targetSuite);\n    }\n    targetSuite.location = this._absoluteLocation(jsonSuite.location);\n    jsonSuite.entries.forEach(e => {\n      if ('testId' in e)\n        this._mergeTestInto(e, targetSuite!);\n      else\n        this._mergeSuiteInto(e, targetSuite!);\n    });\n  }\n\n  private _mergeTestInto(jsonTest: JsonTestCase, parent: TeleSuite) {\n    let targetTest = this._options.mergeTestCases ? parent.tests.find(s => s.title === jsonTest.title && s.repeatEachIndex === jsonTest.repeatEachIndex) : undefined;\n    if (!targetTest) {\n      targetTest = new TeleTestCase(jsonTest.testId, jsonTest.title, this._absoluteLocation(jsonTest.location), jsonTest.repeatEachIndex);\n      parent._addTest(targetTest);\n      this._tests.set(targetTest.id, targetTest);\n    }\n    this._updateTest(jsonTest, targetTest);\n  }\n\n  private _updateTest(payload: JsonTestCase, test: TeleTestCase): TeleTestCase {\n    test.id = payload.testId;\n    test.location = this._absoluteLocation(payload.location);\n    test.retries = payload.retries;\n    test.tags = payload.tags ?? [];\n    test.annotations = payload.annotations ?? [];\n    return test;\n  }\n\n  private _absoluteLocation(location: reporterTypes.Location): reporterTypes.Location;\n  private _absoluteLocation(location?: reporterTypes.Location): reporterTypes.Location | undefined;\n  private _absoluteLocation(location: reporterTypes.Location | undefined): reporterTypes.Location | undefined {\n    if (!location)\n      return location;\n    return {\n      ...location,\n      file: this._absolutePath(location.file),\n    };\n  }\n\n  private _absolutePath(relativePath: string): string;\n  private _absolutePath(relativePath?: string): string | undefined;\n  private _absolutePath(relativePath?: string): string | undefined {\n    if (relativePath === undefined)\n      return;\n    return this._options.resolvePath ? this._options.resolvePath(this._rootDir, relativePath) : this._rootDir + '/' + relativePath;\n  }\n}\n\nexport class TeleSuite implements reporterTypes.Suite {\n  title: string;\n  location?: reporterTypes.Location;\n  parent?: TeleSuite;\n  _entries: (TeleSuite | TeleTestCase)[] = [];\n  _requireFile: string = '';\n  _timeout: number | undefined;\n  _retries: number | undefined;\n  _project: TeleFullProject | undefined;\n  _parallelMode: 'none' | 'default' | 'serial' | 'parallel' = 'none';\n  private readonly _type: 'root' | 'project' | 'file' | 'describe';\n\n  constructor(title: string, type: 'root' | 'project' | 'file' | 'describe') {\n    this.title = title;\n    this._type = type;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get suites(): TeleSuite[] {\n    return this._entries.filter(e => e.type !== 'test') as TeleSuite[];\n  }\n\n  get tests(): TeleTestCase[] {\n    return this._entries.filter(e => e.type === 'test') as TeleTestCase[];\n  }\n\n  entries() {\n    return this._entries;\n  }\n\n  allTests(): reporterTypes.TestCase[] {\n    const result: reporterTypes.TestCase[] = [];\n    const visit = (suite: reporterTypes.Suite) => {\n      for (const entry of suite.entries()) {\n        if (entry.type === 'test')\n          result.push(entry);\n        else\n          visit(entry);\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    // Ignore anonymous describe blocks.\n    if (this.title || this._type !== 'describe')\n      titlePath.push(this.title);\n    return titlePath;\n  }\n\n  project(): TeleFullProject | undefined {\n    return this._project ?? this.parent?.project();\n  }\n\n  _addTest(test: TeleTestCase) {\n    test.parent = this;\n    this._entries.push(test);\n  }\n\n  _addSuite(suite: TeleSuite) {\n    suite.parent = this;\n    this._entries.push(suite);\n  }\n}\n\nexport class TeleTestCase implements reporterTypes.TestCase {\n  title: string;\n  fn = () => {};\n  results: TeleTestResult[] = [];\n  location: reporterTypes.Location;\n  parent!: TeleSuite;\n  type: 'test' = 'test';\n\n  expectedStatus: reporterTypes.TestStatus = 'passed';\n  timeout = 0;\n  annotations: Annotation[] = [];\n  retries = 0;\n  tags: string[] = [];\n  repeatEachIndex = 0;\n  id: string;\n\n  constructor(id: string, title: string, location: reporterTypes.Location, repeatEachIndex: number) {\n    this.id = id;\n    this.title = title;\n    this.location = location;\n    this.repeatEachIndex = repeatEachIndex;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    titlePath.push(this.title);\n    return titlePath;\n  }\n\n  outcome(): 'skipped' | 'expected' | 'unexpected' | 'flaky' {\n    return computeTestCaseOutcome(this);\n  }\n\n  ok(): boolean {\n    const status = this.outcome();\n    return status === 'expected' || status === 'flaky' || status === 'skipped';\n  }\n\n  _createTestResult(id: string): TeleTestResult {\n    const result = new TeleTestResult(this.results.length, id);\n    this.results.push(result);\n    return result;\n  }\n}\n\nclass TeleTestStep implements reporterTypes.TestStep {\n  title: string;\n  category: string;\n  location: reporterTypes.Location | undefined;\n  parent: reporterTypes.TestStep | undefined;\n  duration: number = -1;\n  steps: reporterTypes.TestStep[] = [];\n\n  private _startTime: number = 0;\n\n  constructor(payload: JsonTestStepStart, parentStep: reporterTypes.TestStep | undefined, location: reporterTypes.Location | undefined) {\n    this.title = payload.title;\n    this.category = payload.category;\n    this.location = location;\n    this.parent = parentStep;\n    this._startTime = payload.startTime;\n  }\n\n  titlePath() {\n    const parentPath = this.parent?.titlePath() || [];\n    return [...parentPath, this.title];\n  }\n\n  get startTime(): Date {\n    return new Date(this._startTime);\n  }\n\n  set startTime(value: Date) {\n    this._startTime = +value;\n  }\n}\n\nexport class TeleTestResult implements reporterTypes.TestResult {\n  retry: reporterTypes.TestResult['retry'];\n  parallelIndex: reporterTypes.TestResult['parallelIndex'] = -1;\n  workerIndex: reporterTypes.TestResult['workerIndex'] = -1;\n  duration: reporterTypes.TestResult['duration'] = -1;\n  stdout: reporterTypes.TestResult['stdout'] = [];\n  stderr: reporterTypes.TestResult['stderr'] = [];\n  attachments: reporterTypes.TestResult['attachments'] = [];\n  status: reporterTypes.TestStatus = 'skipped';\n  steps: TeleTestStep[] = [];\n  errors: reporterTypes.TestResult['errors'] = [];\n  error: reporterTypes.TestResult['error'];\n\n  _stepMap: Map<string, reporterTypes.TestStep> = new Map();\n  _id: string;\n\n  private _startTime: number = 0;\n\n  constructor(retry: number, id: string) {\n    this.retry = retry;\n    this._id = id;\n  }\n\n  setStartTimeNumber(startTime: number) {\n    this._startTime = startTime;\n  }\n\n  get startTime(): Date {\n    return new Date(this._startTime);\n  }\n\n  set startTime(value: Date) {\n    this._startTime = +value;\n  }\n}\n\nexport type TeleFullProject = reporterTypes.FullProject;\n\nexport const baseFullConfig: reporterTypes.FullConfig = {\n  forbidOnly: false,\n  fullyParallel: false,\n  globalSetup: null,\n  globalTeardown: null,\n  globalTimeout: 0,\n  grep: /.*/,\n  grepInvert: null,\n  maxFailures: 0,\n  metadata: {},\n  preserveOutput: 'always',\n  projects: [],\n  reporter: [[process.env.CI ? 'dot' : 'list']],\n  reportSlowTests: { max: 5, threshold: 15000 },\n  configFile: '',\n  rootDir: '',\n  quiet: false,\n  shard: null,\n  updateSnapshots: 'missing',\n  version: '',\n  workers: 0,\n  webServer: null,\n};\n\nexport function serializeRegexPatterns(patterns: string | RegExp | (string | RegExp)[]): JsonPattern[] {\n  if (!Array.isArray(patterns))\n    patterns = [patterns];\n  return patterns.map(s => {\n    if (typeof s === 'string')\n      return { s };\n    return { r: { source: s.source, flags: s.flags } };\n  });\n}\n\nexport function parseRegexPatterns(patterns: JsonPattern[]): (string | RegExp)[] {\n  return patterns.map(p => {\n    if (p.s !== undefined)\n      return p.s;\n    return new RegExp(p.r!.source, p.r!.flags);\n  });\n}\n\nexport function computeTestCaseOutcome(test: reporterTypes.TestCase) {\n  let skipped = 0;\n  let didNotRun = 0;\n  let expected = 0;\n  let interrupted = 0;\n  let unexpected = 0;\n  for (const result of test.results) {\n    if (result.status === 'interrupted') {\n      ++interrupted; // eslint-disable-line @typescript-eslint/no-unused-vars\n    } else if (result.status === 'skipped' && test.expectedStatus === 'skipped') {\n      // Only tests \"expected to be skipped\" are skipped. These were specifically\n      // marked with test.skip or test.fixme.\n      ++skipped;\n    } else if (result.status === 'skipped') {\n      // Tests that were expected to run, but were skipped are \"did not run\".\n      // This happens when:\n      // - testing finished early;\n      // - test failure prevented other tests in the serial suite to run;\n      // - probably more cases!\n      ++didNotRun; // eslint-disable-line @typescript-eslint/no-unused-vars\n    } else if (result.status === test.expectedStatus) {\n      // Either passed and expected to pass, or failed and expected to fail.\n      ++expected;\n    } else {\n      ++unexpected;\n    }\n  }\n\n  // Tests that were \"skipped as expected\" are considered equal to \"expected\" below,\n  // because that's the expected outcome.\n  //\n  // However, we specifically differentiate the case of \"only skipped\"\n  // and show it as \"skipped\" in all reporters.\n  //\n  // More exotic cases like \"failed on first run and skipped on retry\" are flaky.\n  if (expected === 0 && unexpected === 0)\n    return 'skipped';  // all results were skipped or interrupted\n  if (unexpected === 0)\n    return 'expected';  // no failures, just expected+skipped\n  if (expected === 0 && skipped === 0)\n    return 'unexpected';  // only failures\n  return 'flaky';  // expected+unexpected or skipped+unexpected\n}\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqHO,MAAMA,oBAAoB,CAAC;EAShCC,WAAWA,CAACC,QAA6B,EAAEC,OAAoC,GAAG,CAAC,CAAC,EAAE;IAAA,KAR/EC,SAAS,GAAG,KAAK;IAAA,KAChBC,UAAU;IAAA,KACVC,QAAQ;IAAA,KACRC,SAAS;IAAA,KACTC,MAAM,GAAG,IAAIC,GAAG,CAAuB,CAAC;IAAA,KACxCC,QAAQ;IAAA,KACRC,OAAO;IAGb,IAAI,CAACN,UAAU,GAAG,IAAIO,SAAS,CAAC,EAAE,EAAE,MAAM,CAAC;IAC3C,IAAI,CAACN,QAAQ,GAAGH,OAAO;IACvB,IAAI,CAACI,SAAS,GAAGL,QAAQ;EAC3B;EAEAW,KAAKA,CAAA,EAAG;IACN,IAAI,CAACR,UAAU,CAACS,QAAQ,GAAG,EAAE;IAC7B,IAAI,CAACN,MAAM,CAACO,KAAK,CAAC,CAAC;EACrB;EAEAC,QAAQA,CAACC,OAAkB,EAAwB;IACjD,MAAM;MAAEC,MAAM;MAAEC;IAAO,CAAC,GAAGF,OAAO;IAClC,IAAIC,MAAM,KAAK,aAAa,EAAE;MAC5B,IAAI,CAACE,YAAY,CAACD,MAAM,CAACE,MAAM,CAAC;MAChC;IACF;IACA,IAAIH,MAAM,KAAK,WAAW,EAAE;MAC1B,IAAI,CAACI,UAAU,CAACH,MAAM,CAACI,OAAO,CAAC;MAC/B;IACF;IACA,IAAIL,MAAM,KAAK,SAAS,EAAE;MACxB,IAAI,CAACM,QAAQ,CAAC,CAAC;MACf;IACF;IACA,IAAIN,MAAM,KAAK,aAAa,EAAE;MAC5B,IAAI,CAACO,YAAY,CAACN,MAAM,CAACO,MAAM,EAAEP,MAAM,CAACQ,MAAM,CAAC;MAC/C;IACF;IACA,IAAIT,MAAM,KAAK,WAAW,EAAE;MAC1B,IAAI,CAACU,UAAU,CAACT,MAAM,CAACU,IAAI,EAAEV,MAAM,CAACQ,MAAM,CAAC;MAC3C;IACF;IACA,IAAIT,MAAM,KAAK,aAAa,EAAE;MAC5B,IAAI,CAACY,YAAY,CAACX,MAAM,CAACO,MAAM,EAAEP,MAAM,CAACY,QAAQ,EAAEZ,MAAM,CAACa,IAAI,CAAC;MAC9D;IACF;IACA,IAAId,MAAM,KAAK,WAAW,EAAE;MAC1B,IAAI,CAACe,UAAU,CAACd,MAAM,CAACO,MAAM,EAAEP,MAAM,CAACY,QAAQ,EAAEZ,MAAM,CAACa,IAAI,CAAC;MAC5D;IACF;IACA,IAAId,MAAM,KAAK,SAAS,EAAE;MACxB,IAAI,CAACgB,QAAQ,CAACf,MAAM,CAACgB,KAAK,CAAC;MAC3B;IACF;IACA,IAAIjB,MAAM,KAAK,SAAS,EAAE;MACxB,IAAI,CAACkB,QAAQ,CAACjB,MAAM,CAACkB,IAAI,EAAElB,MAAM,CAACO,MAAM,EAAEP,MAAM,CAACY,QAAQ,EAAEZ,MAAM,CAACmB,IAAI,EAAEnB,MAAM,CAACoB,QAAQ,CAAC;MACxF;IACF;IACA,IAAIrB,MAAM,KAAK,OAAO,EACpB,OAAO,IAAI,CAACsB,MAAM,CAACrB,MAAM,CAACQ,MAAM,CAAC;IACnC,IAAIT,MAAM,KAAK,QAAQ,EACrB,OAAO,IAAI,CAACuB,OAAO,CAAC,CAAC;EACzB;EAEQrB,YAAYA,CAACC,MAAkB,EAAE;IAAA,IAAAqB,qBAAA,EAAAC,eAAA;IACvC,IAAI,CAACjC,QAAQ,GAAGW,MAAM,CAACuB,OAAO;IAC9B,IAAI,CAACjC,OAAO,GAAG,IAAI,CAACkC,YAAY,CAACxB,MAAM,CAAC;IACxC,CAAAqB,qBAAA,IAAAC,eAAA,OAAI,CAACpC,SAAS,EAACuC,WAAW,cAAAJ,qBAAA,eAA1BA,qBAAA,CAAAK,IAAA,CAAAJ,eAAA,EAA6B,IAAI,CAAChC,OAAO,CAAC;EAC5C;EAEQW,UAAUA,CAACC,OAAoB,EAAE;IACvC,IAAIyB,YAAY,GAAG,IAAI,CAAC1C,QAAQ,CAAC2C,aAAa,GAAG,IAAI,CAAC5C,UAAU,CAAC6C,MAAM,CAACC,IAAI,CAACC,KAAK,IAAIA,KAAK,CAAC7B,OAAO,CAAC,CAAC,CAAE8B,IAAI,KAAK9B,OAAO,CAAC8B,IAAI,CAAC,GAAGC,SAAS;IACzI,IAAI,CAACN,YAAY,EAAE;MACjBA,YAAY,GAAG,IAAIpC,SAAS,CAACW,OAAO,CAAC8B,IAAI,EAAE,SAAS,CAAC;MACrD,IAAI,CAAChD,UAAU,CAACkD,SAAS,CAACP,YAAY,CAAC;IACzC;IACA;IACAA,YAAY,CAACQ,QAAQ,GAAG,IAAI,CAACC,aAAa,CAAClC,OAAO,CAAC;IACnD,KAAK,MAAM6B,KAAK,IAAI7B,OAAO,CAAC2B,MAAM,EAChC,IAAI,CAACQ,eAAe,CAACN,KAAK,EAAEJ,YAAY,CAAC;EAC7C;EAEQxB,QAAQA,CAAA,EAAG;IAAA,IAAAmC,qBAAA,EAAAC,gBAAA;IACjB,CAAAD,qBAAA,IAAAC,gBAAA,OAAI,CAACrD,SAAS,EAACsD,OAAO,cAAAF,qBAAA,eAAtBA,qBAAA,CAAAZ,IAAA,CAAAa,gBAAA,EAAyB,IAAI,CAACvD,UAAU,CAAC;EAC3C;EAEQoB,YAAYA,CAACC,MAAc,EAAEoC,OAA4B,EAAE;IAAA,IAAAC,qBAAA,EAAAC,gBAAA;IACjE,MAAMnC,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACyD,GAAG,CAACvC,MAAM,CAAE;IACrC,IAAI,IAAI,CAACpB,QAAQ,CAAC4D,kCAAkC,EAClDrC,IAAI,CAACsC,OAAO,GAAG,EAAE;IACnB,MAAMC,UAAU,GAAGvC,IAAI,CAACwC,iBAAiB,CAACP,OAAO,CAACQ,EAAE,CAAC;IACrDF,UAAU,CAACG,KAAK,GAAGT,OAAO,CAACS,KAAK;IAChCH,UAAU,CAACI,WAAW,GAAGV,OAAO,CAACU,WAAW;IAC5CJ,UAAU,CAACK,aAAa,GAAGX,OAAO,CAACW,aAAa;IAChDL,UAAU,CAACM,kBAAkB,CAACZ,OAAO,CAACa,SAAS,CAAC;IAChD,CAAAZ,qBAAA,IAAAC,gBAAA,OAAI,CAACzD,SAAS,EAACqE,WAAW,cAAAb,qBAAA,eAA1BA,qBAAA,CAAAhB,IAAA,CAAAiB,gBAAA,EAA6BnC,IAAI,EAAEuC,UAAU,CAAC;EAChD;EAEQxC,UAAUA,CAACiD,cAA2B,EAAEf,OAA0B,EAAE;IAAA,IAAAgB,cAAA,EAAAC,sBAAA,EAAAC,gBAAA;IAC1E,MAAMnD,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACyD,GAAG,CAACY,cAAc,CAACnD,MAAM,CAAE;IACpDG,IAAI,CAACoD,OAAO,GAAGJ,cAAc,CAACI,OAAO;IACrCpD,IAAI,CAACqD,cAAc,GAAGL,cAAc,CAACK,cAAc;IACnDrD,IAAI,CAACsD,WAAW,GAAGN,cAAc,CAACM,WAAW;IAC7C,MAAMxD,MAAM,GAAGE,IAAI,CAACsC,OAAO,CAAChB,IAAI,CAACiC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKvB,OAAO,CAACQ,EAAE,CAAE;IAC5D3C,MAAM,CAAC2D,QAAQ,GAAGxB,OAAO,CAACwB,QAAQ;IAClC3D,MAAM,CAAC4D,MAAM,GAAGzB,OAAO,CAACyB,MAAM;IAC9B5D,MAAM,CAAC6D,MAAM,GAAG1B,OAAO,CAAC0B,MAAM;IAC9B7D,MAAM,CAACQ,KAAK,IAAA2C,cAAA,GAAGnD,MAAM,CAAC6D,MAAM,cAAAV,cAAA,uBAAbA,cAAA,CAAgB,CAAC,CAAC;IACjCnD,MAAM,CAAC8D,WAAW,GAAG,IAAI,CAACC,iBAAiB,CAAC5B,OAAO,CAAC2B,WAAW,CAAC;IAChE,CAAAV,sBAAA,IAAAC,gBAAA,OAAI,CAACzE,SAAS,EAACoF,SAAS,cAAAZ,sBAAA,eAAxBA,sBAAA,CAAAhC,IAAA,CAAAiC,gBAAA,EAA2BnD,IAAI,EAAEF,MAAM,CAAC;IACxC;IACAA,MAAM,CAACiE,QAAQ,GAAG,IAAInF,GAAG,CAAC,CAAC;EAC7B;EAEQqB,YAAYA,CAACJ,MAAc,EAAEK,QAAgB,EAAE+B,OAA0B,EAAE;IAAA,IAAA+B,qBAAA,EAAAC,gBAAA;IACjF,MAAMjE,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACyD,GAAG,CAACvC,MAAM,CAAE;IACrC,MAAMC,MAAM,GAAGE,IAAI,CAACsC,OAAO,CAAChB,IAAI,CAACiC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKtD,QAAQ,CAAE;IAC1D,MAAMgE,UAAU,GAAGjC,OAAO,CAACkC,YAAY,GAAGrE,MAAM,CAACiE,QAAQ,CAAC3B,GAAG,CAACH,OAAO,CAACkC,YAAY,CAAC,GAAG1C,SAAS;IAE/F,MAAM2C,QAAQ,GAAG,IAAI,CAACC,iBAAiB,CAACpC,OAAO,CAACmC,QAAQ,CAAC;IACzD,MAAMjE,IAAI,GAAG,IAAImE,YAAY,CAACrC,OAAO,EAAEiC,UAAU,EAAEE,QAAQ,CAAC;IAC5D,IAAIF,UAAU,EACZA,UAAU,CAACK,KAAK,CAACC,IAAI,CAACrE,IAAI,CAAC,CAAC,KAE5BL,MAAM,CAACyE,KAAK,CAACC,IAAI,CAACrE,IAAI,CAAC;IACzBL,MAAM,CAACiE,QAAQ,CAACU,GAAG,CAACxC,OAAO,CAACQ,EAAE,EAAEtC,IAAI,CAAC;IACrC,CAAA6D,qBAAA,IAAAC,gBAAA,OAAI,CAACvF,SAAS,EAACgG,WAAW,cAAAV,qBAAA,eAA1BA,qBAAA,CAAA9C,IAAA,CAAA+C,gBAAA,EAA6BjE,IAAI,EAAEF,MAAM,EAAEK,IAAI,CAAC;EAClD;EAEQC,UAAUA,CAACP,MAAc,EAAEK,QAAgB,EAAE+B,OAAwB,EAAE;IAAA,IAAA0C,sBAAA,EAAAC,gBAAA;IAC7E,MAAM5E,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACyD,GAAG,CAACvC,MAAM,CAAE;IACrC,MAAMC,MAAM,GAAGE,IAAI,CAACsC,OAAO,CAAChB,IAAI,CAACiC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKtD,QAAQ,CAAE;IAC1D,MAAMC,IAAI,GAAGL,MAAM,CAACiE,QAAQ,CAAC3B,GAAG,CAACH,OAAO,CAACQ,EAAE,CAAE;IAC7CtC,IAAI,CAACsD,QAAQ,GAAGxB,OAAO,CAACwB,QAAQ;IAChCtD,IAAI,CAACG,KAAK,GAAG2B,OAAO,CAAC3B,KAAK;IAC1B,CAAAqE,sBAAA,IAAAC,gBAAA,OAAI,CAAClG,SAAS,EAACmG,SAAS,cAAAF,sBAAA,eAAxBA,sBAAA,CAAAzD,IAAA,CAAA0D,gBAAA,EAA2B5E,IAAI,EAAEF,MAAM,EAAEK,IAAI,CAAC;EAChD;EAEQE,QAAQA,CAACC,KAA8B,EAAE;IAAA,IAAAwE,qBAAA,EAAAC,gBAAA;IAC/C,CAAAD,qBAAA,IAAAC,gBAAA,OAAI,CAACrG,SAAS,EAACsG,OAAO,cAAAF,qBAAA,eAAtBA,qBAAA,CAAA5D,IAAA,CAAA6D,gBAAA,EAAyBzE,KAAK,CAAC;EACjC;EAEQC,QAAQA,CAACC,IAAmB,EAAEX,MAA0B,EAAEK,QAA4B,EAAEO,IAAY,EAAEC,QAAiB,EAAE;IAC/H,MAAMuE,KAAK,GAAGvE,QAAQ,GAAKwE,UAAU,CAASC,MAAM,GAAGA,MAAM,CAACC,IAAI,CAAC3E,IAAI,EAAE,QAAQ,CAAC,GAAG4E,IAAI,CAAC5E,IAAI,CAAC,GAAIA,IAAI;IACvG,MAAMT,IAAI,GAAGH,MAAM,GAAG,IAAI,CAAClB,MAAM,CAACyD,GAAG,CAACvC,MAAM,CAAC,GAAG4B,SAAS;IACzD,MAAM3B,MAAM,GAAGE,IAAI,IAAIE,QAAQ,GAAGF,IAAI,CAACsC,OAAO,CAAChB,IAAI,CAACiC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKtD,QAAQ,CAAC,GAAGuB,SAAS;IACxF,IAAIjB,IAAI,KAAK,QAAQ,EAAE;MAAA,IAAA8E,qBAAA,EAAAC,gBAAA;MACrBzF,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE0F,MAAM,CAAChB,IAAI,CAACS,KAAK,CAAC;MAC1B,CAAAK,qBAAA,IAAAC,gBAAA,OAAI,CAAC7G,SAAS,EAAC+G,QAAQ,cAAAH,qBAAA,eAAvBA,qBAAA,CAAApE,IAAA,CAAAqE,gBAAA,EAA0BN,KAAK,EAAEjF,IAAI,EAAEF,MAAM,CAAC;IAChD,CAAC,MAAM;MAAA,IAAA4F,sBAAA,EAAAC,gBAAA;MACL7F,MAAM,aAANA,MAAM,eAANA,MAAM,CAAE8F,MAAM,CAACpB,IAAI,CAACS,KAAK,CAAC;MAC1B,CAAAS,sBAAA,IAAAC,gBAAA,OAAI,CAACjH,SAAS,EAACmH,QAAQ,cAAAH,sBAAA,eAAvBA,sBAAA,CAAAxE,IAAA,CAAAyE,gBAAA,EAA0BV,KAAK,EAAEjF,IAAI,EAAEF,MAAM,CAAC;IAChD;EACF;EAEA,MAAca,MAAMA,CAACb,MAAsB,EAAiB;IAAA,IAAAgG,qBAAA,EAAAC,iBAAA;IAC1D,QAAAD,qBAAA,GAAM,CAAAC,iBAAA,OAAI,CAACrH,SAAS,EAACsH,KAAK,cAAAF,qBAAA,uBAApBA,qBAAA,CAAA5E,IAAA,CAAA6E,iBAAA,EAAuB;MAC3BrC,MAAM,EAAE5D,MAAM,CAAC4D,MAAM;MACrBZ,SAAS,EAAE,IAAImD,IAAI,CAACnG,MAAM,CAACgD,SAAS,CAAC;MACrCW,QAAQ,EAAE3D,MAAM,CAAC2D;IACnB,CAAC,CAAC;EACJ;EAEQ7C,OAAOA,CAAA,EAAyB;IAAA,IAAAsF,qBAAA,EAAAC,iBAAA;IACtC,QAAAD,qBAAA,GAAO,CAAAC,iBAAA,OAAI,CAACzH,SAAS,EAAC0H,MAAM,cAAAF,qBAAA,uBAArBA,qBAAA,CAAAhF,IAAA,CAAAiF,iBAAwB,CAAC;EAClC;EAEQnF,YAAYA,CAACxB,MAAkB,EAA4B;IACjE,MAAMM,MAAM,GAAG;MAAE,GAAGuG,cAAc;MAAE,GAAG7G;IAAO,CAAC;IAC/C,IAAI,IAAI,CAACf,QAAQ,CAAC6H,eAAe,EAAE;MACjCxG,MAAM,CAACyG,UAAU,GAAG,IAAI,CAAC9H,QAAQ,CAAC6H,eAAe,CAACC,UAAU;MAC5DzG,MAAM,CAAC0G,eAAe,GAAG,IAAI,CAAC/H,QAAQ,CAAC6H,eAAe,CAACE,eAAe;MACtE1G,MAAM,CAAC2G,KAAK,GAAG,IAAI,CAAChI,QAAQ,CAAC6H,eAAe,CAACG,KAAK;MAClD3G,MAAM,CAACzB,QAAQ,GAAG,CAAC,GAAG,IAAI,CAACI,QAAQ,CAAC6H,eAAe,CAACjI,QAAQ,CAAC;IAC/D;IACA,OAAOyB,MAAM;EACf;EAEQ8B,aAAaA,CAAClC,OAAoB,EAAmB;IAC3D,OAAO;MACLgH,QAAQ,EAAEhH,OAAO,CAACgH,QAAQ;MAC1BlF,IAAI,EAAE9B,OAAO,CAAC8B,IAAI;MAClBmF,SAAS,EAAE,IAAI,CAACC,aAAa,CAAClH,OAAO,CAACiH,SAAS,CAAC;MAChDE,UAAU,EAAEnH,OAAO,CAACmH,UAAU;MAC9BC,OAAO,EAAEpH,OAAO,CAACoH,OAAO;MACxBC,OAAO,EAAE,IAAI,CAACH,aAAa,CAAClH,OAAO,CAACqH,OAAO,CAAC;MAC5CC,UAAU,EAAEC,kBAAkB,CAACvH,OAAO,CAACsH,UAAU,CAAC;MAClDE,SAAS,EAAED,kBAAkB,CAACvH,OAAO,CAACwH,SAAS,CAAC;MAChD9D,OAAO,EAAE1D,OAAO,CAAC0D,OAAO;MACxB+D,IAAI,EAAEF,kBAAkB,CAACvH,OAAO,CAACyH,IAAI,CAAa;MAClDC,UAAU,EAAEH,kBAAkB,CAACvH,OAAO,CAAC0H,UAAU,CAAa;MAC9DC,YAAY,EAAE3H,OAAO,CAAC2H,YAAY;MAClCC,QAAQ,EAAE5H,OAAO,CAAC4H,QAAQ;MAC1BC,WAAW,EAAE,IAAI,CAACX,aAAa,CAAClH,OAAO,CAAC6H,WAAW,CAAC;MACpDC,GAAG,EAAE,CAAC;IACR,CAAC;EACH;EAEQ3D,iBAAiBA,CAACD,WAA6B,EAA2C;IAChG,OAAOA,WAAW,CAAC6D,GAAG,CAACC,CAAC,IAAI;MAC1B,OAAO;QACL,GAAGA,CAAC;QACJC,IAAI,EAAED,CAAC,CAACE,MAAM,IAAK1C,UAAU,CAASC,MAAM,GAAGA,MAAM,CAACC,IAAI,CAACsC,CAAC,CAACE,MAAM,EAAE,QAAQ,CAAC,GAAGnG;MACnF,CAAC;IACH,CAAC,CAAC;EACJ;EAEQI,eAAeA,CAACgG,SAAoB,EAAEC,MAAiB,EAAQ;IACrE,IAAIC,WAAW,GAAGD,MAAM,CAACzG,MAAM,CAACC,IAAI,CAAC0G,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKJ,SAAS,CAACI,KAAK,CAAC;IACtE,IAAI,CAACF,WAAW,EAAE;MAChBA,WAAW,GAAG,IAAIhJ,SAAS,CAAC8I,SAAS,CAACI,KAAK,EAAEH,MAAM,CAACtH,IAAI,KAAK,SAAS,GAAG,MAAM,GAAG,UAAU,CAAC;MAC7FsH,MAAM,CAACpG,SAAS,CAACqG,WAAW,CAAC;IAC/B;IACAA,WAAW,CAAC3D,QAAQ,GAAG,IAAI,CAACC,iBAAiB,CAACwD,SAAS,CAACzD,QAAQ,CAAC;IACjEyD,SAAS,CAACK,OAAO,CAACC,OAAO,CAACC,CAAC,IAAI;MAC7B,IAAI,QAAQ,IAAIA,CAAC,EACf,IAAI,CAACC,cAAc,CAACD,CAAC,EAAEL,WAAY,CAAC,CAAC,KAErC,IAAI,CAAClG,eAAe,CAACuG,CAAC,EAAEL,WAAY,CAAC;IACzC,CAAC,CAAC;EACJ;EAEQM,cAAcA,CAACC,QAAsB,EAAER,MAAiB,EAAE;IAChE,IAAIS,UAAU,GAAG,IAAI,CAAC9J,QAAQ,CAAC+J,cAAc,GAAGV,MAAM,CAACW,KAAK,CAACnH,IAAI,CAAC0G,CAAC,IAAIA,CAAC,CAACC,KAAK,KAAKK,QAAQ,CAACL,KAAK,IAAID,CAAC,CAACU,eAAe,KAAKJ,QAAQ,CAACI,eAAe,CAAC,GAAGjH,SAAS;IAChK,IAAI,CAAC8G,UAAU,EAAE;MACfA,UAAU,GAAG,IAAII,YAAY,CAACL,QAAQ,CAACzI,MAAM,EAAEyI,QAAQ,CAACL,KAAK,EAAE,IAAI,CAAC5D,iBAAiB,CAACiE,QAAQ,CAAClE,QAAQ,CAAC,EAAEkE,QAAQ,CAACI,eAAe,CAAC;MACnIZ,MAAM,CAACc,QAAQ,CAACL,UAAU,CAAC;MAC3B,IAAI,CAAC5J,MAAM,CAAC8F,GAAG,CAAC8D,UAAU,CAAC9F,EAAE,EAAE8F,UAAU,CAAC;IAC5C;IACA,IAAI,CAACM,WAAW,CAACP,QAAQ,EAAEC,UAAU,CAAC;EACxC;EAEQM,WAAWA,CAAC5G,OAAqB,EAAEjC,IAAkB,EAAgB;IAAA,IAAA8I,aAAA,EAAAC,oBAAA;IAC3E/I,IAAI,CAACyC,EAAE,GAAGR,OAAO,CAACpC,MAAM;IACxBG,IAAI,CAACoE,QAAQ,GAAG,IAAI,CAACC,iBAAiB,CAACpC,OAAO,CAACmC,QAAQ,CAAC;IACxDpE,IAAI,CAAC8G,OAAO,GAAG7E,OAAO,CAAC6E,OAAO;IAC9B9G,IAAI,CAACgJ,IAAI,IAAAF,aAAA,GAAG7G,OAAO,CAAC+G,IAAI,cAAAF,aAAA,cAAAA,aAAA,GAAI,EAAE;IAC9B9I,IAAI,CAACsD,WAAW,IAAAyF,oBAAA,GAAG9G,OAAO,CAACqB,WAAW,cAAAyF,oBAAA,cAAAA,oBAAA,GAAI,EAAE;IAC5C,OAAO/I,IAAI;EACb;EAIQqE,iBAAiBA,CAACD,QAA4C,EAAsC;IAC1G,IAAI,CAACA,QAAQ,EACX,OAAOA,QAAQ;IACjB,OAAO;MACL,GAAGA,QAAQ;MACX6E,IAAI,EAAE,IAAI,CAACrC,aAAa,CAACxC,QAAQ,CAAC6E,IAAI;IACxC,CAAC;EACH;EAIQrC,aAAaA,CAACsC,YAAqB,EAAsB;IAC/D,IAAIA,YAAY,KAAKzH,SAAS,EAC5B;IACF,OAAO,IAAI,CAAChD,QAAQ,CAAC0K,WAAW,GAAG,IAAI,CAAC1K,QAAQ,CAAC0K,WAAW,CAAC,IAAI,CAACtK,QAAQ,EAAEqK,YAAY,CAAC,GAAG,IAAI,CAACrK,QAAQ,GAAG,GAAG,GAAGqK,YAAY;EAChI;AACF;AAACE,OAAA,CAAAjL,oBAAA,GAAAA,oBAAA;AAEM,MAAMY,SAAS,CAAgC;EAYpDX,WAAWA,CAAC6J,KAAa,EAAEzH,IAA8C,EAAE;IAAA,KAX3EyH,KAAK;IAAA,KACL7D,QAAQ;IAAA,KACR0D,MAAM;IAAA,KACN7I,QAAQ,GAAiC,EAAE;IAAA,KAC3CoK,YAAY,GAAW,EAAE;IAAA,KACzBC,QAAQ;IAAA,KACRC,QAAQ;IAAA,KACR5H,QAAQ;IAAA,KACR6H,aAAa,GAA+C,MAAM;IAAA,KACjDC,KAAK;IAGpB,IAAI,CAACxB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACwB,KAAK,GAAGjJ,IAAI;EACnB;EAEA,IAAIA,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAACiJ,KAAK;EACnB;EAEA,IAAIpI,MAAMA,CAAA,EAAgB;IACxB,OAAO,IAAI,CAACpC,QAAQ,CAACyK,MAAM,CAACtB,CAAC,IAAIA,CAAC,CAAC5H,IAAI,KAAK,MAAM,CAAC;EACrD;EAEA,IAAIiI,KAAKA,CAAA,EAAmB;IAC1B,OAAO,IAAI,CAACxJ,QAAQ,CAACyK,MAAM,CAACtB,CAAC,IAAIA,CAAC,CAAC5H,IAAI,KAAK,MAAM,CAAC;EACrD;EAEA0H,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACjJ,QAAQ;EACtB;EAEA0K,QAAQA,CAAA,EAA6B;IACnC,MAAM7J,MAAgC,GAAG,EAAE;IAC3C,MAAM8J,KAAK,GAAIrI,KAA0B,IAAK;MAC5C,KAAK,MAAMsI,KAAK,IAAItI,KAAK,CAAC2G,OAAO,CAAC,CAAC,EAAE;QACnC,IAAI2B,KAAK,CAACrJ,IAAI,KAAK,MAAM,EACvBV,MAAM,CAAC0E,IAAI,CAACqF,KAAK,CAAC,CAAC,KAEnBD,KAAK,CAACC,KAAK,CAAC;MAChB;IACF,CAAC;IACDD,KAAK,CAAC,IAAI,CAAC;IACX,OAAO9J,MAAM;EACf;EAEAgK,SAASA,CAAA,EAAa;IACpB,MAAMA,SAAS,GAAG,IAAI,CAAChC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACgC,SAAS,CAAC,CAAC,GAAG,EAAE;IAC5D;IACA,IAAI,IAAI,CAAC7B,KAAK,IAAI,IAAI,CAACwB,KAAK,KAAK,UAAU,EACzCK,SAAS,CAACtF,IAAI,CAAC,IAAI,CAACyD,KAAK,CAAC;IAC5B,OAAO6B,SAAS;EAClB;EAEApK,OAAOA,CAAA,EAAgC;IAAA,IAAAqK,cAAA,EAAAC,YAAA;IACrC,QAAAD,cAAA,GAAO,IAAI,CAACpI,QAAQ,cAAAoI,cAAA,cAAAA,cAAA,IAAAC,YAAA,GAAI,IAAI,CAAClC,MAAM,cAAAkC,YAAA,uBAAXA,YAAA,CAAatK,OAAO,CAAC,CAAC;EAChD;EAEAkJ,QAAQA,CAAC5I,IAAkB,EAAE;IAC3BA,IAAI,CAAC8H,MAAM,GAAG,IAAI;IAClB,IAAI,CAAC7I,QAAQ,CAACuF,IAAI,CAACxE,IAAI,CAAC;EAC1B;EAEA0B,SAASA,CAACH,KAAgB,EAAE;IAC1BA,KAAK,CAACuG,MAAM,GAAG,IAAI;IACnB,IAAI,CAAC7I,QAAQ,CAACuF,IAAI,CAACjD,KAAK,CAAC;EAC3B;AACF;AAAC6H,OAAA,CAAArK,SAAA,GAAAA,SAAA;AAEM,MAAM4J,YAAY,CAAmC;EAgB1DvK,WAAWA,CAACqE,EAAU,EAAEwF,KAAa,EAAE7D,QAAgC,EAAEsE,eAAuB,EAAE;IAAA,KAflGT,KAAK;IAAA,KACLgC,EAAE,GAAG,MAAM,CAAC,CAAC;IAAA,KACb3H,OAAO,GAAqB,EAAE;IAAA,KAC9B8B,QAAQ;IAAA,KACR0D,MAAM;IAAA,KACNtH,IAAI,GAAW,MAAM;IAAA,KAErB6C,cAAc,GAA6B,QAAQ;IAAA,KACnDD,OAAO,GAAG,CAAC;IAAA,KACXE,WAAW,GAAiB,EAAE;IAAA,KAC9BwD,OAAO,GAAG,CAAC;IAAA,KACXkC,IAAI,GAAa,EAAE;IAAA,KACnBN,eAAe,GAAG,CAAC;IAAA,KACnBjG,EAAE;IAGA,IAAI,CAACA,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACwF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAAC7D,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACsE,eAAe,GAAGA,eAAe;EACxC;EAEAoB,SAASA,CAAA,EAAa;IACpB,MAAMA,SAAS,GAAG,IAAI,CAAChC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACgC,SAAS,CAAC,CAAC,GAAG,EAAE;IAC5DA,SAAS,CAACtF,IAAI,CAAC,IAAI,CAACyD,KAAK,CAAC;IAC1B,OAAO6B,SAAS;EAClB;EAEAI,OAAOA,CAAA,EAAoD;IACzD,OAAOC,sBAAsB,CAAC,IAAI,CAAC;EACrC;EAEAC,EAAEA,CAAA,EAAY;IACZ,MAAM1G,MAAM,GAAG,IAAI,CAACwG,OAAO,CAAC,CAAC;IAC7B,OAAOxG,MAAM,KAAK,UAAU,IAAIA,MAAM,KAAK,OAAO,IAAIA,MAAM,KAAK,SAAS;EAC5E;EAEAlB,iBAAiBA,CAACC,EAAU,EAAkB;IAC5C,MAAM3C,MAAM,GAAG,IAAIuK,cAAc,CAAC,IAAI,CAAC/H,OAAO,CAACgI,MAAM,EAAE7H,EAAE,CAAC;IAC1D,IAAI,CAACH,OAAO,CAACkC,IAAI,CAAC1E,MAAM,CAAC;IACzB,OAAOA,MAAM;EACf;AACF;AAACsJ,OAAA,CAAAT,YAAA,GAAAA,YAAA;AAED,MAAMrE,YAAY,CAAmC;EAUnDlG,WAAWA,CAAC6D,OAA0B,EAAEiC,UAA8C,EAAEE,QAA4C,EAAE;IAAA,KATtI6D,KAAK;IAAA,KACLsC,QAAQ;IAAA,KACRnG,QAAQ;IAAA,KACR0D,MAAM;IAAA,KACNrE,QAAQ,GAAW,CAAC,CAAC;IAAA,KACrBc,KAAK,GAA6B,EAAE;IAAA,KAE5BiG,UAAU,GAAW,CAAC;IAG5B,IAAI,CAACvC,KAAK,GAAGhG,OAAO,CAACgG,KAAK;IAC1B,IAAI,CAACsC,QAAQ,GAAGtI,OAAO,CAACsI,QAAQ;IAChC,IAAI,CAACnG,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAAC0D,MAAM,GAAG5D,UAAU;IACxB,IAAI,CAACsG,UAAU,GAAGvI,OAAO,CAACa,SAAS;EACrC;EAEAgH,SAASA,CAAA,EAAG;IAAA,IAAAW,aAAA;IACV,MAAMC,UAAU,GAAG,EAAAD,aAAA,OAAI,CAAC3C,MAAM,cAAA2C,aAAA,uBAAXA,aAAA,CAAaX,SAAS,CAAC,CAAC,KAAI,EAAE;IACjD,OAAO,CAAC,GAAGY,UAAU,EAAE,IAAI,CAACzC,KAAK,CAAC;EACpC;EAEA,IAAInF,SAASA,CAAA,EAAS;IACpB,OAAO,IAAImD,IAAI,CAAC,IAAI,CAACuE,UAAU,CAAC;EAClC;EAEA,IAAI1H,SAASA,CAAC6H,KAAW,EAAE;IACzB,IAAI,CAACH,UAAU,GAAG,CAACG,KAAK;EAC1B;AACF;AAEO,MAAMN,cAAc,CAAqC;EAkB9DjM,WAAWA,CAACsE,KAAa,EAAED,EAAU,EAAE;IAAA,KAjBvCC,KAAK;IAAA,KACLE,aAAa,GAA8C,CAAC,CAAC;IAAA,KAC7DD,WAAW,GAA4C,CAAC,CAAC;IAAA,KACzDc,QAAQ,GAAyC,CAAC,CAAC;IAAA,KACnD+B,MAAM,GAAuC,EAAE;IAAA,KAC/CI,MAAM,GAAuC,EAAE;IAAA,KAC/ChC,WAAW,GAA4C,EAAE;IAAA,KACzDF,MAAM,GAA6B,SAAS;IAAA,KAC5Ca,KAAK,GAAmB,EAAE;IAAA,KAC1BZ,MAAM,GAAuC,EAAE;IAAA,KAC/CrD,KAAK;IAAA,KAELyD,QAAQ,GAAwC,IAAInF,GAAG,CAAC,CAAC;IAAA,KACzD4E,GAAG;IAAA,KAEKgH,UAAU,GAAW,CAAC;IAG5B,IAAI,CAAC9H,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACc,GAAG,GAAGf,EAAE;EACf;EAEAI,kBAAkBA,CAACC,SAAiB,EAAE;IACpC,IAAI,CAAC0H,UAAU,GAAG1H,SAAS;EAC7B;EAEA,IAAIA,SAASA,CAAA,EAAS;IACpB,OAAO,IAAImD,IAAI,CAAC,IAAI,CAACuE,UAAU,CAAC;EAClC;EAEA,IAAI1H,SAASA,CAAC6H,KAAW,EAAE;IACzB,IAAI,CAACH,UAAU,GAAG,CAACG,KAAK;EAC1B;AACF;AAACvB,OAAA,CAAAiB,cAAA,GAAAA,cAAA;AAIM,MAAMhE,cAAwC,GAAA+C,OAAA,CAAA/C,cAAA,GAAG;EACtDuE,UAAU,EAAE,KAAK;EACjBC,aAAa,EAAE,KAAK;EACpBC,WAAW,EAAE,IAAI;EACjBC,cAAc,EAAE,IAAI;EACpBC,aAAa,EAAE,CAAC;EAChB7D,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,IAAI;EAChB6D,WAAW,EAAE,CAAC;EACdvE,QAAQ,EAAE,CAAC,CAAC;EACZwE,cAAc,EAAE,QAAQ;EACxBC,QAAQ,EAAE,EAAE;EACZ9M,QAAQ,EAAE,CAAC,CAAC+M,OAAO,CAACC,GAAG,CAACC,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;EAC7C9E,eAAe,EAAE;IAAE+E,GAAG,EAAE,CAAC;IAAEC,SAAS,EAAE;EAAM,CAAC;EAC7CjF,UAAU,EAAE,EAAE;EACdxF,OAAO,EAAE,EAAE;EACX0F,KAAK,EAAE,KAAK;EACZgF,KAAK,EAAE,IAAI;EACXC,eAAe,EAAE,SAAS;EAC1BC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,CAAC;EACVC,SAAS,EAAE;AACb,CAAC;AAEM,SAASC,sBAAsBA,CAACC,QAA+C,EAAiB;EACrG,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAC1BA,QAAQ,GAAG,CAACA,QAAQ,CAAC;EACvB,OAAOA,QAAQ,CAACtE,GAAG,CAACO,CAAC,IAAI;IACvB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EACvB,OAAO;MAAEA;IAAE,CAAC;IACd,OAAO;MAAEzE,CAAC,EAAE;QAAE2I,MAAM,EAAElE,CAAC,CAACkE,MAAM;QAAEC,KAAK,EAAEnE,CAAC,CAACmE;MAAM;IAAE,CAAC;EACpD,CAAC,CAAC;AACJ;AAEO,SAASlF,kBAAkBA,CAAC8E,QAAuB,EAAuB;EAC/E,OAAOA,QAAQ,CAACtE,GAAG,CAAC2E,CAAC,IAAI;IACvB,IAAIA,CAAC,CAACpE,CAAC,KAAKvG,SAAS,EACnB,OAAO2K,CAAC,CAACpE,CAAC;IACZ,OAAO,IAAIqE,MAAM,CAACD,CAAC,CAAC7I,CAAC,CAAE2I,MAAM,EAAEE,CAAC,CAAC7I,CAAC,CAAE4I,KAAK,CAAC;EAC5C,CAAC,CAAC;AACJ;AAEO,SAAShC,sBAAsBA,CAACnK,IAA4B,EAAE;EACnE,IAAIsM,OAAO,GAAG,CAAC;EACf,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,WAAW,GAAG,CAAC;EACnB,IAAIC,UAAU,GAAG,CAAC;EAClB,KAAK,MAAM5M,MAAM,IAAIE,IAAI,CAACsC,OAAO,EAAE;IACjC,IAAIxC,MAAM,CAAC4D,MAAM,KAAK,aAAa,EAAE;MACnC,EAAE+I,WAAW,CAAC,CAAC;IACjB,CAAC,MAAM,IAAI3M,MAAM,CAAC4D,MAAM,KAAK,SAAS,IAAI1D,IAAI,CAACqD,cAAc,KAAK,SAAS,EAAE;MAC3E;MACA;MACA,EAAEiJ,OAAO;IACX,CAAC,MAAM,IAAIxM,MAAM,CAAC4D,MAAM,KAAK,SAAS,EAAE;MACtC;MACA;MACA;MACA;MACA;MACA,EAAE6I,SAAS,CAAC,CAAC;IACf,CAAC,MAAM,IAAIzM,MAAM,CAAC4D,MAAM,KAAK1D,IAAI,CAACqD,cAAc,EAAE;MAChD;MACA,EAAEmJ,QAAQ;IACZ,CAAC,MAAM;MACL,EAAEE,UAAU;IACd;EACF;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIF,QAAQ,KAAK,CAAC,IAAIE,UAAU,KAAK,CAAC,EACpC,OAAO,SAAS,CAAC,CAAE;EACrB,IAAIA,UAAU,KAAK,CAAC,EAClB,OAAO,UAAU,CAAC,CAAE;EACtB,IAAIF,QAAQ,KAAK,CAAC,IAAIF,OAAO,KAAK,CAAC,EACjC,OAAO,YAAY,CAAC,CAAE;EACxB,OAAO,OAAO,CAAC,CAAE;AACnB"}