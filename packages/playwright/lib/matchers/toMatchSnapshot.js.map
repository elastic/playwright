{"version":3,"file":"toMatchSnapshot.js","names":["_globals","require","_utils","_util","_utilsBundle","_fs","_interopRequireDefault","_path","obj","__esModule","default","snapshotNamesSymbol","Symbol","NonConfigProperties","SnapshotHelper","constructor","testInfo","matcherName","locator","anonymousSnapshotExtension","configOptions","nameOrOptions","optOptions","_mime$getType","attachmentBaseName","legacyExpectedPath","previousPath","expectedPath","actualPath","diffPath","mimeType","kind","updateSnapshots","comparator","options","name","Array","isArray","nameFromOptions","snapshotNames","anonymousSnapshotIndex","namedSnapshotIndex","expectedPathSegments","outputBasePath","fullTitleWithoutSpec","titlePath","slice","join","sanitizeForFilePath","trimLongString","sanitizedName","windowsFilesystemFriendlyLength","_getOutputPath","sanitizeFilePathBeforeExtension","joinedName","path","sep","index","addSuffixToFilePath","snapshotPath","filteredConfigOptions","prop","_comparator","maxDiffPixels","undefined","Error","maxDiffPixelRatio","config","mime","getType","basename","getComparator","startsWith","createMatcherResult","message","pass","log","unfiltered","expected","actual","diff","Object","fromEntries","entries","filter","_","v","handleMissingNegated","isWriteMissingMode","handleDifferentNegated","handleMatchingNegated","colors","red","indent","handleMissing","writeFileSync","attachments","push","contentType","console","_hasNonRetriableError","_failWithError","handleDifferent","previous","diffError","title","output","yellow","length","callLogText","handleMatching","toMatchSnapshot","received","_testInfo$_projectInt","currentTestInfo","Promise","_projectInternal","ignoreSnapshots","isNot","expect","helper","determineFileExtension","fs","existsSync","isDifferent","readFileSync","result","errorMessage","toHaveScreenshotStepTitle","toHaveScreenshot","pageOrLocator","_testInfo$_projectInt2","_helper$options$anima","_helper$options$caret","_helper$options$scale","_helper$options$timeo","expectTypes","page","toLowerCase","endsWith","style","loadScreenshotStyles","stylePath","expectScreenshotOptions","animations","caret","clip","fullPage","mask","maskColor","omitBackground","scale","timeout","threshold","hasSnapshot","promises","readFile","_expectScreenshot","aPath","content","mkdirSync","dirname","recursive","lines","tab","replace","file","compareMagicBytes","magicBytes","Buffer","compare","from","stylePaths","styles","all","map","text","trim"],"sources":["../../src/matchers/toMatchSnapshot.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Locator, Page } from 'playwright-core';\nimport type { ExpectScreenshotOptions, Page as PageEx } from 'playwright-core/lib/client/page';\nimport { currentTestInfo } from '../common/globals';\nimport type { ImageComparatorOptions, Comparator } from 'playwright-core/lib/utils';\nimport { getComparator, sanitizeForFilePath } from 'playwright-core/lib/utils';\nimport {\n  addSuffixToFilePath,\n  trimLongString, callLogText,\n  expectTypes,\n  sanitizeFilePathBeforeExtension,\n  windowsFilesystemFriendlyLength } from '../util';\nimport { colors } from 'playwright-core/lib/utilsBundle';\nimport fs from 'fs';\nimport path from 'path';\nimport { mime } from 'playwright-core/lib/utilsBundle';\nimport type { TestInfoImpl } from '../worker/testInfo';\nimport type { ExpectMatcherState } from '../../types/test';\nimport type { MatcherResult } from './matcherHint';\nimport type { FullProjectInternal } from '../common/config';\n\ntype NameOrSegments = string | string[];\nconst snapshotNamesSymbol = Symbol('snapshotNames');\n\ntype SnapshotNames = {\n  anonymousSnapshotIndex: number;\n  namedSnapshotIndex: { [key: string]: number };\n};\n\ntype ImageMatcherResult = MatcherResult<string, string> & { diff?: string };\n\ntype ToHaveScreenshotConfigOptions = NonNullable<NonNullable<FullProjectInternal['expect']>['toHaveScreenshot']> & {\n  _comparator?: string;\n};\n\ntype ToHaveScreenshotOptions = ToHaveScreenshotConfigOptions & {\n  clip?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  fullPage?: boolean;\n  mask?: Array<Locator>;\n  maskColor?: string;\n  omitBackground?: boolean;\n  timeout?: number;\n};\n\n// Keep in sync with above (begin).\nconst NonConfigProperties: (keyof ToHaveScreenshotOptions)[] = [\n  'clip',\n  'fullPage',\n  'mask',\n  'maskColor',\n  'omitBackground',\n  'timeout',\n];\n// Keep in sync with above (end).\n\nclass SnapshotHelper {\n  readonly testInfo: TestInfoImpl;\n  readonly attachmentBaseName: string;\n  readonly legacyExpectedPath: string;\n  readonly previousPath: string;\n  readonly expectedPath: string;\n  readonly actualPath: string;\n  readonly diffPath: string;\n  readonly mimeType: string;\n  readonly kind: 'Screenshot'|'Snapshot';\n  readonly updateSnapshots: 'all' | 'none' | 'missing';\n  readonly comparator: Comparator;\n  readonly options: Omit<ToHaveScreenshotOptions, '_comparator'> & { comparator?: string };\n  readonly matcherName: string;\n  readonly locator: Locator | undefined;\n\n  constructor(\n    testInfo: TestInfoImpl,\n    matcherName: string,\n    locator: Locator | undefined,\n    anonymousSnapshotExtension: string,\n    configOptions: ToHaveScreenshotConfigOptions,\n    nameOrOptions: NameOrSegments | { name?: NameOrSegments } & ToHaveScreenshotOptions,\n    optOptions: ToHaveScreenshotOptions,\n  ) {\n    let name: NameOrSegments | undefined;\n    if (Array.isArray(nameOrOptions) || typeof nameOrOptions === 'string') {\n      name = nameOrOptions;\n      this.options = { ...optOptions };\n    } else {\n      const { name: nameFromOptions, ...options } = nameOrOptions;\n      this.options = options;\n      name = nameFromOptions;\n    }\n\n    let snapshotNames = (testInfo as any)[snapshotNamesSymbol] as SnapshotNames;\n    if (!(testInfo as any)[snapshotNamesSymbol]) {\n      snapshotNames = {\n        anonymousSnapshotIndex: 0,\n        namedSnapshotIndex: {},\n      };\n      (testInfo as any)[snapshotNamesSymbol] = snapshotNames;\n    }\n\n    let expectedPathSegments: string[];\n    let outputBasePath: string;\n    if (!name) {\n      // Consider the use case below. We should save actual to different paths.\n      // Therefore we auto-increment |anonymousSnapshotIndex|.\n      //\n      //   expect.toMatchSnapshot('a.png')\n      //   // noop\n      //   expect.toMatchSnapshot('a.png')\n      const fullTitleWithoutSpec = [\n        ...testInfo.titlePath.slice(1),\n        ++snapshotNames.anonymousSnapshotIndex,\n      ].join(' ');\n      // Note: expected path must not ever change for backwards compatibility.\n      expectedPathSegments = [sanitizeForFilePath(trimLongString(fullTitleWithoutSpec)) + '.' + anonymousSnapshotExtension];\n      // Trim the output file paths more aggressively to avoid hitting Windows filesystem limits.\n      const sanitizedName = sanitizeForFilePath(trimLongString(fullTitleWithoutSpec, windowsFilesystemFriendlyLength)) + '.' + anonymousSnapshotExtension;\n      outputBasePath = testInfo._getOutputPath(sanitizedName);\n      this.attachmentBaseName = sanitizedName;\n    } else {\n      // We intentionally do not sanitize user-provided array of segments, assuming\n      // it is a file system path. See https://github.com/microsoft/playwright/pull/9156.\n      // Note: expected path must not ever change for backwards compatibility.\n      expectedPathSegments = Array.isArray(name) ? name : [sanitizeFilePathBeforeExtension(name)];\n      const joinedName = Array.isArray(name) ? name.join(path.sep) : sanitizeFilePathBeforeExtension(trimLongString(name, windowsFilesystemFriendlyLength));\n      snapshotNames.namedSnapshotIndex[joinedName] = (snapshotNames.namedSnapshotIndex[joinedName] || 0) + 1;\n      const index = snapshotNames.namedSnapshotIndex[joinedName];\n      const sanitizedName = index > 1 ? addSuffixToFilePath(joinedName, `-${index - 1}`) : joinedName;\n      outputBasePath = testInfo._getOutputPath(sanitizedName);\n      this.attachmentBaseName = sanitizedName;\n    }\n    this.expectedPath = testInfo.snapshotPath(...expectedPathSegments);\n    this.legacyExpectedPath = addSuffixToFilePath(outputBasePath, '-expected');\n    this.previousPath = addSuffixToFilePath(outputBasePath, '-previous');\n    this.actualPath = addSuffixToFilePath(outputBasePath, '-actual');\n    this.diffPath = addSuffixToFilePath(outputBasePath, '-diff');\n\n    const filteredConfigOptions = { ...configOptions };\n    for (const prop of NonConfigProperties)\n      delete (filteredConfigOptions as any)[prop];\n    this.options = {\n      ...filteredConfigOptions,\n      ...this.options,\n    };\n\n    // While comparator is not a part of the public API, it is translated here.\n    if ((this.options as any)._comparator) {\n      this.options.comparator = (this.options as any)._comparator;\n      delete (this.options as any)._comparator;\n    }\n\n    if (this.options.maxDiffPixels !== undefined && this.options.maxDiffPixels < 0)\n      throw new Error('`maxDiffPixels` option value must be non-negative integer');\n\n    if (this.options.maxDiffPixelRatio !== undefined && (this.options.maxDiffPixelRatio < 0 || this.options.maxDiffPixelRatio > 1))\n      throw new Error('`maxDiffPixelRatio` option value must be between 0 and 1');\n\n    this.matcherName = matcherName;\n    this.locator = locator;\n\n    this.updateSnapshots = testInfo.config.updateSnapshots;\n    this.mimeType = mime.getType(path.basename(this.expectedPath)) ?? 'application/octet-string';\n    this.comparator = getComparator(this.mimeType);\n\n    this.testInfo = testInfo;\n    this.kind = this.mimeType.startsWith('image/') ? 'Screenshot' : 'Snapshot';\n  }\n\n  createMatcherResult(message: string, pass: boolean, log?: string[]): ImageMatcherResult {\n    const unfiltered: ImageMatcherResult = {\n      name: this.matcherName,\n      expected: this.expectedPath,\n      actual: this.actualPath,\n      diff: this.diffPath,\n      pass,\n      message: () => message,\n      log,\n    };\n    return Object.fromEntries(Object.entries(unfiltered).filter(([_, v]) => v !== undefined)) as ImageMatcherResult;\n  }\n\n  handleMissingNegated(): ImageMatcherResult {\n    const isWriteMissingMode = this.updateSnapshots === 'all' || this.updateSnapshots === 'missing';\n    const message = `A snapshot doesn't exist at ${this.expectedPath}${isWriteMissingMode ? ', matchers using \".not\" won\\'t write them automatically.' : '.'}`;\n    // NOTE: 'isNot' matcher implies inversed value.\n    return this.createMatcherResult(message, true);\n  }\n\n  handleDifferentNegated(): ImageMatcherResult {\n    // NOTE: 'isNot' matcher implies inversed value.\n    return this.createMatcherResult('', false);\n  }\n\n  handleMatchingNegated(): ImageMatcherResult {\n    const message = [\n      colors.red(`${this.kind} comparison failed:`),\n      '',\n      indent('Expected result should be different from the actual one.', '  '),\n    ].join('\\n');\n    // NOTE: 'isNot' matcher implies inversed value.\n    return this.createMatcherResult(message, true);\n  }\n\n  handleMissing(actual: Buffer | string): ImageMatcherResult {\n    const isWriteMissingMode = this.updateSnapshots === 'all' || this.updateSnapshots === 'missing';\n    if (isWriteMissingMode)\n      writeFileSync(this.expectedPath, actual);\n    this.testInfo.attachments.push({ name: addSuffixToFilePath(this.attachmentBaseName, '-expected'), contentType: this.mimeType, path: this.expectedPath });\n    writeFileSync(this.actualPath, actual);\n    this.testInfo.attachments.push({ name: addSuffixToFilePath(this.attachmentBaseName, '-actual'), contentType: this.mimeType, path: this.actualPath });\n    const message = `A snapshot doesn't exist at ${this.expectedPath}${isWriteMissingMode ? ', writing actual.' : '.'}`;\n    if (this.updateSnapshots === 'all') {\n      /* eslint-disable no-console */\n      console.log(message);\n      return this.createMatcherResult(message, true);\n    }\n    if (this.updateSnapshots === 'missing') {\n      this.testInfo._hasNonRetriableError = true;\n      this.testInfo._failWithError(new Error(message));\n      return this.createMatcherResult('', true);\n    }\n    return this.createMatcherResult(message, false);\n  }\n\n  handleDifferent(\n    actual: Buffer | string | undefined,\n    expected: Buffer | string | undefined,\n    previous: Buffer | string | undefined,\n    diff: Buffer | string | undefined,\n    diffError: string | undefined,\n    log: string[] | undefined,\n    title = `${this.kind} comparison failed:`): ImageMatcherResult {\n    const output = [\n      colors.red(title),\n      '',\n    ];\n    if (diffError)\n      output.push(indent(diffError, '  '));\n\n    if (expected !== undefined) {\n      // Copy the expectation inside the `test-results/` folder for backwards compatibility,\n      // so that one can upload `test-results/` directory and have all the data inside.\n      writeFileSync(this.legacyExpectedPath, expected);\n      this.testInfo.attachments.push({ name: addSuffixToFilePath(this.attachmentBaseName, '-expected'), contentType: this.mimeType, path: this.expectedPath });\n      output.push(`\\nExpected: ${colors.yellow(this.expectedPath)}`);\n    }\n    if (previous !== undefined) {\n      writeFileSync(this.previousPath, previous);\n      this.testInfo.attachments.push({ name: addSuffixToFilePath(this.attachmentBaseName, '-previous'), contentType: this.mimeType, path: this.previousPath });\n      output.push(`Previous: ${colors.yellow(this.previousPath)}`);\n    }\n    if (actual !== undefined) {\n      writeFileSync(this.actualPath, actual);\n      this.testInfo.attachments.push({ name: addSuffixToFilePath(this.attachmentBaseName, '-actual'), contentType: this.mimeType, path: this.actualPath });\n      output.push(`Received: ${colors.yellow(this.actualPath)}`);\n    }\n    if (diff !== undefined) {\n      writeFileSync(this.diffPath, diff);\n      this.testInfo.attachments.push({ name: addSuffixToFilePath(this.attachmentBaseName, '-diff'), contentType: this.mimeType, path: this.diffPath });\n      output.push(`    Diff: ${colors.yellow(this.diffPath)}`);\n    }\n\n    if (log?.length)\n      output.push(callLogText(log));\n    else\n      output.push('');\n\n    return this.createMatcherResult(output.join('\\n'), false, log);\n  }\n\n  handleMatching(): ImageMatcherResult {\n    return this.createMatcherResult('', true);\n  }\n}\n\nexport function toMatchSnapshot(\n  this: ExpectMatcherState,\n  received: Buffer | string,\n  nameOrOptions: NameOrSegments | { name?: NameOrSegments } & ImageComparatorOptions = {},\n  optOptions: ImageComparatorOptions = {}\n): MatcherResult<NameOrSegments | { name?: NameOrSegments }, string> {\n  const testInfo = currentTestInfo();\n  if (!testInfo)\n    throw new Error(`toMatchSnapshot() must be called during the test`);\n  if (received instanceof Promise)\n    throw new Error('An unresolved Promise was passed to toMatchSnapshot(), make sure to resolve it by adding await to it.');\n\n  if (testInfo._projectInternal.ignoreSnapshots)\n    return { pass: !this.isNot, message: () => '', name: 'toMatchSnapshot', expected: nameOrOptions };\n\n  const configOptions = testInfo._projectInternal.expect?.toMatchSnapshot || {};\n  const helper = new SnapshotHelper(\n      testInfo, 'toMatchSnapshot', undefined, determineFileExtension(received),\n      configOptions, nameOrOptions, optOptions);\n\n  if (this.isNot) {\n    if (!fs.existsSync(helper.expectedPath))\n      return helper.handleMissingNegated();\n    const isDifferent = !!helper.comparator(received, fs.readFileSync(helper.expectedPath), helper.options);\n    return isDifferent ? helper.handleDifferentNegated() : helper.handleMatchingNegated();\n  }\n\n  if (!fs.existsSync(helper.expectedPath))\n    return helper.handleMissing(received);\n\n  const expected = fs.readFileSync(helper.expectedPath);\n  const result = helper.comparator(received, expected, helper.options);\n  if (!result)\n    return helper.handleMatching();\n\n  if (helper.updateSnapshots === 'all') {\n    writeFileSync(helper.expectedPath, received);\n    /* eslint-disable no-console */\n    console.log(helper.expectedPath + ' does not match, writing actual.');\n    return helper.createMatcherResult(helper.expectedPath + ' running with --update-snapshots, writing actual.', true);\n  }\n\n  return helper.handleDifferent(received, expected, undefined, result.diff, result.errorMessage, undefined);\n}\n\nexport function toHaveScreenshotStepTitle(\n  nameOrOptions: NameOrSegments | { name?: NameOrSegments } & ToHaveScreenshotOptions = {},\n  optOptions: ToHaveScreenshotOptions = {}\n): string {\n  let name: NameOrSegments | undefined;\n  if (typeof nameOrOptions === 'object' && !Array.isArray(nameOrOptions))\n    name = nameOrOptions.name;\n  else\n    name = nameOrOptions;\n  return Array.isArray(name) ? name.join(path.sep) : name || '';\n}\n\nexport async function toHaveScreenshot(\n  this: ExpectMatcherState,\n  pageOrLocator: Page | Locator,\n  nameOrOptions: NameOrSegments | { name?: NameOrSegments } & ToHaveScreenshotOptions = {},\n  optOptions: ToHaveScreenshotOptions = {}\n): Promise<MatcherResult<NameOrSegments | { name?: NameOrSegments }, string>> {\n  const testInfo = currentTestInfo();\n  if (!testInfo)\n    throw new Error(`toHaveScreenshot() must be called during the test`);\n\n  if (testInfo._projectInternal.ignoreSnapshots)\n    return { pass: !this.isNot, message: () => '', name: 'toHaveScreenshot', expected: nameOrOptions };\n\n  expectTypes(pageOrLocator, ['Page', 'Locator'], 'toHaveScreenshot');\n  const [page, locator] = pageOrLocator.constructor.name === 'Page' ? [(pageOrLocator as PageEx), undefined] : [(pageOrLocator as Locator).page() as PageEx, pageOrLocator as Locator];\n  const configOptions = testInfo._projectInternal.expect?.toHaveScreenshot || {};\n  const helper = new SnapshotHelper(testInfo, 'toHaveScreenshot', locator, 'png', configOptions, nameOrOptions, optOptions);\n  if (!helper.expectedPath.toLowerCase().endsWith('.png'))\n    throw new Error(`Screenshot name \"${path.basename(helper.expectedPath)}\" must have '.png' extension`);\n  expectTypes(pageOrLocator, ['Page', 'Locator'], 'toHaveScreenshot');\n  const style = await loadScreenshotStyles(helper.options.stylePath);\n  const expectScreenshotOptions: ExpectScreenshotOptions = {\n    locator,\n    animations: helper.options.animations ?? 'disabled',\n    caret: helper.options.caret ?? 'hide',\n    clip: helper.options.clip,\n    fullPage: helper.options.fullPage,\n    mask: helper.options.mask,\n    maskColor: helper.options.maskColor,\n    omitBackground: helper.options.omitBackground,\n    scale: helper.options.scale ?? 'css',\n    style,\n    isNot: !!this.isNot,\n    timeout: helper.options.timeout ?? this.timeout,\n    comparator: helper.options.comparator,\n    maxDiffPixels: helper.options.maxDiffPixels,\n    maxDiffPixelRatio: helper.options.maxDiffPixelRatio,\n    threshold: helper.options.threshold,\n  };\n\n  const hasSnapshot = fs.existsSync(helper.expectedPath);\n  if (this.isNot) {\n    if (!hasSnapshot)\n      return helper.handleMissingNegated();\n\n    // Having `errorMessage` means we timed out while waiting\n    // for screenshots not to match, so screenshots\n    // are actually the same in the end.\n    expectScreenshotOptions.expected = await fs.promises.readFile(helper.expectedPath);\n    const isDifferent = !(await page._expectScreenshot(expectScreenshotOptions)).errorMessage;\n    return isDifferent ? helper.handleDifferentNegated() : helper.handleMatchingNegated();\n  }\n\n  // Fast path: there's no screenshot and we don't intend to update it.\n  if (helper.updateSnapshots === 'none' && !hasSnapshot)\n    return helper.createMatcherResult(`A snapshot doesn't exist at ${helper.expectedPath}.`, false);\n\n  if (!hasSnapshot) {\n    // Regenerate a new screenshot by waiting until two screenshots are the same.\n    const { actual, previous, diff, errorMessage, log } = await page._expectScreenshot(expectScreenshotOptions);\n    // We tried re-generating new snapshot but failed.\n    // This can be due to e.g. spinning animation, so we want to show it as a diff.\n    if (errorMessage)\n      return helper.handleDifferent(actual, undefined, previous, diff, undefined, log, errorMessage);\n\n    // We successfully generated new screenshot.\n    return helper.handleMissing(actual!);\n  }\n\n  // General case:\n  // - snapshot exists\n  // - regular matcher (i.e. not a `.not`)\n  // - perhaps an 'all' flag to update non-matching screenshots\n  expectScreenshotOptions.expected = await fs.promises.readFile(helper.expectedPath);\n  const { actual, diff, errorMessage, log } = await page._expectScreenshot(expectScreenshotOptions);\n\n  if (!errorMessage)\n    return helper.handleMatching();\n\n  if (helper.updateSnapshots === 'all') {\n    writeFileSync(helper.expectedPath, actual!);\n    writeFileSync(helper.actualPath, actual!);\n    /* eslint-disable no-console */\n    console.log(helper.expectedPath + ' is re-generated, writing actual.');\n    return helper.createMatcherResult(helper.expectedPath + ' running with --update-snapshots, writing actual.', true);\n  }\n\n  return helper.handleDifferent(actual, expectScreenshotOptions.expected, undefined, diff, errorMessage, log);\n}\n\nfunction writeFileSync(aPath: string, content: Buffer | string) {\n  fs.mkdirSync(path.dirname(aPath), { recursive: true });\n  fs.writeFileSync(aPath, content);\n}\n\nfunction indent(lines: string, tab: string) {\n  return lines.replace(/^(?=.+$)/gm, tab);\n}\n\nfunction determineFileExtension(file: string | Buffer): string {\n  if (typeof file === 'string')\n    return 'txt';\n  if (compareMagicBytes(file, [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]))\n    return 'png';\n  if (compareMagicBytes(file, [0xff, 0xd8, 0xff]))\n    return 'jpg';\n  return 'dat';\n}\n\nfunction compareMagicBytes(file: Buffer, magicBytes: number[]): boolean {\n  return Buffer.compare(Buffer.from(magicBytes), file.slice(0, magicBytes.length)) === 0;\n}\n\nasync function loadScreenshotStyles(stylePath?: string | string[]): Promise<string | undefined> {\n  if (!stylePath)\n    return;\n\n  const stylePaths = Array.isArray(stylePath) ? stylePath : [stylePath];\n  const styles = await Promise.all(stylePaths.map(async stylePath => {\n    const text = await fs.promises.readFile(stylePath, 'utf8');\n    return text.trim();\n  }));\n  return styles.join('\\n').trim() || undefined;\n}\n"],"mappings":"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"}