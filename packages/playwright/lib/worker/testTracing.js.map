{"version":3,"file":"testTracing.js","names":["_fs","_interopRequireDefault","require","_path","_utils","_zipBundle","_util","obj","__esModule","default","testTraceEntryName","exports","version","traceOrdinal","TestTracing","constructor","testInfo","artifactsDir","_testInfo","_options","_liveTraceFile","_traceEvents","_temporaryTraceFiles","_artifactsDir","_tracesDir","_contextCreatedEvent","path","join","type","origin","browserName","options","platform","process","wallTime","Date","now","monotonicTime","sdkLanguage","_appendTraceEvent","_shouldCaptureTrace","_this$_options","_this$_options2","_this$_options3","_this$_options4","_this$_options5","env","PW_TEST_DISABLE_TRACING","mode","retry","startIfNeeded","value","defaultTraceOptions","screenshots","snapshots","sources","attachments","_live","undefined","file","testId","fs","SerializedFS","mkdir","dirname","data","map","e","JSON","stringify","writeFile","tracesDir","traceTitle","relative","project","testDir","line","titlePath","slice","generateNextTraceRecordingName","ordinalSuffix","retrySuffix","generateNextTraceRecordingPath","createGuid","push","traceOptions","stopIfNeeded","_this$_liveTraceFile","_this$_options6","_this$_options7","error","syncAndGetError","testFailed","status","expectedStatus","shouldAbandonTrace","promises","unlink","catch","zipFile","yazl","ZipFile","event","sourceFiles","Set","frame","stack","add","sourceFile","readFile","then","source","addBuffer","Buffer","from","calculateSha1","sha1s","filter","attachment","contentPromise","base64","Promise","resolve","content","sha1","has","traceContent","f","end","outputStream","pipe","createWriteStream","on","tracePath","outputPath","mergeTraceFiles","name","contentType","appendForError","_error$stack","rawStack","split","filteredStackTrace","message","String","appendStdioToTrace","chunk","timestamp","text","toString","appendBeforeActionForStep","callId","parentId","apiName","params","startTime","class","method","Object","fromEntries","entries","generatePreview","appendAfterActionForStep","endTime","serializeAttachments","appendFile","a","_a$body","body","visited","Array","isArray","v","fileName","temporaryTraceFiles","existsSync","length","rename","mergePromise","ManualPromise","entryNames","reject","i","tempFile","promise","yauzl","open","err","inZipFile","pendingEntries","entryCount","entry","entryName","match","openReadStream","readStream","addReadStream","all"],"sources":["../../src/worker/testTracing.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { SerializedError, StackFrame } from '@protocol/channels';\nimport type * as trace from '@trace/trace';\nimport type EventEmitter from 'events';\nimport fs from 'fs';\nimport path from 'path';\nimport { ManualPromise, calculateSha1, monotonicTime, createGuid, SerializedFS } from 'playwright-core/lib/utils';\nimport { yauzl, yazl } from 'playwright-core/lib/zipBundle';\nimport type { TestInfo, TestInfoError } from '../../types/test';\nimport { filteredStackTrace } from '../util';\nimport type { TraceMode, PlaywrightWorkerOptions } from '../../types/test';\nimport type { TestInfoImpl } from './testInfo';\n\nexport type Attachment = TestInfo['attachments'][0];\nexport const testTraceEntryName = 'test.trace';\nconst version: trace.VERSION = 7;\nlet traceOrdinal = 0;\n\ntype TraceFixtureValue =  PlaywrightWorkerOptions['trace'] | undefined;\ntype TraceOptions = { screenshots: boolean, snapshots: boolean, sources: boolean, attachments: boolean, _live: boolean, mode: TraceMode };\n\nexport class TestTracing {\n  private _testInfo: TestInfoImpl;\n  private _options: TraceOptions | undefined;\n  private _liveTraceFile: { file: string, fs: SerializedFS } | undefined;\n  private _traceEvents: trace.TraceEvent[] = [];\n  private _temporaryTraceFiles: string[] = [];\n  private _artifactsDir: string;\n  private _tracesDir: string;\n  private _contextCreatedEvent: trace.ContextCreatedTraceEvent;\n\n  constructor(testInfo: TestInfoImpl, artifactsDir: string) {\n    this._testInfo = testInfo;\n    this._artifactsDir = artifactsDir;\n    this._tracesDir = path.join(this._artifactsDir, 'traces');\n    this._contextCreatedEvent = {\n      version,\n      type: 'context-options',\n      origin: 'testRunner',\n      browserName: '',\n      options: {},\n      platform: process.platform,\n      wallTime: Date.now(),\n      monotonicTime: monotonicTime(),\n      sdkLanguage: 'javascript',\n    };\n    this._appendTraceEvent(this._contextCreatedEvent);\n  }\n\n  private _shouldCaptureTrace() {\n    if (process.env.PW_TEST_DISABLE_TRACING)\n      return false;\n\n    if (this._options?.mode === 'on')\n      return true;\n\n    if (this._options?.mode === 'retain-on-failure')\n      return true;\n\n    if (this._options?.mode === 'on-first-retry' && this._testInfo.retry === 1)\n      return true;\n\n    if (this._options?.mode === 'on-all-retries' && this._testInfo.retry > 0)\n      return true;\n\n    if (this._options?.mode === 'retain-on-first-failure' && this._testInfo.retry === 0)\n      return true;\n\n    return false;\n  }\n\n  async startIfNeeded(value: TraceFixtureValue) {\n    const defaultTraceOptions: TraceOptions = { screenshots: true, snapshots: true, sources: true, attachments: true, _live: false, mode: 'off' };\n\n    if (!value) {\n      this._options = defaultTraceOptions;\n    } else if (typeof value === 'string') {\n      this._options = { ...defaultTraceOptions, mode: value === 'retry-with-trace' ? 'on-first-retry' : value as TraceMode };\n    } else {\n      const mode = value.mode || 'off';\n      this._options = { ...defaultTraceOptions, ...value, mode: (mode as string) === 'retry-with-trace' ? 'on-first-retry' : mode };\n    }\n\n    if (!this._shouldCaptureTrace()) {\n      this._options = undefined;\n      return;\n    }\n\n    if (!this._liveTraceFile && this._options._live) {\n      // Note that trace name must start with testId for live tracing to work.\n      this._liveTraceFile = { file: path.join(this._tracesDir, `${this._testInfo.testId}-test.trace`), fs: new SerializedFS() };\n      this._liveTraceFile.fs.mkdir(path.dirname(this._liveTraceFile.file));\n      const data = this._traceEvents.map(e => JSON.stringify(e)).join('\\n') + '\\n';\n      this._liveTraceFile.fs.writeFile(this._liveTraceFile.file, data);\n    }\n  }\n\n  artifactsDir() {\n    return this._artifactsDir;\n  }\n\n  tracesDir() {\n    return this._tracesDir;\n  }\n\n  traceTitle() {\n    return [path.relative(this._testInfo.project.testDir, this._testInfo.file) + ':' + this._testInfo.line, ...this._testInfo.titlePath.slice(1)].join(' â€º ');\n  }\n\n  generateNextTraceRecordingName() {\n    const ordinalSuffix = traceOrdinal ? `-recording${traceOrdinal}` : '';\n    ++traceOrdinal;\n    const retrySuffix = this._testInfo.retry ? `-retry${this._testInfo.retry}` : '';\n    // Note that trace name must start with testId for live tracing to work.\n    return `${this._testInfo.testId}${retrySuffix}${ordinalSuffix}`;\n  }\n\n  generateNextTraceRecordingPath() {\n    const file = path.join(this._artifactsDir, createGuid() + '.zip');\n    this._temporaryTraceFiles.push(file);\n    return file;\n  }\n\n  traceOptions() {\n    return this._options;\n  }\n\n  async stopIfNeeded() {\n    if (!this._options)\n      return;\n\n    const error = await this._liveTraceFile?.fs.syncAndGetError();\n    if (error)\n      throw error;\n\n    const testFailed = this._testInfo.status !== this._testInfo.expectedStatus;\n    const shouldAbandonTrace = !testFailed && (this._options.mode === 'retain-on-failure' || this._options.mode === 'retain-on-first-failure');\n\n    if (shouldAbandonTrace) {\n      for (const file of this._temporaryTraceFiles)\n        await fs.promises.unlink(file).catch(() => {});\n      return;\n    }\n\n    const zipFile = new yazl.ZipFile();\n\n    if (!this._options?.attachments) {\n      for (const event of this._traceEvents) {\n        if (event.type === 'after')\n          delete event.attachments;\n      }\n    }\n\n    if (this._options?.sources) {\n      const sourceFiles = new Set<string>();\n      for (const event of this._traceEvents) {\n        if (event.type === 'before') {\n          for (const frame of event.stack || [])\n            sourceFiles.add(frame.file);\n        }\n      }\n      for (const sourceFile of sourceFiles) {\n        await fs.promises.readFile(sourceFile, 'utf8').then(source => {\n          zipFile.addBuffer(Buffer.from(source), 'resources/src@' + calculateSha1(sourceFile) + '.txt');\n        }).catch(() => {});\n      }\n    }\n\n    const sha1s = new Set<string>();\n    for (const event of this._traceEvents.filter(e => e.type === 'after') as trace.AfterActionTraceEvent[]) {\n      for (const attachment of (event.attachments || [])) {\n        let contentPromise: Promise<Buffer | undefined> | undefined;\n        if (attachment.path)\n          contentPromise = fs.promises.readFile(attachment.path).catch(() => undefined);\n        else if (attachment.base64)\n          contentPromise = Promise.resolve(Buffer.from(attachment.base64, 'base64'));\n\n        const content = await contentPromise;\n        if (content === undefined)\n          continue;\n\n        const sha1 = calculateSha1(content);\n        attachment.sha1 = sha1;\n        delete attachment.path;\n        delete attachment.base64;\n        if (sha1s.has(sha1))\n          continue;\n        sha1s.add(sha1);\n        zipFile.addBuffer(content, 'resources/' + sha1);\n      }\n    }\n\n    const traceContent = Buffer.from(this._traceEvents.map(e => JSON.stringify(e)).join('\\n'));\n    zipFile.addBuffer(traceContent, testTraceEntryName);\n\n    await new Promise(f => {\n      zipFile.end(undefined, () => {\n        zipFile.outputStream.pipe(fs.createWriteStream(this.generateNextTraceRecordingPath())).on('close', f);\n      });\n    });\n\n    const tracePath = this._testInfo.outputPath('trace.zip');\n    await mergeTraceFiles(tracePath, this._temporaryTraceFiles);\n    this._testInfo.attachments.push({ name: 'trace', path: tracePath, contentType: 'application/zip' });\n  }\n\n  appendForError(error: TestInfoError) {\n    const rawStack = error.stack?.split('\\n') || [];\n    const stack = rawStack ? filteredStackTrace(rawStack) : [];\n    this._appendTraceEvent({\n      type: 'error',\n      message: error.message || String(error.value),\n      stack,\n    });\n  }\n\n  appendStdioToTrace(type: 'stdout' | 'stderr', chunk: string | Buffer) {\n    this._appendTraceEvent({\n      type,\n      timestamp: monotonicTime(),\n      text: typeof chunk === 'string' ? chunk : undefined,\n      base64: typeof chunk === 'string' ? undefined : chunk.toString('base64'),\n    });\n  }\n\n  appendBeforeActionForStep(callId: string, parentId: string | undefined, apiName: string, params: Record<string, any> | undefined, stack: StackFrame[]) {\n    this._appendTraceEvent({\n      type: 'before',\n      callId,\n      parentId,\n      startTime: monotonicTime(),\n      class: 'Test',\n      method: 'step',\n      apiName,\n      params: Object.fromEntries(Object.entries(params || {}).map(([name, value]) => [name, generatePreview(value)])),\n      stack,\n    });\n  }\n\n  appendAfterActionForStep(callId: string, error?: SerializedError['error'], attachments: Attachment[] = []) {\n    this._appendTraceEvent({\n      type: 'after',\n      callId,\n      endTime: monotonicTime(),\n      attachments: serializeAttachments(attachments),\n      error,\n    });\n  }\n\n  private _appendTraceEvent(event: trace.TraceEvent) {\n    this._traceEvents.push(event);\n    if (this._liveTraceFile)\n      this._liveTraceFile.fs.appendFile(this._liveTraceFile.file, JSON.stringify(event) + '\\n', true);\n  }\n}\n\nfunction serializeAttachments(attachments: Attachment[]): trace.AfterActionTraceEvent['attachments'] {\n  return attachments.filter(a => a.name !== 'trace').map(a => {\n    return {\n      name: a.name,\n      contentType: a.contentType,\n      path: a.path,\n      base64: a.body?.toString('base64'),\n    };\n  });\n}\n\nfunction generatePreview(value: any, visited = new Set<any>()): string {\n  if (visited.has(value))\n    return '';\n  visited.add(value);\n  if (typeof value === 'string')\n    return value;\n  if (typeof value === 'number')\n    return value.toString();\n  if (typeof value === 'boolean')\n    return value.toString();\n  if (value === null)\n    return 'null';\n  if (value === undefined)\n    return 'undefined';\n  if (Array.isArray(value))\n    return '[' + value.map(v => generatePreview(v, visited)).join(', ') + ']';\n  if (typeof value === 'object')\n    return 'Object';\n  return String(value);\n}\n\nasync function mergeTraceFiles(fileName: string, temporaryTraceFiles: string[]) {\n  temporaryTraceFiles = temporaryTraceFiles.filter(file => fs.existsSync(file));\n  if (temporaryTraceFiles.length === 1) {\n    await fs.promises.rename(temporaryTraceFiles[0], fileName);\n    return;\n  }\n\n  const mergePromise = new ManualPromise();\n  const zipFile = new yazl.ZipFile();\n  const entryNames = new Set<string>();\n  (zipFile as any as EventEmitter).on('error', error => mergePromise.reject(error));\n\n  for (let i = temporaryTraceFiles.length - 1; i >= 0; --i) {\n    const tempFile = temporaryTraceFiles[i];\n    const promise = new ManualPromise<void>();\n    yauzl.open(tempFile, (err, inZipFile) => {\n      if (err) {\n        promise.reject(err);\n        return;\n      }\n      let pendingEntries = inZipFile.entryCount;\n      inZipFile.on('entry', entry => {\n        let entryName = entry.fileName;\n        if (entry.fileName === testTraceEntryName) {\n          // Keep the name for test traces so that the last test trace\n          // that contains most of the information is kept in the trace.\n          // Note the reverse order of the iteration (from new traces to old).\n        } else if (entry.fileName.match(/[\\d-]*trace\\./)) {\n          entryName = i + '-' + entry.fileName;\n        }\n        if (entryNames.has(entryName)) {\n          if (--pendingEntries === 0)\n            promise.resolve();\n          return;\n        }\n        entryNames.add(entryName);\n        inZipFile.openReadStream(entry, (err, readStream) => {\n          if (err) {\n            promise.reject(err);\n            return;\n          }\n          zipFile.addReadStream(readStream!, entryName);\n          if (--pendingEntries === 0)\n            promise.resolve();\n        });\n      });\n    });\n    await promise;\n  }\n\n  zipFile.end(undefined, () => {\n    zipFile.outputStream.pipe(fs.createWriteStream(fileName)).on('close', () => {\n      void Promise.all(temporaryTraceFiles.map(tempFile => fs.promises.unlink(tempFile))).then(() => {\n        mergePromise.resolve();\n      }).catch(error => mergePromise.reject(error));\n    }).on('error', error => mergePromise.reject(error));\n  });\n  await mergePromise;\n}\n"],"mappings":"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"}