{"version":3,"file":"workerMain.js","names":["_utilsBundle","require","_util","_ipc","_globals","_configLoader","_fixtureRunner","_utils","_testInfo","_process","_testLoader","_suiteUtils","_poolBuilder","_fixtures","WorkerMain","ProcessRunner","constructor","params","_params","_config","_project","_fatalErrors","_skipRemainingTestsInSuite","_didRunFullCleanup","_isStopped","_runFinished","ManualPromise","_currentTest","_lastRunningTests","_totalRunningTests","_activeSuites","Map","process","env","TEST_WORKER_INDEX","String","workerIndex","TEST_PARALLEL_INDEX","parallelIndex","setIsWorkerProcess","FixtureRunner","resolve","on","reason","unhandledError","error","stdout","write","chunk","_this$_currentTest","dispatchEvent","stdioChunkToParams","_tracing","appendStdioToTrace","PW_RUNNER_DEBUG","stderr","_this$_currentTest2","_stop","_this$_currentTest3","_interrupt","gracefullyClose","fakeTestInfo","TestInfoImpl","undefined","runnable","type","_runAsStage","title","_loadIfNeeded","catch","teardownScope","gracefullyCloseAll","push","errors","e","serializeError","length","_appendProcessTeardownDiagnostics","payload","fatalErrors","count","lastMessage","message","colors","red","map","test","formatTestTitle","project","name","join","stack","index","indexOf","substring","value","_hasUnhandledError","_failWithError","isExpectError","Error","matcherResult","shouldContinueInThisWorker","expectedStatus","deserializeConfig","config","projects","find","p","id","projectId","PoolBuilder","createForWorker","runTestGroup","runPayload","entries","testId","fatalUnknownTestIds","fileSuite","loadTestFile","file","rootDir","suite","bindFileSuiteToProject","repeatEachIndex","applyRepeatEachIndex","hasEntries","filterTestsRemoveEmptySuites","has","buildPools","tests","allTests","i","entry","get","delete","debugTest","_runTest","retry","donePayload","skipTestsDueToSetupFailure","_this$_skipRemainingT","nextTest","testInfo","stepBeginPayload","stepEndPayload","attachment","processAnnotation","annotation","annotations","_timeoutManager","slow","setPool","_pool","suites","getSuites","reversedSuites","slice","reverse","nextSuites","Set","setTimeout","timeout","extraAnnotations","setCurrentTestInfo","buildTestBeginPayload","isSkipped","hasAfterAllToRunBeforeNextTest","some","_hooks","hook","status","buildTestEndPayload","shift","shouldRunAfterEachHooks","_allowSkips","traceFixtureRegistration","fn","startIfNeeded","removeFolders","outputDir","testFunctionParams","stepInfo","category","_runBeforeAllHooksForSuite","_runEachHooksForSuites","resolveParametersForFunction","duration","defaultSlot","elapsed","afterHooksTimeout","calculateMaxTimeout","afterHooksSlot","firstAfterHooksError","slot","_testInfo$_onDidFinis","_onDidFinishTestFunction","call","_firstAfterHooksError","_firstAfterHooksError2","_firstAfterHooksError3","_isFailure","_runAfterAllHooksForSuite","_firstAfterHooksError4","firstWorkerCleanupError","teardownSlot","_firstWorkerCleanupEr","_firstWorkerCleanupEr2","_firstWorkerCleanupEr3","tracingSlot","stopIfNeeded","preserveOutput","_collectHooksAndModifiers","runnables","modifier","_modifiers","modifierType","dependsOnWorkerFixturesOnly","location","fixtures","result","description","inheritFixtureNames","filter","set","_runAllHooksForSuite","firstError","timeSlot","existingAnnotations","resolveParametersAndRunFunction","newAnnotations","a","_firstError","SkipError","hooks","flat","isTimeExhaustedFor","_firstError2","exports","startWallTime","_startWallTime","hasNonRetriableError","_hasNonRetriableError","parent","projectName","titles","titlePath","relativeFilePath","line","column","projectTitle","t1","t2","Math","max","create"],"sources":["../../src/worker/workerMain.ts"],"sourcesContent":["/**\n * Copyright Microsoft Corporation. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { colors } from 'playwright-core/lib/utilsBundle';\nimport { debugTest, relativeFilePath, serializeError } from '../util';\nimport { type TestBeginPayload, type TestEndPayload, type RunPayload, type DonePayload, type WorkerInitParams, type TeardownErrorsPayload, stdioChunkToParams } from '../common/ipc';\nimport { setCurrentTestInfo, setIsWorkerProcess } from '../common/globals';\nimport { deserializeConfig } from '../common/configLoader';\nimport type { Suite, TestCase } from '../common/test';\nimport type { Annotation, FullConfigInternal, FullProjectInternal } from '../common/config';\nimport { FixtureRunner } from './fixtureRunner';\nimport { ManualPromise, gracefullyCloseAll, removeFolders } from 'playwright-core/lib/utils';\nimport { SkipError, TestInfoImpl } from './testInfo';\nimport { ProcessRunner } from '../common/process';\nimport { loadTestFile } from '../common/testLoader';\nimport { applyRepeatEachIndex, bindFileSuiteToProject, filterTestsRemoveEmptySuites } from '../common/suiteUtils';\nimport { PoolBuilder } from '../common/poolBuilder';\nimport type { TestInfoError } from '../../types/test';\nimport type { Location } from '../../types/testReporter';\nimport { inheritFixtureNames } from '../common/fixtures';\nimport { type TimeSlot } from './timeoutManager';\n\nexport class WorkerMain extends ProcessRunner {\n  private _params: WorkerInitParams;\n  private _config!: FullConfigInternal;\n  private _project!: FullProjectInternal;\n  private _poolBuilder!: PoolBuilder;\n  private _fixtureRunner: FixtureRunner;\n\n  // Accumulated fatal errors that cannot be attributed to a test.\n  private _fatalErrors: TestInfoError[] = [];\n  // Whether we should skip running remaining tests in this suite because\n  // of a setup error, usually beforeAll hook.\n  private _skipRemainingTestsInSuite: Suite | undefined;\n  // The stage of the full cleanup. Once \"finished\", we can safely stop running anything.\n  private _didRunFullCleanup = false;\n  // Whether the worker was requested to stop.\n  private _isStopped = false;\n  // This promise resolves once the single \"run test group\" call finishes.\n  private _runFinished = new ManualPromise<void>();\n  private _currentTest: TestInfoImpl | null = null;\n  private _lastRunningTests: TestCase[] = [];\n  private _totalRunningTests = 0;\n  // Suites that had their beforeAll hooks, but not afterAll hooks executed.\n  // These suites still need afterAll hooks to be executed for the proper cleanup.\n  // Contains dynamic annotations originated by modifiers with a callback, e.g. `test.skip(() => true)`.\n  private _activeSuites = new Map<Suite, Annotation[]>();\n\n  constructor(params: WorkerInitParams) {\n    super();\n    process.env.TEST_WORKER_INDEX = String(params.workerIndex);\n    process.env.TEST_PARALLEL_INDEX = String(params.parallelIndex);\n    setIsWorkerProcess();\n\n    this._params = params;\n    this._fixtureRunner = new FixtureRunner();\n\n    // Resolve this promise, so worker does not stall waiting for the non-existent run to finish,\n    // when it was sopped before running any test group.\n    this._runFinished.resolve();\n\n    process.on('unhandledRejection', reason => this.unhandledError(reason));\n    process.on('uncaughtException', error => this.unhandledError(error));\n    process.stdout.write = (chunk: string | Buffer) => {\n      this.dispatchEvent('stdOut', stdioChunkToParams(chunk));\n      this._currentTest?._tracing.appendStdioToTrace('stdout', chunk);\n      return true;\n    };\n\n    if (!process.env.PW_RUNNER_DEBUG) {\n      process.stderr.write = (chunk: string | Buffer) => {\n        this.dispatchEvent('stdErr', stdioChunkToParams(chunk));\n        this._currentTest?._tracing.appendStdioToTrace('stderr', chunk);\n        return true;\n      };\n    }\n  }\n\n  private _stop(): Promise<void> {\n    if (!this._isStopped) {\n      this._isStopped = true;\n      this._currentTest?._interrupt();\n    }\n    return this._runFinished;\n  }\n\n  override async gracefullyClose() {\n    try {\n      await this._stop();\n      // Ignore top-level errors, they are already inside TestInfo.errors.\n      const fakeTestInfo = new TestInfoImpl(this._config, this._project, this._params, undefined, 0, () => {}, () => {}, () => {});\n      const runnable = { type: 'teardown' } as const;\n      // We have to load the project to get the right deadline below.\n      await fakeTestInfo._runAsStage({ title: 'worker cleanup', runnable }, () => this._loadIfNeeded()).catch(() => {});\n      await this._fixtureRunner.teardownScope('test', fakeTestInfo, runnable).catch(() => {});\n      await this._fixtureRunner.teardownScope('worker', fakeTestInfo, runnable).catch(() => {});\n      // Close any other browsers launched in this process. This includes anything launched\n      // manually in the test/hooks and internal browsers like Playwright Inspector.\n      await fakeTestInfo._runAsStage({ title: 'worker cleanup', runnable }, () => gracefullyCloseAll()).catch(() => {});\n      this._fatalErrors.push(...fakeTestInfo.errors);\n    } catch (e) {\n      this._fatalErrors.push(serializeError(e));\n    }\n\n    if (this._fatalErrors.length) {\n      this._appendProcessTeardownDiagnostics(this._fatalErrors[this._fatalErrors.length - 1]);\n      const payload: TeardownErrorsPayload = { fatalErrors: this._fatalErrors };\n      this.dispatchEvent('teardownErrors', payload);\n    }\n  }\n\n  private _appendProcessTeardownDiagnostics(error: TestInfoError) {\n    if (!this._lastRunningTests.length)\n      return;\n    const count = this._totalRunningTests === 1 ? '1 test' : `${this._totalRunningTests} tests`;\n    let lastMessage = '';\n    if (this._lastRunningTests.length < this._totalRunningTests)\n      lastMessage = `, last ${this._lastRunningTests.length} tests were`;\n    const message = [\n      '',\n      '',\n      colors.red(`Failed worker ran ${count}${lastMessage}:`),\n      ...this._lastRunningTests.map(test => formatTestTitle(test, this._project.project.name)),\n    ].join('\\n');\n    if (error.message) {\n      if (error.stack) {\n        let index = error.stack.indexOf(error.message);\n        if (index !== -1) {\n          index += error.message.length;\n          error.stack = error.stack.substring(0, index) + message + error.stack.substring(index);\n        }\n      }\n      error.message += message;\n    } else if (error.value) {\n      error.value += message;\n    }\n  }\n\n  unhandledError(error: Error | any) {\n    // No current test - fatal error.\n    if (!this._currentTest) {\n      if (!this._fatalErrors.length)\n        this._fatalErrors.push(serializeError(error));\n      void this._stop();\n      return;\n    }\n\n    // We do not differentiate between errors in the control flow\n    // and unhandled errors - both lead to the test failing. This is good for regular tests,\n    // so that you can, e.g. expect() from inside an event handler. The test fails,\n    // and we restart the worker.\n    if (!this._currentTest._hasUnhandledError) {\n      this._currentTest._hasUnhandledError = true;\n      this._currentTest._failWithError(error);\n    }\n\n    // For tests marked with test.fail(), this might be a problem when unhandled error\n    // is not coming from the user test code (legit failure), but from fixtures or test runner.\n    //\n    // Ideally, we would mark this test as \"failed unexpectedly\" and show that in the report.\n    // However, we do not have such a special test status, so the test will be considered ok (failed as expected).\n    //\n    // To avoid messing up future tests, we forcefully stop the worker, unless it is\n    // an expect() error which we know does not mess things up.\n    const isExpectError = (error instanceof Error) && !!(error as any).matcherResult;\n    const shouldContinueInThisWorker = this._currentTest.expectedStatus === 'failed' && isExpectError;\n    if (!shouldContinueInThisWorker)\n      void this._stop();\n  }\n\n  private async _loadIfNeeded() {\n    if (this._config)\n      return;\n\n    this._config = await deserializeConfig(this._params.config);\n    this._project = this._config.projects.find(p => p.id === this._params.projectId)!;\n    this._poolBuilder = PoolBuilder.createForWorker(this._project);\n  }\n\n  async runTestGroup(runPayload: RunPayload) {\n    this._runFinished = new ManualPromise<void>();\n    const entries = new Map(runPayload.entries.map(e => [e.testId, e]));\n    let fatalUnknownTestIds;\n    try {\n      await this._loadIfNeeded();\n      const fileSuite = await loadTestFile(runPayload.file, this._config.config.rootDir);\n      const suite = bindFileSuiteToProject(this._project, fileSuite);\n      if (this._params.repeatEachIndex)\n        applyRepeatEachIndex(this._project, suite, this._params.repeatEachIndex);\n      const hasEntries = filterTestsRemoveEmptySuites(suite, test => entries.has(test.id));\n      if (hasEntries) {\n        this._poolBuilder.buildPools(suite);\n        this._activeSuites = new Map();\n        this._didRunFullCleanup = false;\n        const tests = suite.allTests();\n        for (let i = 0; i < tests.length; i++) {\n          // Do not run tests after full cleanup, because we are entirely done.\n          if (this._isStopped && this._didRunFullCleanup)\n            break;\n          const entry = entries.get(tests[i].id)!;\n          entries.delete(tests[i].id);\n          debugTest(`test started \"${tests[i].title}\"`);\n          await this._runTest(tests[i], entry.retry, tests[i + 1]);\n          debugTest(`test finished \"${tests[i].title}\"`);\n        }\n      } else {\n        fatalUnknownTestIds = runPayload.entries.map(e => e.testId);\n        void this._stop();\n      }\n    } catch (e) {\n      // In theory, we should run above code without any errors.\n      // However, in the case we screwed up, or loadTestFile failed in the worker\n      // but not in the runner, let's do a fatal error.\n      this._fatalErrors.push(serializeError(e));\n      void this._stop();\n    } finally {\n      const donePayload: DonePayload = {\n        fatalErrors: this._fatalErrors,\n        skipTestsDueToSetupFailure: [],\n        fatalUnknownTestIds\n      };\n      for (const test of this._skipRemainingTestsInSuite?.allTests() || []) {\n        if (entries.has(test.id))\n          donePayload.skipTestsDueToSetupFailure.push(test.id);\n      }\n      this.dispatchEvent('done', donePayload);\n      this._fatalErrors = [];\n      this._skipRemainingTestsInSuite = undefined;\n      this._runFinished.resolve();\n    }\n  }\n\n  private async _runTest(test: TestCase, retry: number, nextTest: TestCase | undefined) {\n    const testInfo = new TestInfoImpl(this._config, this._project, this._params, test, retry,\n        stepBeginPayload => this.dispatchEvent('stepBegin', stepBeginPayload),\n        stepEndPayload => this.dispatchEvent('stepEnd', stepEndPayload),\n        attachment => this.dispatchEvent('attach', attachment));\n\n    const processAnnotation = (annotation: Annotation) => {\n      testInfo.annotations.push(annotation);\n      switch (annotation.type) {\n        case 'fixme':\n        case 'skip':\n          testInfo.expectedStatus = 'skipped';\n          break;\n        case 'fail':\n          if (testInfo.expectedStatus !== 'skipped')\n            testInfo.expectedStatus = 'failed';\n          break;\n        case 'slow':\n          testInfo._timeoutManager.slow();\n          break;\n      }\n    };\n\n    if (!this._isStopped)\n      this._fixtureRunner.setPool(test._pool!);\n\n    const suites = getSuites(test);\n    const reversedSuites = suites.slice().reverse();\n    const nextSuites = new Set(getSuites(nextTest));\n\n    testInfo._timeoutManager.setTimeout(test.timeout);\n    for (const annotation of test.annotations)\n      processAnnotation(annotation);\n\n    // Process existing annotations dynamically set for parent suites.\n    for (const suite of suites) {\n      const extraAnnotations = this._activeSuites.get(suite) || [];\n      for (const annotation of extraAnnotations)\n        processAnnotation(annotation);\n    }\n\n    this._currentTest = testInfo;\n    setCurrentTestInfo(testInfo);\n    this.dispatchEvent('testBegin', buildTestBeginPayload(testInfo));\n\n    const isSkipped = testInfo.expectedStatus === 'skipped';\n    const hasAfterAllToRunBeforeNextTest = reversedSuites.some(suite => {\n      return this._activeSuites.has(suite) && !nextSuites.has(suite) && suite._hooks.some(hook => hook.type === 'afterAll');\n    });\n    if (isSkipped && nextTest && !hasAfterAllToRunBeforeNextTest) {\n      // Fast path - this test is skipped, and there are more tests that will handle cleanup.\n      testInfo.status = 'skipped';\n      this.dispatchEvent('testEnd', buildTestEndPayload(testInfo));\n      return;\n    }\n\n    this._totalRunningTests++;\n    this._lastRunningTests.push(test);\n    if (this._lastRunningTests.length > 10)\n      this._lastRunningTests.shift();\n    let shouldRunAfterEachHooks = false;\n\n    testInfo._allowSkips = true;\n    await testInfo._runAsStage({ title: 'setup and test' }, async () => {\n      await testInfo._runAsStage({ title: 'start tracing', runnable: { type: 'test' } }, async () => {\n        // Ideally, \"trace\" would be an config-level option belonging to the\n        // test runner instead of a fixture belonging to Playwright.\n        // However, for backwards compatibility, we have to read it from a fixture today.\n        // We decided to not introduce the config-level option just yet.\n        const traceFixtureRegistration = test._pool!.resolve('trace');\n        if (!traceFixtureRegistration)\n          return;\n        if (typeof traceFixtureRegistration.fn === 'function')\n          throw new Error(`\"trace\" option cannot be a function`);\n        await testInfo._tracing.startIfNeeded(traceFixtureRegistration.fn);\n      });\n\n      if (this._isStopped || isSkipped) {\n        // Two reasons to get here:\n        // - Last test is skipped, so we should not run the test, but run the cleanup.\n        // - Worker is requested to stop, but was not able to run full cleanup yet.\n        //   We should skip the test, but run the cleanup.\n        testInfo.status = 'skipped';\n        return;\n      }\n\n      await removeFolders([testInfo.outputDir]);\n\n      let testFunctionParams: object | null = null;\n      await testInfo._runAsStage({ title: 'Before Hooks', stepInfo: { category: 'hook' } }, async () => {\n        // Run \"beforeAll\" hooks, unless already run during previous tests.\n        for (const suite of suites)\n          await this._runBeforeAllHooksForSuite(suite, testInfo);\n\n        // Run \"beforeEach\" hooks. Once started with \"beforeEach\", we must run all \"afterEach\" hooks as well.\n        shouldRunAfterEachHooks = true;\n        await this._runEachHooksForSuites(suites, 'beforeEach', testInfo);\n\n        // Setup fixtures required by the test.\n        testFunctionParams = await this._fixtureRunner.resolveParametersForFunction(test.fn, testInfo, 'test', { type: 'test' });\n      });\n\n      if (testFunctionParams === null) {\n        // Fixture setup failed or was skipped, we should not run the test now.\n        return;\n      }\n\n      await testInfo._runAsStage({ title: 'test function', runnable: { type: 'test' } }, async () => {\n        // Now run the test itself.\n        const fn = test.fn; // Extract a variable to get a better stack trace (\"myTest\" vs \"TestCase.myTest [as fn]\").\n        await fn(testFunctionParams, testInfo);\n      });\n    }).catch(() => {});  // Ignore the top-level error, it is already inside TestInfo.errors.\n\n    // Update duration, so it is available in fixture teardown and afterEach hooks.\n    testInfo.duration = testInfo._timeoutManager.defaultSlot().elapsed | 0;\n\n    // No skips in after hooks.\n    testInfo._allowSkips = true;\n\n    // After hooks get an additional timeout.\n    const afterHooksTimeout = calculateMaxTimeout(this._project.project.timeout, testInfo.timeout);\n    const afterHooksSlot = { timeout: afterHooksTimeout, elapsed: 0 };\n    await testInfo._runAsStage({ title: 'After Hooks', stepInfo: { category: 'hook' } }, async () => {\n      let firstAfterHooksError: Error | undefined;\n\n      try {\n        // Run \"immediately upon test function finish\" callback.\n        await testInfo._runAsStage({ title: 'on-test-function-finish', runnable: { type: 'test', slot: afterHooksSlot } }, async () => testInfo._onDidFinishTestFunction?.());\n      } catch (error) {\n        firstAfterHooksError = firstAfterHooksError ?? error;\n      }\n\n      try {\n        // Run \"afterEach\" hooks, unless we failed at beforeAll stage.\n        if (shouldRunAfterEachHooks)\n          await this._runEachHooksForSuites(reversedSuites, 'afterEach', testInfo, afterHooksSlot);\n      } catch (error) {\n        firstAfterHooksError = firstAfterHooksError ?? error;\n      }\n\n      try {\n        // Teardown test-scoped fixtures. Attribute to 'test' so that users understand\n        // they should probably increase the test timeout to fix this issue.\n        await this._fixtureRunner.teardownScope('test', testInfo, { type: 'test', slot: afterHooksSlot });\n      } catch (error) {\n        firstAfterHooksError = firstAfterHooksError ?? error;\n      }\n\n      // Run \"afterAll\" hooks for suites that are not shared with the next test.\n      // In case of failure the worker will be stopped and we have to make sure that afterAll\n      // hooks run before worker fixtures teardown.\n      for (const suite of reversedSuites) {\n        if (!nextSuites.has(suite) || testInfo._isFailure()) {\n          try {\n            await this._runAfterAllHooksForSuite(suite, testInfo);\n          } catch (error) {\n            // Continue running \"afterAll\" hooks even after some of them timeout.\n            firstAfterHooksError = firstAfterHooksError ?? error;\n          }\n        }\n      }\n      if (firstAfterHooksError)\n        throw firstAfterHooksError;\n    }).catch(() => {});  // Ignore the top-level error, it is already inside TestInfo.errors.\n\n    if (testInfo._isFailure())\n      this._isStopped = true;\n\n    if (this._isStopped) {\n      // Run all remaining \"afterAll\" hooks and teardown all fixtures when worker is shutting down.\n      // Mark as \"cleaned up\" early to avoid running cleanup twice.\n      this._didRunFullCleanup = true;\n\n      await testInfo._runAsStage({ title: 'Worker Cleanup', stepInfo: { category: 'hook' } }, async () => {\n        let firstWorkerCleanupError: Error | undefined;\n\n        // Give it more time for the full cleanup.\n        const teardownSlot = { timeout: this._project.project.timeout, elapsed: 0 };\n        try {\n          // Attribute to 'test' so that users understand they should probably increate the test timeout to fix this issue.\n          await this._fixtureRunner.teardownScope('test', testInfo, { type: 'test', slot: teardownSlot });\n        } catch (error) {\n          firstWorkerCleanupError = firstWorkerCleanupError ?? error;\n        }\n\n        for (const suite of reversedSuites) {\n          try {\n            await this._runAfterAllHooksForSuite(suite, testInfo);\n          } catch (error) {\n            firstWorkerCleanupError = firstWorkerCleanupError ?? error;\n          }\n        }\n\n        try {\n          // Attribute to 'teardown' because worker fixtures are not perceived as a part of a test.\n          await this._fixtureRunner.teardownScope('worker', testInfo, { type: 'teardown', slot: teardownSlot });\n        } catch (error) {\n          firstWorkerCleanupError = firstWorkerCleanupError ?? error;\n        }\n\n        if (firstWorkerCleanupError)\n          throw firstWorkerCleanupError;\n      }).catch(() => {});  // Ignore the top-level error, it is already inside TestInfo.errors.\n    }\n\n    const tracingSlot = { timeout: this._project.project.timeout, elapsed: 0 };\n    await testInfo._runAsStage({ title: 'stop tracing', runnable: { type: 'test', slot: tracingSlot } }, async () => {\n      await testInfo._tracing.stopIfNeeded();\n    }).catch(() => {});  // Ignore the top-level error, it is already inside TestInfo.errors.\n\n    testInfo.duration = (testInfo._timeoutManager.defaultSlot().elapsed + afterHooksSlot.elapsed) | 0;\n\n    this._currentTest = null;\n    setCurrentTestInfo(null);\n    this.dispatchEvent('testEnd', buildTestEndPayload(testInfo));\n\n    const preserveOutput = this._config.config.preserveOutput === 'always' ||\n      (this._config.config.preserveOutput === 'failures-only' && testInfo._isFailure());\n    if (!preserveOutput)\n      await removeFolders([testInfo.outputDir]);\n  }\n\n  private _collectHooksAndModifiers(suite: Suite, type: 'beforeAll' | 'beforeEach' | 'afterAll' | 'afterEach', testInfo: TestInfoImpl) {\n    type Runnable = { type: 'beforeEach' | 'afterEach' | 'beforeAll' | 'afterAll' | 'fixme' | 'skip' | 'slow' | 'fail', fn: Function, title: string, location: Location };\n    const runnables: Runnable[] = [];\n    for (const modifier of suite._modifiers) {\n      const modifierType = this._fixtureRunner.dependsOnWorkerFixturesOnly(modifier.fn, modifier.location) ? 'beforeAll' : 'beforeEach';\n      if (modifierType !== type)\n        continue;\n      const fn = async (fixtures: any) => {\n        const result = await modifier.fn(fixtures);\n        testInfo[modifier.type](!!result, modifier.description);\n      };\n      inheritFixtureNames(modifier.fn, fn);\n      runnables.push({\n        title: `${modifier.type} modifier`,\n        location: modifier.location,\n        type: modifier.type,\n        fn,\n      });\n    }\n    // Modifiers first, then hooks.\n    runnables.push(...suite._hooks.filter(hook => hook.type === type));\n    return runnables;\n  }\n\n  private async _runBeforeAllHooksForSuite(suite: Suite, testInfo: TestInfoImpl) {\n    if (this._activeSuites.has(suite))\n      return;\n    const extraAnnotations: Annotation[] = [];\n    this._activeSuites.set(suite, extraAnnotations);\n    await this._runAllHooksForSuite(suite, testInfo, 'beforeAll', extraAnnotations);\n  }\n\n  private async _runAllHooksForSuite(suite: Suite, testInfo: TestInfoImpl, type: 'beforeAll' | 'afterAll', extraAnnotations?: Annotation[]) {\n    // Always run all the hooks, and capture the first error.\n    let firstError: Error | undefined;\n    for (const hook of this._collectHooksAndModifiers(suite, type, testInfo)) {\n      try {\n        await testInfo._runAsStage({ title: hook.title, stepInfo: { category: 'hook', location: hook.location } }, async () => {\n          // Separate time slot for each beforeAll/afterAll hook.\n          const timeSlot = { timeout: this._project.project.timeout, elapsed: 0 };\n          const runnable = { type: hook.type, slot: timeSlot, location: hook.location };\n          const existingAnnotations = new Set(testInfo.annotations);\n          try {\n            await this._fixtureRunner.resolveParametersAndRunFunction(hook.fn, testInfo, 'all-hooks-only', runnable);\n          } finally {\n            if (extraAnnotations) {\n              // Inherit all annotations defined in the beforeAll/modifer to all tests in the suite.\n              const newAnnotations = testInfo.annotations.filter(a => !existingAnnotations.has(a));\n              extraAnnotations.push(...newAnnotations);\n            }\n            // Each beforeAll/afterAll hook has its own scope for test fixtures. Attribute to the same runnable and timeSlot.\n            // Note: we must teardown even after hook fails, because we'll run more hooks.\n            await this._fixtureRunner.teardownScope('test', testInfo, runnable);\n          }\n        });\n      } catch (error) {\n        firstError = firstError ?? error;\n        // Skip in beforeAll/modifier prevents others from running.\n        if (type === 'beforeAll' && (error instanceof SkipError))\n          break;\n        if (type === 'beforeAll' && !this._skipRemainingTestsInSuite) {\n          // This will inform dispatcher that we should not run more tests from this group\n          // because we had a beforeAll error.\n          // This behavior avoids getting the same common error for each test.\n          this._skipRemainingTestsInSuite = suite;\n        }\n      }\n    }\n    if (firstError)\n      throw firstError;\n  }\n\n  private async _runAfterAllHooksForSuite(suite: Suite, testInfo: TestInfoImpl) {\n    if (!this._activeSuites.has(suite))\n      return;\n    this._activeSuites.delete(suite);\n    await this._runAllHooksForSuite(suite, testInfo, 'afterAll');\n  }\n\n  private async _runEachHooksForSuites(suites: Suite[], type: 'beforeEach' | 'afterEach', testInfo: TestInfoImpl, slot?: TimeSlot) {\n    // Always run all the hooks, unless one of the times out, and capture the first error.\n    let firstError: Error | undefined;\n    const hooks = suites.map(suite => this._collectHooksAndModifiers(suite, type, testInfo)).flat();\n    for (const hook of hooks) {\n      const runnable = { type: hook.type, location: hook.location, slot };\n      if (testInfo._timeoutManager.isTimeExhaustedFor(runnable)) {\n        // Do not run hooks that will timeout right away.\n        continue;\n      }\n      try {\n        await testInfo._runAsStage({ title: hook.title, stepInfo: { category: 'hook', location: hook.location } }, async () => {\n          await this._fixtureRunner.resolveParametersAndRunFunction(hook.fn, testInfo, 'test', runnable);\n        });\n      } catch (error) {\n        firstError = firstError ?? error;\n        // Skip in modifier prevents others from running.\n        if (error instanceof SkipError)\n          break;\n      }\n    }\n    if (firstError)\n      throw firstError;\n  }\n}\n\nfunction buildTestBeginPayload(testInfo: TestInfoImpl): TestBeginPayload {\n  return {\n    testId: testInfo.testId,\n    startWallTime: testInfo._startWallTime,\n  };\n}\n\nfunction buildTestEndPayload(testInfo: TestInfoImpl): TestEndPayload {\n  return {\n    testId: testInfo.testId,\n    duration: testInfo.duration,\n    status: testInfo.status!,\n    errors: testInfo.errors,\n    hasNonRetriableError: testInfo._hasNonRetriableError,\n    expectedStatus: testInfo.expectedStatus,\n    annotations: testInfo.annotations,\n    timeout: testInfo.timeout,\n  };\n}\n\nfunction getSuites(test: TestCase | undefined): Suite[] {\n  const suites: Suite[] = [];\n  for (let suite: Suite | undefined = test?.parent; suite; suite = suite.parent)\n    suites.push(suite);\n  suites.reverse();  // Put root suite first.\n  return suites;\n}\n\nfunction formatTestTitle(test: TestCase, projectName: string) {\n  // file, ...describes, test\n  const [, ...titles] = test.titlePath();\n  const location = `${relativeFilePath(test.location.file)}:${test.location.line}:${test.location.column}`;\n  const projectTitle = projectName ? `[${projectName}] › ` : '';\n  return `${projectTitle}${location} › ${titles.join(' › ')}`;\n}\n\nfunction calculateMaxTimeout(t1: number, t2: number) {\n  // Zero means \"no timeout\".\n  return (!t1 || !t2) ? 0 : Math.max(t1, t2);\n}\n\nexport const create = (params: WorkerInitParams) => new WorkerMain(params);\n"],"mappings":"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"}