{"version":3,"file":"program.js","names":["_fs","_interopRequireDefault","require","_path","_runner","_utils","_util","_html","_merge","_configLoader","_config","_program","_base","_testServer","_interopRequireWildcard","testServer","_watchMode","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","obj","addTestCommand","program","command","description","options","testOptions","sort","b","replace","localeCompare","forEach","name","option","action","args","opts","runTests","console","error","gracefullyProcessExitDoNotHang","addHelpText","addListFilesCommand","hidden","listTestFiles","addClearCacheCommand","configInternal","loadConfigFromFileRestartIfNeeded","config","clearCacheAndLogToConsole","addFindRelatedTestFilesCommand","files","withRunnerAndMutedWrite","runner","findRelatedTestFiles","addDevServerCommand","Runner","status","runDevServer","exitCode","addTestServerCommand","runTestServer","addShowReportCommand","report","showHTMLReport","host","port","addMergeReportsCommand","dir","mergeReports","builtInReporters","map","join","defaultReporter","startProfiling","cliOverrides","overridesFromOptions","ui","uiHost","uiPort","onlyChanged","Error","runUIMode","undefined","grep","grepInvert","project","headed","reporter","Array","isArray","workers","timeout","outputDir","updateSnapshots","stopProfiling","process","env","PWTEST_WATCH","runWatchModeLoop","resolveConfigLocation","projects","deps","lastFailed","lastRunInfo","readLastRunInfo","testIdMatcher","id","failedTests","includes","cliArgs","cliGrep","cliOnlyChanged","cliGrepInvert","cliListOnly","list","cliProjectFilter","cliPassWithNoTests","passWithNoTests","cliFailOnFlakyTests","failOnFlakyTests","runAllTests","configFile","callback","stdoutWrite","stdout","write","bind","c","stderr","result","JSON","stringify","serializeError","location","prepareErrorStack","stack","reportDir","loadEmptyConfigForMergeReports","path","resolve","cwd","dirStat","fs","promises","stat","catch","isDirectory","reporterDescriptions","resolveReporterOption","rootDirOverride","rootDir","createMergedReport","shardPair","shard","split","parseInt","overrides","forbidOnly","fullyParallel","globalTimeout","maxFailures","x","output","quiet","repeatEach","retries","current","total","tsconfig","ignoreSnapshots","browser","browserOpt","toLowerCase","browserNames","browserName","use","debug","headless","PWDEBUG","trace","kTraceModes","mode","length","resolveReporter","localPath","existsSync","paths","defaultTimeout"],"sources":["../src/program.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\n\nimport type { Command } from 'playwright-core/lib/utilsBundle';\nimport fs from 'fs';\nimport path from 'path';\nimport { Runner, readLastRunInfo } from './runner/runner';\nimport { stopProfiling, startProfiling, gracefullyProcessExitDoNotHang } from 'playwright-core/lib/utils';\nimport { serializeError } from './util';\nimport { showHTMLReport } from './reporters/html';\nimport { createMergedReport } from './reporters/merge';\nimport { loadConfigFromFileRestartIfNeeded, loadEmptyConfigForMergeReports, resolveConfigLocation } from './common/configLoader';\nimport type { ConfigCLIOverrides } from './common/ipc';\nimport type { TestError } from '../types/testReporter';\nimport type { TraceMode } from '../types/test';\nimport { builtInReporters, defaultReporter, defaultTimeout } from './common/config';\nimport { program } from 'playwright-core/lib/cli/program';\nexport { program } from 'playwright-core/lib/cli/program';\nimport type { ReporterDescription } from '../types/test';\nimport { prepareErrorStack } from './reporters/base';\nimport * as testServer from './runner/testServer';\nimport { clearCacheAndLogToConsole } from './runner/testServer';\nimport { runWatchModeLoop } from './runner/watchMode';\n\nfunction addTestCommand(program: Command) {\n  const command = program.command('test [test-filter...]');\n  command.description('run tests with Playwright Test');\n  const options = testOptions.sort((a, b) => a[0].replace(/-/g, '').localeCompare(b[0].replace(/-/g, '')));\n  options.forEach(([name, description]) => command.option(name, description));\n  command.action(async (args, opts) => {\n    try {\n      await runTests(args, opts);\n    } catch (e) {\n      console.error(e);\n      gracefullyProcessExitDoNotHang(1);\n    }\n  });\n  command.addHelpText('afterAll', `\nArguments [test-filter...]:\n  Pass arguments to filter test files. Each argument is treated as a regular expression. Matching is performed against the absolute file paths.\n\nExamples:\n  $ npx playwright test my.spec.ts\n  $ npx playwright test some.spec.ts:42\n  $ npx playwright test --headed\n  $ npx playwright test --project=webkit`);\n}\n\nfunction addListFilesCommand(program: Command) {\n  const command = program.command('list-files [file-filter...]', { hidden: true });\n  command.description('List files with Playwright Test tests');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.option('--project <project-name...>', `Only run tests from the specified list of projects, supports '*' wildcard (default: list all projects)`);\n  command.action(async (args, opts) => listTestFiles(opts));\n}\n\nfunction addClearCacheCommand(program: Command) {\n  const command = program.command('clear-cache', { hidden: true });\n  command.description('clears build and test caches');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.action(async opts => {\n    const configInternal = await loadConfigFromFileRestartIfNeeded(opts.config);\n    if (!configInternal)\n      return;\n    await clearCacheAndLogToConsole(configInternal);\n  });\n}\n\nfunction addFindRelatedTestFilesCommand(program: Command) {\n  const command = program.command('find-related-test-files [source-files...]', { hidden: true });\n  command.description('Returns the list of related tests to the given files');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.action(async (files, options) => {\n    await withRunnerAndMutedWrite(options.config, runner => runner.findRelatedTestFiles('in-process', files));\n  });\n}\n\nfunction addDevServerCommand(program: Command) {\n  const command = program.command('dev-server', { hidden: true });\n  command.description('start dev server');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.action(async options => {\n    const config = await loadConfigFromFileRestartIfNeeded(options.config);\n    if (!config)\n      return;\n    const runner = new Runner(config);\n    const { status } = await runner.runDevServer();\n    const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n    gracefullyProcessExitDoNotHang(exitCode);\n  });\n}\n\nfunction addTestServerCommand(program: Command) {\n  const command = program.command('test-server', { hidden: true });\n  command.description('start test server');\n  command.option('-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`);\n  command.option('--host <host>', 'Host to start the server on', 'localhost');\n  command.option('--port <port>', 'Port to start the server on', '0');\n  command.action(opts => runTestServer(opts));\n}\n\nfunction addShowReportCommand(program: Command) {\n  const command = program.command('show-report [report]');\n  command.description('show HTML report');\n  command.action((report, options) => showHTMLReport(report, options.host, +options.port));\n  command.option('--host <host>', 'Host to serve report on', 'localhost');\n  command.option('--port <port>', 'Port to serve report on', '9323');\n  command.addHelpText('afterAll', `\nArguments [report]:\n  When specified, opens given report, otherwise opens last generated report.\n\nExamples:\n  $ npx playwright show-report\n  $ npx playwright show-report playwright-report`);\n}\n\nfunction addMergeReportsCommand(program: Command) {\n  const command = program.command('merge-reports [dir]', { hidden: true });\n  command.description('merge multiple blob reports (for sharded tests) into a single report');\n  command.action(async (dir, options) => {\n    try {\n      await mergeReports(dir, options);\n    } catch (e) {\n      console.error(e);\n      gracefullyProcessExitDoNotHang(1);\n    }\n  });\n  command.option('-c, --config <file>', `Configuration file. Can be used to specify additional configuration for the output report.`);\n  command.option('--reporter <reporter>', `Reporter to use, comma-separated, can be ${builtInReporters.map(name => `\"${name}\"`).join(', ')} (default: \"${defaultReporter}\")`);\n  command.addHelpText('afterAll', `\nArguments [dir]:\n  Directory containing blob reports.\n\nExamples:\n  $ npx playwright merge-reports playwright-report`);\n}\n\nasync function runTests(args: string[], opts: { [key: string]: any }) {\n  await startProfiling();\n  const cliOverrides = overridesFromOptions(opts);\n\n  if (opts.ui || opts.uiHost || opts.uiPort) {\n    if (opts.onlyChanged)\n      throw new Error(`--only-changed is not supported in UI mode. If you'd like that to change, see https://github.com/microsoft/playwright/issues/15075 for more details.`);\n\n    const status = await testServer.runUIMode(opts.config, {\n      host: opts.uiHost,\n      port: opts.uiPort ? +opts.uiPort : undefined,\n      args,\n      grep: opts.grep as string | undefined,\n      grepInvert: opts.grepInvert as string | undefined,\n      project: opts.project || undefined,\n      headed: opts.headed,\n      reporter: Array.isArray(opts.reporter) ? opts.reporter : opts.reporter ? [opts.reporter] : undefined,\n      workers: cliOverrides.workers,\n      timeout: cliOverrides.timeout,\n      outputDir: cliOverrides.outputDir,\n      updateSnapshots: cliOverrides.updateSnapshots,\n    });\n    await stopProfiling('runner');\n    if (status === 'restarted')\n      return;\n    const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n    gracefullyProcessExitDoNotHang(exitCode);\n    return;\n  }\n\n  if (process.env.PWTEST_WATCH) {\n    if (opts.onlyChanged)\n      throw new Error(`--only-changed is not supported in watch mode. If you'd like that to change, file an issue and let us know about your usecase for it.`);\n\n    const status = await runWatchModeLoop(\n        resolveConfigLocation(opts.config),\n        {\n          projects: opts.project,\n          files: args,\n          grep: opts.grep\n        }\n    );\n    await stopProfiling('runner');\n    if (status === 'restarted')\n      return;\n    const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n    gracefullyProcessExitDoNotHang(exitCode);\n    return;\n  }\n\n  const config = await loadConfigFromFileRestartIfNeeded(opts.config, cliOverrides, opts.deps === false);\n  if (!config)\n    return;\n\n  if (opts.lastFailed) {\n    const lastRunInfo = await readLastRunInfo(config);\n    config.testIdMatcher = id => lastRunInfo.failedTests.includes(id);\n  }\n\n  config.cliArgs = args;\n  config.cliGrep = opts.grep as string | undefined;\n  config.cliOnlyChanged = opts.onlyChanged === true ? 'HEAD' : opts.onlyChanged;\n  config.cliGrepInvert = opts.grepInvert as string | undefined;\n  config.cliListOnly = !!opts.list;\n  config.cliProjectFilter = opts.project || undefined;\n  config.cliPassWithNoTests = !!opts.passWithNoTests;\n  config.cliFailOnFlakyTests = !!opts.failOnFlakyTests;\n\n  const runner = new Runner(config);\n  const status = await runner.runAllTests();\n  await stopProfiling('runner');\n  const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n  gracefullyProcessExitDoNotHang(exitCode);\n}\n\nasync function runTestServer(opts: { [key: string]: any }) {\n  const host = opts.host || 'localhost';\n  const port = opts.port ? +opts.port : 0;\n  const status = await testServer.runTestServer(opts.config, { host, port });\n  if (status === 'restarted')\n    return;\n  const exitCode = status === 'interrupted' ? 130 : (status === 'passed' ? 0 : 1);\n  gracefullyProcessExitDoNotHang(exitCode);\n}\n\nexport async function withRunnerAndMutedWrite(configFile: string | undefined, callback: (runner: Runner) => Promise<any>) {\n  // Redefine process.stdout.write in case config decides to pollute stdio.\n  const stdoutWrite = process.stdout.write.bind(process.stdout);\n  process.stdout.write = ((a: any, b: any, c: any) => process.stderr.write(a, b, c)) as any;\n  try {\n    const config = await loadConfigFromFileRestartIfNeeded(configFile);\n    if (!config)\n      return;\n    const runner = new Runner(config);\n    const result = await callback(runner);\n    stdoutWrite(JSON.stringify(result, undefined, 2), () => {\n      gracefullyProcessExitDoNotHang(0);\n    });\n  } catch (e) {\n    const error: TestError = serializeError(e);\n    error.location = prepareErrorStack(e.stack).location;\n    stdoutWrite(JSON.stringify({ error }, undefined, 2), () => {\n      gracefullyProcessExitDoNotHang(0);\n    });\n  }\n}\n\nasync function listTestFiles(opts: { [key: string]: any }) {\n  await withRunnerAndMutedWrite(opts.config, async runner => {\n    return await runner.listTestFiles();\n  });\n}\n\nasync function mergeReports(reportDir: string | undefined, opts: { [key: string]: any }) {\n  const configFile = opts.config;\n  const config = configFile ? await loadConfigFromFileRestartIfNeeded(configFile) : await loadEmptyConfigForMergeReports();\n  if (!config)\n    return;\n\n  const dir = path.resolve(process.cwd(), reportDir || '');\n  const dirStat = await fs.promises.stat(dir).catch(e => null);\n  if (!dirStat)\n    throw new Error('Directory does not exist: ' + dir);\n  if (!dirStat.isDirectory())\n    throw new Error(`\"${dir}\" is not a directory`);\n  let reporterDescriptions: ReporterDescription[] | undefined = resolveReporterOption(opts.reporter);\n  if (!reporterDescriptions && configFile)\n    reporterDescriptions = config.config.reporter;\n  if (!reporterDescriptions)\n    reporterDescriptions = [[defaultReporter]];\n  const rootDirOverride = configFile ? config.config.rootDir : undefined;\n  await createMergedReport(config, dir, reporterDescriptions!, rootDirOverride);\n  gracefullyProcessExitDoNotHang(0);\n}\n\nfunction overridesFromOptions(options: { [key: string]: any }): ConfigCLIOverrides {\n  const shardPair = options.shard ? options.shard.split('/').map((t: string) => parseInt(t, 10)) : undefined;\n  const overrides: ConfigCLIOverrides = {\n    forbidOnly: options.forbidOnly ? true : undefined,\n    fullyParallel: options.fullyParallel ? true : undefined,\n    globalTimeout: options.globalTimeout ? parseInt(options.globalTimeout, 10) : undefined,\n    maxFailures: options.x ? 1 : (options.maxFailures ? parseInt(options.maxFailures, 10) : undefined),\n    outputDir: options.output ? path.resolve(process.cwd(), options.output) : undefined,\n    quiet: options.quiet ? options.quiet : undefined,\n    repeatEach: options.repeatEach ? parseInt(options.repeatEach, 10) : undefined,\n    retries: options.retries ? parseInt(options.retries, 10) : undefined,\n    reporter: resolveReporterOption(options.reporter),\n    shard: shardPair ? { current: shardPair[0], total: shardPair[1] } : undefined,\n    timeout: options.timeout ? parseInt(options.timeout, 10) : undefined,\n    tsconfig: options.tsconfig ? path.resolve(process.cwd(), options.tsconfig) : undefined,\n    ignoreSnapshots: options.ignoreSnapshots ? !!options.ignoreSnapshots : undefined,\n    updateSnapshots: options.updateSnapshots ? 'all' as const : undefined,\n    workers: options.workers,\n  };\n\n  if (options.browser) {\n    const browserOpt = options.browser.toLowerCase();\n    if (!['all', 'chromium', 'firefox', 'webkit'].includes(browserOpt))\n      throw new Error(`Unsupported browser \"${options.browser}\", must be one of \"all\", \"chromium\", \"firefox\" or \"webkit\"`);\n    const browserNames = browserOpt === 'all' ? ['chromium', 'firefox', 'webkit'] : [browserOpt];\n    overrides.projects = browserNames.map(browserName => {\n      return {\n        name: browserName,\n        use: { browserName },\n      };\n    });\n  }\n\n  if (options.headed || options.debug)\n    overrides.use = { headless: false };\n  if (!options.ui && options.debug) {\n    overrides.debug = true;\n    process.env.PWDEBUG = '1';\n  }\n  if (!options.ui && options.trace) {\n    if (!kTraceModes.includes(options.trace))\n      throw new Error(`Unsupported trace mode \"${options.trace}\", must be one of ${kTraceModes.map(mode => `\"${mode}\"`).join(', ')}`);\n    overrides.use = overrides.use || {};\n    overrides.use.trace = options.trace;\n  }\n  return overrides;\n}\n\nfunction resolveReporterOption(reporter?: string): ReporterDescription[] | undefined {\n  if (!reporter || !reporter.length)\n    return undefined;\n  return reporter.split(',').map((r: string) => [resolveReporter(r)]);\n}\n\nfunction resolveReporter(id: string) {\n  if (builtInReporters.includes(id as any))\n    return id;\n  const localPath = path.resolve(process.cwd(), id);\n  if (fs.existsSync(localPath))\n    return localPath;\n  return require.resolve(id, { paths: [process.cwd()] });\n}\n\nconst kTraceModes: TraceMode[] = ['on', 'off', 'on-first-retry', 'on-all-retries', 'retain-on-failure', 'retain-on-first-failure'];\n\nconst testOptions: [string, string][] = [\n  ['--browser <browser>', `Browser to use for tests, one of \"all\", \"chromium\", \"firefox\" or \"webkit\" (default: \"chromium\")`],\n  ['-c, --config <file>', `Configuration file, or a test directory with optional \"playwright.config.{m,c}?{js,ts}\"`],\n  ['--debug', `Run tests with Playwright Inspector. Shortcut for \"PWDEBUG=1\" environment variable and \"--timeout=0 --max-failures=1 --headed --workers=1\" options`],\n  ['--fail-on-flaky-tests', `Fail if any test is flagged as flaky (default: false)`],\n  ['--forbid-only', `Fail if test.only is called (default: false)`],\n  ['--fully-parallel', `Run all tests in parallel (default: false)`],\n  ['--global-timeout <timeout>', `Maximum time this test suite can run in milliseconds (default: unlimited)`],\n  ['-g, --grep <grep>', `Only run tests matching this regular expression (default: \".*\")`],\n  ['-gv, --grep-invert <grep>', `Only run tests that do not match this regular expression`],\n  ['--headed', `Run tests in headed browsers (default: headless)`],\n  ['--ignore-snapshots', `Ignore screenshot and snapshot expectations`],\n  ['--last-failed', `Only re-run the failures`],\n  ['--list', `Collect all the tests and report them, but do not run`],\n  ['--max-failures <N>', `Stop after the first N failures`],\n  ['--no-deps', 'Do not run project dependencies'],\n  ['--output <dir>', `Folder for output artifacts (default: \"test-results\")`],\n  ['--only-changed [ref]', `Only run test files that have been changed between 'HEAD' and 'ref'. Defaults to running all uncommitted changes. Only supports Git.`],\n  ['--pass-with-no-tests', `Makes test run succeed even if no tests were found`],\n  ['--project <project-name...>', `Only run tests from the specified list of projects, supports '*' wildcard (default: run all projects)`],\n  ['--quiet', `Suppress stdio`],\n  ['--repeat-each <N>', `Run each test N times (default: 1)`],\n  ['--reporter <reporter>', `Reporter to use, comma-separated, can be ${builtInReporters.map(name => `\"${name}\"`).join(', ')} (default: \"${defaultReporter}\")`],\n  ['--retries <retries>', `Maximum retry count for flaky tests, zero for no retries (default: no retries)`],\n  ['--shard <shard>', `Shard tests and execute only the selected shard, specify in the form \"current/all\", 1-based, for example \"3/5\"`],\n  ['--timeout <timeout>', `Specify test timeout threshold in milliseconds, zero for unlimited (default: ${defaultTimeout})`],\n  ['--trace <mode>', `Force tracing mode, can be ${kTraceModes.map(mode => `\"${mode}\"`).join(', ')}`],\n  ['--tsconfig <path>', `Path to a single tsconfig applicable to all imported files (default: look up tsconfig for each imported file separately)`],\n  ['--ui', `Run tests in interactive UI mode`],\n  ['--ui-host <host>', 'Host to serve UI on; specifying this option opens UI in a browser tab'],\n  ['--ui-port <port>', 'Port to serve UI on, 0 for any free port; specifying this option opens UI in a browser tab'],\n  ['-u, --update-snapshots', `Update snapshots with actual results (default: only create missing snapshots)`],\n  ['-j, --workers <workers>', `Number of concurrent workers or percentage of logical CPU cores, use 1 to run in a single worker (default: 50%)`],\n  ['-x', `Stop after the first failure`],\n];\n\naddTestCommand(program);\naddShowReportCommand(program);\naddListFilesCommand(program);\naddMergeReportsCommand(program);\naddClearCacheCommand(program);\naddFindRelatedTestFilesCommand(program);\naddDevServerCommand(program);\naddTestServerCommand(program);\n"],"mappings":"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"}