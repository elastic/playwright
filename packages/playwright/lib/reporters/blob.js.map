{"version":3,"file":"blob.js","names":["_fs","_interopRequireDefault","require","_path","_utils","_utilsBundle","_stream","_teleEmitter","_zipBundle","_base","obj","__esModule","default","currentBlobReportVersion","exports","BlobReporter","TeleReporterEmitter","constructor","options","message","_messages","push","_attachments","_options","_salt","_config","fileName","endsWith","Error","createGuid","onConfigure","config","_config$shard","metadata","version","userAgent","getUserAgent","name","process","env","PWTEST_BOT_NAME","shard","undefined","pathSeparator","path","sep","method","params","onEnd","result","zipFileName","_prepareOutputFile","zipFile","yazl","ZipFile","zipFinishPromise","ManualPromise","finishPromise","catch","e","on","error","reject","outputStream","pipe","fs","createWriteStream","resolve","originalPath","zipEntryPath","_fs$statSync","statSync","throwIfNoEntry","isFile","addFile","lines","map","m","JSON","stringify","content","Readable","from","addReadStream","end","outputFile","outputDir","resolveOutputFile","_defaultReportName","PWTEST_BLOB_DO_NOT_REMOVE","removeFolders","promises","mkdir","dirname","recursive","reportName","_commandHash","sanitizeForFilePath","paddedNumber","current","padStart","total","length","_serializeAttachments","attachments","attachment","sha1","calculateSha1","extension","mime","getExtension","contentType","newPath"],"sources":["../../src/reporters/blob.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { ManualPromise, calculateSha1, createGuid, getUserAgent, removeFolders, sanitizeForFilePath } from 'playwright-core/lib/utils';\nimport { mime } from 'playwright-core/lib/utilsBundle';\nimport { Readable } from 'stream';\nimport type { EventEmitter } from 'events';\nimport type { FullConfig, FullResult, TestResult } from '../../types/testReporter';\nimport type { JsonAttachment, JsonEvent } from '../isomorphic/teleReceiver';\nimport { TeleReporterEmitter } from './teleEmitter';\nimport { yazl } from 'playwright-core/lib/zipBundle';\nimport { resolveOutputFile } from './base';\n\ntype BlobReporterOptions = {\n  configDir: string;\n  outputDir?: string;\n  fileName?: string;\n  outputFile?: string;\n  _commandHash: string;\n};\n\nexport const currentBlobReportVersion = 2;\n\nexport type BlobReportMetadata = {\n  version: number;\n  userAgent: string;\n  name?: string;\n  shard?: { total: number, current: number };\n  pathSeparator?: string;\n};\n\nexport class BlobReporter extends TeleReporterEmitter {\n  private readonly _messages: JsonEvent[] = [];\n  private readonly _attachments: { originalPath: string, zipEntryPath: string }[] = [];\n  private readonly _options: BlobReporterOptions;\n  private readonly _salt: string;\n  private _config!: FullConfig;\n\n  constructor(options: BlobReporterOptions) {\n    super(message => this._messages.push(message));\n    this._options = options;\n    if (this._options.fileName && !this._options.fileName.endsWith('.zip'))\n      throw new Error(`Blob report file name must end with .zip extension: ${this._options.fileName}`);\n    this._salt = createGuid();\n  }\n\n  override onConfigure(config: FullConfig) {\n    const metadata: BlobReportMetadata = {\n      version: currentBlobReportVersion,\n      userAgent: getUserAgent(),\n      name: process.env.PWTEST_BOT_NAME,\n      shard: config.shard ?? undefined,\n      pathSeparator: path.sep,\n    };\n    this._messages.push({\n      method: 'onBlobReportMetadata',\n      params: metadata\n    });\n\n    this._config = config;\n    super.onConfigure(config);\n  }\n\n  override async onEnd(result: FullResult): Promise<void> {\n    await super.onEnd(result);\n\n    const zipFileName = await this._prepareOutputFile();\n\n    const zipFile = new yazl.ZipFile();\n    const zipFinishPromise = new ManualPromise<undefined>();\n    const finishPromise = zipFinishPromise.catch(e => {\n      throw new Error(`Failed to write report ${zipFileName}: ` + e.message);\n    });\n\n    (zipFile as any as EventEmitter).on('error', error => zipFinishPromise.reject(error));\n    zipFile.outputStream.pipe(fs.createWriteStream(zipFileName)).on('close', () => {\n      zipFinishPromise.resolve(undefined);\n    }).on('error', error => zipFinishPromise.reject(error));\n\n    for (const { originalPath, zipEntryPath } of this._attachments) {\n      if (!fs.statSync(originalPath, { throwIfNoEntry: false })?.isFile())\n        continue;\n      zipFile.addFile(originalPath, zipEntryPath);\n    }\n\n    const lines = this._messages.map(m => JSON.stringify(m) + '\\n');\n    const content = Readable.from(lines);\n    zipFile.addReadStream(content, 'report.jsonl');\n    zipFile.end();\n\n    await finishPromise;\n  }\n\n  private async _prepareOutputFile() {\n    const { outputFile, outputDir } = resolveOutputFile('BLOB', {\n      ...this._options,\n      default: {\n        fileName: this._defaultReportName(this._config),\n        outputDir: 'blob-report',\n      }\n    })!;\n    if (!process.env.PWTEST_BLOB_DO_NOT_REMOVE)\n      await removeFolders([outputDir!]);\n    await fs.promises.mkdir(path.dirname(outputFile), { recursive: true });\n    return outputFile;\n  }\n\n  private _defaultReportName(config: FullConfig) {\n    let reportName = 'report';\n    if (this._options._commandHash)\n      reportName += '-' + sanitizeForFilePath(this._options._commandHash);\n    if (config.shard) {\n      const paddedNumber = `${config.shard.current}`.padStart(`${config.shard.total}`.length, '0');\n      reportName = `${reportName}-${paddedNumber}`;\n    }\n    return `${reportName}.zip`;\n  }\n\n  override _serializeAttachments(attachments: TestResult['attachments']): JsonAttachment[] {\n    return super._serializeAttachments(attachments).map(attachment => {\n      if (!attachment.path)\n        return attachment;\n      // Add run guid to avoid clashes between shards.\n      const sha1 = calculateSha1(attachment.path + this._salt);\n      const extension = mime.getExtension(attachment.contentType) || 'dat';\n      const newPath = `resources/${sha1}.${extension}`;\n      this._attachments.push({ originalPath: attachment.path, zipEntryPath: newPath });\n      return {\n        ...attachment,\n        path: newPath,\n      };\n    });\n  }\n}\n"],"mappings":"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"}