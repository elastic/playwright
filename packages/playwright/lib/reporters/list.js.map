{"version":3,"file":"list.js","names":["_utilsBundle","require","_base","_utils","DOES_NOT_SUPPORT_UTF8_IN_TERMINAL","process","platform","env","TERM_PROGRAM","WT_SESSION","POSITIVE_STATUS_MARK","NEGATIVE_STATUS_MARK","ListReporter","BaseReporter","constructor","options","_lastRow","_lastColumn","_testRows","Map","_stepRows","_resultIndex","_stepIndex","_needNewLine","_printSteps","getAsBooleanFromENV","printSteps","printsToStdio","onBegin","suite","startingMessage","generateStartingMessage","console","log","onTestBegin","test","result","index","String","size","set","isTTY","_maybeWriteNewLine","prefix","_testPrefix","line","colors","dim","formatTestTitle","config","_retrySuffix","_appendLine","onStdOut","chunk","_dumpToStdio","stdout","onStdErr","stderr","getStepIndex","testIndex","step","has","get","ordinal","lastStepOrdinalSymbol","stepIndex","onStepBegin","category","title","stepSuffix","_updateLine","onStepEnd","parent","text","error","red","milliseconds","duration","_updateOrAppendLine","write","_updateLineCountAndNewLineFlagForOutput","length","ttyWidth","ch","stream","quiet","toString","onTestEnd","status","green","cyan","statusMark","expectedStatus","row","fitToScreen","PW_TEST_DEBUG_REPORTERS","_updateLineForTTY","statusMarkLength","stripAnsiEscapes","repeat","retry","yellow","onError","message","formatError","enabled","onEnd","epilogue","Symbol","_default","exports","default"],"sources":["../../src/reporters/list.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ms as milliseconds } from 'playwright-core/lib/utilsBundle';\nimport { colors, BaseReporter, formatError, formatTestTitle, isTTY, stepSuffix, stripAnsiEscapes, ttyWidth } from './base';\nimport type { FullResult, Suite, TestCase, TestError, TestResult, TestStep } from '../../types/testReporter';\nimport { getAsBooleanFromENV } from 'playwright-core/lib/utils';\n\n// Allow it in the Visual Studio Code Terminal and the new Windows Terminal\nconst DOES_NOT_SUPPORT_UTF8_IN_TERMINAL = process.platform === 'win32' && process.env.TERM_PROGRAM !== 'vscode' && !process.env.WT_SESSION;\nconst POSITIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'ok' : '✓';\nconst NEGATIVE_STATUS_MARK = DOES_NOT_SUPPORT_UTF8_IN_TERMINAL ? 'x' : '✘';\n\nclass ListReporter extends BaseReporter {\n  private _lastRow = 0;\n  private _lastColumn = 0;\n  private _testRows = new Map<TestCase, number>();\n  private _stepRows = new Map<TestStep, number>();\n  private _resultIndex = new Map<TestResult, string>();\n  private _stepIndex = new Map<TestStep, string>();\n  private _needNewLine = false;\n  private _printSteps: boolean;\n\n  constructor(options: { printSteps?: boolean } = {}) {\n    super();\n    this._printSteps = getAsBooleanFromENV('PLAYWRIGHT_LIST_PRINT_STEPS', options.printSteps);\n  }\n\n  override printsToStdio() {\n    return true;\n  }\n\n  override onBegin(suite: Suite) {\n    super.onBegin(suite);\n    const startingMessage = this.generateStartingMessage();\n    if (startingMessage) {\n      console.log(startingMessage);\n      console.log();\n    }\n  }\n\n  override onTestBegin(test: TestCase, result: TestResult) {\n    super.onTestBegin(test, result);\n\n    const index = String(this._resultIndex.size + 1);\n    this._resultIndex.set(result, index);\n\n    if (!isTTY)\n      return;\n    this._maybeWriteNewLine();\n    this._testRows.set(test, this._lastRow);\n    const prefix = this._testPrefix(index, '');\n    const line = colors.dim(formatTestTitle(this.config, test)) + this._retrySuffix(result);\n    this._appendLine(line, prefix);\n  }\n\n  override onStdOut(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdOut(chunk, test, result);\n    this._dumpToStdio(test, chunk, process.stdout);\n  }\n\n  override onStdErr(chunk: string | Buffer, test?: TestCase, result?: TestResult) {\n    super.onStdErr(chunk, test, result);\n    this._dumpToStdio(test, chunk, process.stderr);\n  }\n\n  private getStepIndex(testIndex: string, result: TestResult, step: TestStep): string {\n    if (this._stepIndex.has(step))\n      return this._stepIndex.get(step)!;\n\n    const ordinal = ((result as any)[lastStepOrdinalSymbol] || 0) + 1;\n    (result as any)[lastStepOrdinalSymbol] = ordinal;\n    const stepIndex = `${testIndex}.${ordinal}`;\n    this._stepIndex.set(step, stepIndex);\n    return stepIndex;\n  }\n\n  override onStepBegin(test: TestCase, result: TestResult, step: TestStep) {\n    super.onStepBegin(test, result, step);\n    if (step.category !== 'test.step')\n      return;\n    const testIndex = this._resultIndex.get(result) || '';\n\n    if (!isTTY)\n      return;\n\n    if (this._printSteps) {\n      this._maybeWriteNewLine();\n      this._stepRows.set(step, this._lastRow);\n      const prefix = this._testPrefix(this.getStepIndex(testIndex, result, step), '');\n      const line = test.title + colors.dim(stepSuffix(step));\n      this._appendLine(line, prefix);\n    } else {\n      this._updateLine(this._testRows.get(test)!, colors.dim(formatTestTitle(this.config, test, step)) + this._retrySuffix(result), this._testPrefix(testIndex, ''));\n    }\n  }\n\n  override onStepEnd(test: TestCase, result: TestResult, step: TestStep) {\n    super.onStepEnd(test, result, step);\n    if (step.category !== 'test.step')\n      return;\n\n    const testIndex = this._resultIndex.get(result) || '';\n    if (!this._printSteps) {\n      if (isTTY)\n        this._updateLine(this._testRows.get(test)!, colors.dim(formatTestTitle(this.config, test, step.parent)) + this._retrySuffix(result), this._testPrefix(testIndex, ''));\n      return;\n    }\n\n    const index = this.getStepIndex(testIndex, result, step);\n    const title = isTTY ? test.title + colors.dim(stepSuffix(step)) : formatTestTitle(this.config, test, step);\n    const prefix = this._testPrefix(index, '');\n    let text = '';\n    if (step.error)\n      text = colors.red(title);\n    else\n      text = title;\n    text += colors.dim(` (${milliseconds(step.duration)})`);\n\n    this._updateOrAppendLine(this._stepRows.get(step)!, text, prefix);\n  }\n\n  private _maybeWriteNewLine() {\n    if (this._needNewLine) {\n      this._needNewLine = false;\n      process.stdout.write('\\n');\n    }\n  }\n\n  private _updateLineCountAndNewLineFlagForOutput(text: string) {\n    this._needNewLine = text[text.length - 1] !== '\\n';\n    if (!ttyWidth)\n      return;\n    for (const ch of text) {\n      if (ch === '\\n') {\n        this._lastColumn = 0;\n        ++this._lastRow;\n        continue;\n      }\n      ++this._lastColumn;\n      if (this._lastColumn > ttyWidth) {\n        this._lastColumn = 0;\n        ++this._lastRow;\n      }\n    }\n  }\n\n  private _dumpToStdio(test: TestCase | undefined, chunk: string | Buffer, stream: NodeJS.WriteStream) {\n    if (this.config.quiet)\n      return;\n    const text = chunk.toString('utf-8');\n    this._updateLineCountAndNewLineFlagForOutput(text);\n    stream.write(chunk);\n  }\n\n  override onTestEnd(test: TestCase, result: TestResult) {\n    super.onTestEnd(test, result);\n\n    const title = formatTestTitle(this.config, test);\n    let prefix = '';\n    let text = '';\n\n    // In TTY mode test index is incremented in onTestStart\n    // and in non-TTY mode it is incremented onTestEnd.\n    let index = this._resultIndex.get(result);\n    if (!index) {\n      index = String(this._resultIndex.size + 1);\n      this._resultIndex.set(result, index);\n    }\n\n    if (result.status === 'skipped') {\n      prefix = this._testPrefix(index, colors.green('-'));\n      // Do not show duration for skipped.\n      text = colors.cyan(title) + this._retrySuffix(result);\n    } else {\n      const statusMark = result.status === 'passed' ? POSITIVE_STATUS_MARK : NEGATIVE_STATUS_MARK;\n      if (result.status === test.expectedStatus) {\n        prefix = this._testPrefix(index, colors.green(statusMark));\n        text = title;\n      } else {\n        prefix = this._testPrefix(index, colors.red(statusMark));\n        text = colors.red(title);\n      }\n      text += this._retrySuffix(result) + colors.dim(` (${milliseconds(result.duration)})`);\n    }\n\n    this._updateOrAppendLine(this._testRows.get(test)!, text, prefix);\n  }\n\n  private _updateOrAppendLine(row: number, text: string, prefix: string) {\n    if (isTTY) {\n      this._updateLine(row, text, prefix);\n    } else {\n      this._maybeWriteNewLine();\n      this._appendLine(text, prefix);\n    }\n  }\n\n  private _appendLine(text: string, prefix: string) {\n    const line = prefix + this.fitToScreen(text, prefix);\n    if (process.env.PW_TEST_DEBUG_REPORTERS) {\n      process.stdout.write('#' + this._lastRow + ' : ' + line + '\\n');\n    } else {\n      process.stdout.write(line);\n      process.stdout.write('\\n');\n    }\n    ++this._lastRow;\n  }\n\n  private _updateLine(row: number, text: string, prefix: string) {\n    const line = prefix + this.fitToScreen(text, prefix);\n    if (process.env.PW_TEST_DEBUG_REPORTERS)\n      process.stdout.write('#' + row + ' : ' + line + '\\n');\n    else\n      this._updateLineForTTY(row, line);\n  }\n\n  private _updateLineForTTY(row: number, line: string) {\n    // Go up if needed\n    if (row !== this._lastRow)\n      process.stdout.write(`\\u001B[${this._lastRow - row}A`);\n    // Erase line, go to the start\n    process.stdout.write('\\u001B[2K\\u001B[0G');\n    process.stdout.write(line);\n    // Go down if needed.\n    if (row !== this._lastRow)\n      process.stdout.write(`\\u001B[${this._lastRow - row}E`);\n  }\n\n  private _testPrefix(index: string, statusMark: string) {\n    const statusMarkLength = stripAnsiEscapes(statusMark).length;\n    return '  ' + statusMark + ' '.repeat(3 - statusMarkLength) + colors.dim(index + ' ');\n  }\n\n  private _retrySuffix(result: TestResult) {\n    return (result.retry ? colors.yellow(` (retry #${result.retry})`) : '');\n  }\n\n  override onError(error: TestError): void {\n    super.onError(error);\n    this._maybeWriteNewLine();\n    const message = formatError(error, colors.enabled).message + '\\n';\n    this._updateLineCountAndNewLineFlagForOutput(message);\n    process.stdout.write(message);\n  }\n\n  override async onEnd(result: FullResult) {\n    await super.onEnd(result);\n    process.stdout.write('\\n');\n    this.epilogue(true);\n  }\n}\n\nconst lastStepOrdinalSymbol = Symbol('lastStepOrdinal');\n\nexport default ListReporter;\n"],"mappings":"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"}