{"version":3,"file":"merge.js","names":["_fs","_interopRequireDefault","require","_path","_teleReceiver","_stringInternPool","_reporters","_multiplexer","_utils","_blob","_util","obj","__esModule","default","createMergedReport","config","dir","reporterDescriptions","rootDirOverride","_eventData$pathSepara","reporters","createReporters","multiplexer","Multiplexer","stringPool","StringInternPool","printStatus","printsToStdio","printStatusToStdout","shardFiles","sortedShardFiles","length","Error","eventData","mergeEvents","pathSeparator","path","sep","pathSeparatorFromMetadata","receiver","TeleReporterReceiver","mergeProjects","mergeTestCases","resolvePath","rootDir","relativePath","internString","configOverrides","dispatchEvents","events","event","method","dispatch","prologue","reportFile","eventPatchers","metadata","reports","reportJsonl","fs","promises","readFile","parseTestEvents","JsonStringInternalizer","traverse","patchers","push","AttachmentPathPatcher","name","GlobalErrorPatcher","patchEvents","epilogue","commonEventNames","commonEvents","Set","commonEventRegex","RegExp","join","parseCommonEvents","splitBufferLines","map","line","toString","filter","test","JSON","parse","has","buffer","lines","start","end","indexOf","slice","extractAndParseReports","internalizer","shardEvents","mkdir","recursive","reportNames","UniqueFileNameGenerator","file","absolutePath","relativeFilePath","zipFile","ZipFile","entryNames","entries","entryName","sort","fileName","content","read","endsWith","makeUnique","parsedEvents","findMetadata","modernizer","modernize","version","localPath","writeFile","close","_events$","params","currentBlobReportVersion","shardReportFiles","_blobs$","configureEvents","projectEvents","endEvents","blobs","a","b","_a$metadata$name","_b$metadata$name","_a$metadata$shard$cur","_a$metadata$shard","_b$metadata$shard$cur","_b$metadata$shard","nameA","nameB","localeCompare","shardA","shard","current","shardB","globalTestIdSet","i","JsonEventPatchers","IdsPatcher","String","PathSeparatorPatcher","mergeConfigureEvents","undefined","mergeEndEvents","configFile","globalTimeout","maxFailures","workers","mergeConfigs","rootDirs","e","size","to","from","actualWorkers","startTime","Date","now","status","duration","shardResult","result","Math","min","max","files","readdir","message","process","stdout","write","constructor","_usedNames","add","extension","extname","substring","index","candidate","botName","salt","_stringPool","_botName","_salt","_testIdsMap","_globalTestIdSet","Map","patchEvent","_onProject","project","testId","_mapTestId","_project$metadata","suites","forEach","suite","_updateTestIds","entry","_updateTestId","tags","unshift","t1","get","t2","set","_resourceDir","attachment","attachments","_from","_to","jsonEvent","_updateProject","testResult","errors","error","_updateLocation","location","_updatePath","step","outputDir","testDir","snapshotDir","_updateSuite","isFileSuite","title","text","split","_prefix","stack","patcher","BlobModernizer","fromVersion","_modernize","call","_modernize_1_to_2","modernizeSuite","newSuites","tests","remainder"],"sources":["../../src/reporters/merge.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport type { ReporterDescription } from '../../types/test';\nimport type { FullConfigInternal } from '../common/config';\nimport type { JsonConfig, JsonEvent, JsonFullResult, JsonLocation, JsonProject, JsonSuite, JsonTestCase, JsonTestResultEnd, JsonTestStepStart } from '../isomorphic/teleReceiver';\nimport { TeleReporterReceiver } from '../isomorphic/teleReceiver';\nimport { JsonStringInternalizer, StringInternPool } from '../isomorphic/stringInternPool';\nimport { createReporters } from '../runner/reporters';\nimport { Multiplexer } from './multiplexer';\nimport { ZipFile } from 'playwright-core/lib/utils';\nimport { currentBlobReportVersion, type BlobReportMetadata } from './blob';\nimport { relativeFilePath } from '../util';\nimport type { TestError } from '../../types/testReporter';\nimport type * as blobV1 from './versions/blobV1';\n\ntype StatusCallback = (message: string) => void;\n\ntype ReportData = {\n  eventPatchers: JsonEventPatchers;\n  reportFile: string;\n  metadata: BlobReportMetadata;\n};\n\nexport async function createMergedReport(config: FullConfigInternal, dir: string, reporterDescriptions: ReporterDescription[], rootDirOverride: string | undefined) {\n  const reporters = await createReporters(config, 'merge', false, reporterDescriptions);\n  const multiplexer = new Multiplexer(reporters);\n  const stringPool = new StringInternPool();\n\n  let printStatus: StatusCallback = () => {};\n  if (!multiplexer.printsToStdio()) {\n    printStatus = printStatusToStdout;\n    printStatus(`merging reports from ${dir}`);\n  }\n\n  const shardFiles = await sortedShardFiles(dir);\n  if (shardFiles.length === 0)\n    throw new Error(`No report files found in ${dir}`);\n  const eventData = await mergeEvents(dir, shardFiles, stringPool, printStatus, rootDirOverride);\n  // If explicit config is provided, use platform path separator, otherwise use the one from the report (if any).\n  const pathSeparator = rootDirOverride ? path.sep : (eventData.pathSeparatorFromMetadata ?? path.sep);\n  const receiver = new TeleReporterReceiver(multiplexer, {\n    mergeProjects: false,\n    mergeTestCases: false,\n    resolvePath: (rootDir, relativePath) => stringPool.internString(rootDir + pathSeparator + relativePath),\n    configOverrides: config.config,\n  });\n  printStatus(`processing test events`);\n\n  const dispatchEvents = async (events: JsonEvent[]) => {\n    for (const event of events) {\n      if (event.method === 'onEnd')\n        printStatus(`building final report`);\n      await receiver.dispatch(event);\n      if (event.method === 'onEnd')\n        printStatus(`finished building report`);\n    }\n  };\n\n  await dispatchEvents(eventData.prologue);\n  for (const { reportFile, eventPatchers, metadata } of eventData.reports) {\n    const reportJsonl = await fs.promises.readFile(reportFile);\n    const events = parseTestEvents(reportJsonl);\n    new JsonStringInternalizer(stringPool).traverse(events);\n    eventPatchers.patchers.push(new AttachmentPathPatcher(dir));\n    if (metadata.name)\n      eventPatchers.patchers.push(new GlobalErrorPatcher(metadata.name));\n    eventPatchers.patchEvents(events);\n    await dispatchEvents(events);\n  }\n  await dispatchEvents(eventData.epilogue);\n}\n\nconst commonEventNames = ['onBlobReportMetadata', 'onConfigure', 'onProject', 'onBegin', 'onEnd'];\nconst commonEvents = new Set(commonEventNames);\nconst commonEventRegex = new RegExp(`${commonEventNames.join('|')}`);\n\nfunction parseCommonEvents(reportJsonl: Buffer): JsonEvent[] {\n  return splitBufferLines(reportJsonl)\n      .map(line => line.toString('utf8'))\n      .filter(line => commonEventRegex.test(line)) // quick filter\n      .map(line => JSON.parse(line) as JsonEvent)\n      .filter(event => commonEvents.has(event.method));\n}\n\nfunction parseTestEvents(reportJsonl: Buffer): JsonEvent[] {\n  return splitBufferLines(reportJsonl)\n      .map(line => line.toString('utf8'))\n      .filter(line => line.length)\n      .map(line => JSON.parse(line) as JsonEvent)\n      .filter(event => !commonEvents.has(event.method));\n}\n\nfunction splitBufferLines(buffer: Buffer) {\n  const lines = [];\n  let start = 0;\n  while (start < buffer.length) {\n    // 0x0A is the byte for '\\n'\n    const end = buffer.indexOf(0x0A, start);\n    if (end === -1) {\n      lines.push(buffer.slice(start));\n      break;\n    }\n    lines.push(buffer.slice(start, end));\n    start = end + 1;\n  }\n  return lines;\n}\n\nasync function extractAndParseReports(dir: string, shardFiles: string[], internalizer: JsonStringInternalizer, printStatus: StatusCallback) {\n  const shardEvents: { file: string, localPath: string, metadata: BlobReportMetadata, parsedEvents: JsonEvent[] }[] = [];\n  await fs.promises.mkdir(path.join(dir, 'resources'), { recursive: true });\n\n  const reportNames = new UniqueFileNameGenerator();\n  for (const file of shardFiles) {\n    const absolutePath = path.join(dir, file);\n    printStatus(`extracting: ${relativeFilePath(absolutePath)}`);\n    const zipFile = new ZipFile(absolutePath);\n    const entryNames = await zipFile.entries();\n    for (const entryName of entryNames.sort()) {\n      let fileName = path.join(dir, entryName);\n      const content = await zipFile.read(entryName);\n      if (entryName.endsWith('.jsonl')) {\n        fileName = reportNames.makeUnique(fileName);\n        let parsedEvents = parseCommonEvents(content);\n        // Passing reviver to JSON.parse doesn't work, as the original strings\n        // keep being used. To work around that we traverse the parsed events\n        // as a post-processing step.\n        internalizer.traverse(parsedEvents);\n        const metadata = findMetadata(parsedEvents, file);\n        parsedEvents = modernizer.modernize(metadata.version, parsedEvents);\n        shardEvents.push({\n          file,\n          localPath: fileName,\n          metadata,\n          parsedEvents\n        });\n      }\n      await fs.promises.writeFile(fileName, content);\n    }\n    zipFile.close();\n  }\n  return shardEvents;\n}\n\nfunction findMetadata(events: JsonEvent[], file: string): BlobReportMetadata {\n  if (events[0]?.method !== 'onBlobReportMetadata')\n    throw new Error(`No metadata event found in ${file}`);\n  const metadata = (events[0].params as BlobReportMetadata);\n  if (metadata.version > currentBlobReportVersion)\n    throw new Error(`Blob report ${file} was created with a newer version of Playwright.`);\n  return metadata;\n}\n\nasync function mergeEvents(dir: string, shardReportFiles: string[], stringPool: StringInternPool, printStatus: StatusCallback, rootDirOverride: string | undefined) {\n  const internalizer = new JsonStringInternalizer(stringPool);\n\n  const configureEvents: JsonEvent[] = [];\n  const projectEvents: JsonEvent[] = [];\n  const endEvents: JsonEvent[] = [];\n\n  const blobs = await extractAndParseReports(dir, shardReportFiles, internalizer, printStatus);\n  // Sort by (report name; shard; file name), so that salt generation below is deterministic when:\n  // - report names are unique;\n  // - report names are missing;\n  // - report names are clashing between shards.\n  blobs.sort((a, b) => {\n    const nameA = a.metadata.name ?? '';\n    const nameB = b.metadata.name ?? '';\n    if (nameA !== nameB)\n      return nameA.localeCompare(nameB);\n    const shardA = a.metadata.shard?.current ?? 0;\n    const shardB = b.metadata.shard?.current ?? 0;\n    if (shardA !== shardB)\n      return shardA - shardB;\n    return a.file.localeCompare(b.file);\n  });\n\n  printStatus(`merging events`);\n\n  const reports: ReportData[] = [];\n  const globalTestIdSet = new Set<string>();\n\n  for (let i = 0; i < blobs.length; ++i) {\n    // Generate unique salt for each blob.\n    const { parsedEvents, metadata, localPath } = blobs[i];\n    const eventPatchers = new JsonEventPatchers();\n    eventPatchers.patchers.push(new IdsPatcher(\n        stringPool,\n        metadata.name,\n        String(i),\n        globalTestIdSet,\n    ));\n    // Only patch path separators if we are merging reports with explicit config.\n    if (rootDirOverride)\n      eventPatchers.patchers.push(new PathSeparatorPatcher(metadata.pathSeparator));\n    eventPatchers.patchEvents(parsedEvents);\n\n    for (const event of parsedEvents) {\n      if (event.method === 'onConfigure')\n        configureEvents.push(event);\n      else if (event.method === 'onProject')\n        projectEvents.push(event);\n      else if (event.method === 'onEnd')\n        endEvents.push(event);\n    }\n\n    // Save information about the reports to stream their test events later.\n    reports.push({\n      eventPatchers,\n      reportFile: localPath,\n      metadata,\n    });\n  }\n\n  return {\n    prologue: [\n      mergeConfigureEvents(configureEvents, rootDirOverride),\n      ...projectEvents,\n      { method: 'onBegin', params: undefined },\n    ],\n    reports,\n    epilogue: [\n      mergeEndEvents(endEvents),\n      { method: 'onExit', params: undefined },\n    ],\n    pathSeparatorFromMetadata: blobs[0]?.metadata.pathSeparator,\n  };\n}\n\nfunction mergeConfigureEvents(configureEvents: JsonEvent[], rootDirOverride: string | undefined): JsonEvent {\n  if (!configureEvents.length)\n    throw new Error('No configure events found');\n  let config: JsonConfig = {\n    configFile: undefined,\n    globalTimeout: 0,\n    maxFailures: 0,\n    metadata: {\n    },\n    rootDir: '',\n    version: '',\n    workers: 0,\n  };\n  for (const event of configureEvents)\n    config = mergeConfigs(config, event.params.config);\n\n  if (rootDirOverride) {\n    config.rootDir = rootDirOverride;\n  } else {\n    const rootDirs = new Set(configureEvents.map(e => e.params.config.rootDir));\n    if (rootDirs.size > 1) {\n      throw new Error([\n        `Blob reports being merged were recorded with different test directories, and`,\n        `merging cannot proceed. This may happen if you are merging reports from`,\n        `machines with different environments, like different operating systems or`,\n        `if the tests ran with different playwright configs.`,\n        ``,\n        `You can force merge by specifying a merge config file with \"-c\" option. If`,\n        `you'd like all test paths to be correct, make sure 'testDir' in the merge config`,\n        `file points to the actual tests location.`,\n        ``,\n        `Found directories:`,\n        ...rootDirs\n      ].join('\\n'));\n    }\n  }\n\n  return {\n    method: 'onConfigure',\n    params: {\n      config,\n    }\n  };\n}\n\nfunction mergeConfigs(to: JsonConfig, from: JsonConfig): JsonConfig {\n  return {\n    ...to,\n    ...from,\n    metadata: {\n      ...to.metadata,\n      ...from.metadata,\n      actualWorkers: (to.metadata.actualWorkers || 0) + (from.metadata.actualWorkers || 0),\n    },\n    workers: to.workers + from.workers,\n  };\n}\n\nfunction mergeEndEvents(endEvents: JsonEvent[]): JsonEvent {\n  let startTime = endEvents.length ? 10000000000000 : Date.now();\n  let status: JsonFullResult['status'] = 'passed';\n  let duration: number = 0;\n\n  for (const event of endEvents) {\n    const shardResult: JsonFullResult = event.params.result;\n    if (shardResult.status === 'failed')\n      status = 'failed';\n    else if (shardResult.status === 'timedout' && status !== 'failed')\n      status = 'timedout';\n    else if (shardResult.status === 'interrupted' && status !== 'failed' && status !== 'timedout')\n      status = 'interrupted';\n    startTime = Math.min(startTime, shardResult.startTime);\n    duration = Math.max(duration, shardResult.duration);\n  }\n  const result: JsonFullResult = {\n    status,\n    startTime,\n    duration,\n  };\n  return {\n    method: 'onEnd',\n    params: {\n      result\n    }\n  };\n}\n\nasync function sortedShardFiles(dir: string) {\n  const files = await fs.promises.readdir(dir);\n  return files.filter(file => file.endsWith('.zip')).sort();\n}\n\nfunction printStatusToStdout(message: string) {\n  process.stdout.write(`${message}\\n`);\n}\n\nclass UniqueFileNameGenerator {\n  private _usedNames = new Set<string>();\n\n  makeUnique(name: string): string {\n    if (!this._usedNames.has(name)) {\n      this._usedNames.add(name);\n      return name;\n    }\n    const extension = path.extname(name);\n    name = name.substring(0, name.length - extension.length);\n    let index = 0;\n    while (true) {\n      const candidate = `${name}-${++index}${extension}`;\n      if (!this._usedNames.has(candidate)) {\n        this._usedNames.add(candidate);\n        return candidate;\n      }\n    }\n  }\n}\n\nclass IdsPatcher {\n  private _stringPool: StringInternPool;\n  private _botName: string | undefined;\n  private _salt: string;\n  private _testIdsMap: Map<string, string>;\n  private _globalTestIdSet: Set<string>;\n\n  constructor(\n    stringPool: StringInternPool,\n    botName: string | undefined,\n    salt: string,\n    globalTestIdSet: Set<string>,\n  ) {\n    this._stringPool = stringPool;\n    this._botName = botName;\n    this._salt = salt;\n    this._testIdsMap = new Map();\n    this._globalTestIdSet = globalTestIdSet;\n  }\n\n  patchEvent(event: JsonEvent) {\n    const { method, params } = event;\n    switch (method) {\n      case 'onProject':\n        this._onProject(params.project);\n        return;\n      case 'onTestBegin':\n      case 'onStepBegin':\n      case 'onStepEnd':\n      case 'onStdIO':\n        params.testId = this._mapTestId(params.testId);\n        return;\n      case 'onTestEnd':\n        params.test.testId = this._mapTestId(params.test.testId);\n        return;\n    }\n  }\n\n  private _onProject(project: JsonProject) {\n    project.metadata ??= {};\n    project.suites.forEach(suite => this._updateTestIds(suite));\n  }\n\n  private _updateTestIds(suite: JsonSuite) {\n    suite.entries.forEach(entry => {\n      if ('testId' in entry)\n        this._updateTestId(entry);\n      else\n        this._updateTestIds(entry);\n    });\n  }\n\n  private _updateTestId(test: JsonTestCase) {\n    test.testId = this._mapTestId(test.testId);\n    if (this._botName) {\n      test.tags = test.tags || [];\n      test.tags.unshift('@' + this._botName);\n    }\n  }\n\n  private _mapTestId(testId: string): string {\n    const t1 = this._stringPool.internString(testId);\n    if (this._testIdsMap.has(t1))\n      // already mapped\n      return this._testIdsMap.get(t1)!;\n    if (this._globalTestIdSet.has(t1)) {\n      // test id is used in another blob, so we need to salt it.\n      const t2 = this._stringPool.internString(testId + this._salt);\n      this._globalTestIdSet.add(t2);\n      this._testIdsMap.set(t1, t2);\n      return t2;\n    }\n    this._globalTestIdSet.add(t1);\n    this._testIdsMap.set(t1, t1);\n    return t1;\n  }\n}\n\nclass AttachmentPathPatcher {\n  constructor(private _resourceDir: string) {\n  }\n\n  patchEvent(event: JsonEvent) {\n    if (event.method !== 'onTestEnd')\n      return;\n    for (const attachment of (event.params.result as JsonTestResultEnd).attachments) {\n      if (!attachment.path)\n        continue;\n\n      attachment.path = path.join(this._resourceDir, attachment.path);\n    }\n  }\n}\n\nclass PathSeparatorPatcher {\n  private _from: string;\n  private _to: string;\n  constructor(from?: string) {\n    this._from = from ?? (path.sep === '/' ? '\\\\' : '/');\n    this._to = path.sep;\n  }\n\n  patchEvent(jsonEvent: JsonEvent) {\n    if (this._from === this._to)\n      return;\n    if (jsonEvent.method === 'onProject') {\n      this._updateProject(jsonEvent.params.project as JsonProject);\n      return;\n    }\n    if (jsonEvent.method === 'onTestEnd') {\n      const testResult = jsonEvent.params.result as JsonTestResultEnd;\n      testResult.errors.forEach(error => this._updateLocation(error.location));\n      testResult.attachments.forEach(attachment => {\n        if (attachment.path)\n          attachment.path = this._updatePath(attachment.path);\n      });\n      return;\n    }\n    if (jsonEvent.method === 'onStepBegin') {\n      const step = jsonEvent.params.step as JsonTestStepStart;\n      this._updateLocation(step.location);\n      return;\n    }\n  }\n\n  private _updateProject(project: JsonProject) {\n    project.outputDir = this._updatePath(project.outputDir);\n    project.testDir = this._updatePath(project.testDir);\n    project.snapshotDir = this._updatePath(project.snapshotDir);\n    project.suites.forEach(suite => this._updateSuite(suite, true));\n  }\n\n  private _updateSuite(suite: JsonSuite, isFileSuite: boolean = false) {\n    this._updateLocation(suite.location);\n    if (isFileSuite)\n      suite.title = this._updatePath(suite.title);\n    for (const entry of suite.entries) {\n      if ('testId' in entry)\n        this._updateLocation(entry.location);\n      else\n        this._updateSuite(entry);\n    }\n  }\n\n  private _updateLocation(location?: JsonLocation) {\n    if (location)\n      location.file = this._updatePath(location.file);\n  }\n\n  private _updatePath(text: string): string {\n    return text.split(this._from).join(this._to);\n  }\n}\n\nclass GlobalErrorPatcher {\n  private _prefix: string;\n\n  constructor(botName: string) {\n    this._prefix = `(${botName}) `;\n  }\n\n  patchEvent(event: JsonEvent) {\n    if (event.method !== 'onError')\n      return;\n    const error = event.params.error as TestError;\n    if (error.message !== undefined)\n      error.message = this._prefix + error.message;\n    if (error.stack !== undefined)\n      error.stack = this._prefix + error.stack;\n  }\n}\n\ninterface JsonEventPatcher {\n  patchEvent(event: JsonEvent): void;\n}\n\nclass JsonEventPatchers {\n  readonly patchers: JsonEventPatcher[] = [];\n\n  patchEvents(events: JsonEvent[]) {\n    for (const event of events) {\n      for (const patcher of this.patchers)\n        patcher.patchEvent(event);\n    }\n  }\n}\n\nclass BlobModernizer {\n  modernize(fromVersion: number, events: JsonEvent[]): JsonEvent[] {\n    const result = [];\n    for (const event of events)\n      result.push(...this._modernize(fromVersion, event));\n    return result;\n  }\n\n  private _modernize(fromVersion: number, event: JsonEvent): JsonEvent[] {\n    let events = [event];\n    for (let version = fromVersion; version < currentBlobReportVersion; ++version)\n      events = (this as any)[`_modernize_${version}_to_${version + 1}`].call(this, events);\n    return events;\n  }\n\n  _modernize_1_to_2(events: JsonEvent[]): JsonEvent[] {\n    return events.map(event => {\n      if (event.method === 'onProject') {\n        const modernizeSuite = (suite: blobV1.JsonSuite): JsonSuite => {\n          const newSuites = suite.suites.map(modernizeSuite);\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { suites, tests, ...remainder } = suite;\n          return { entries: [...newSuites, ...tests], ...remainder };\n        };\n        const project = event.params.project;\n        project.suites = project.suites.map(modernizeSuite);\n      }\n      return event;\n    });\n  }\n}\n\nconst modernizer = new BlobModernizer();\n"],"mappings":"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"}