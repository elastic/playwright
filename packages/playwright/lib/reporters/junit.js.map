{"version":3,"file":"junit.js","names":["_fs","_interopRequireDefault","require","_path","_base","_empty","_utils","obj","__esModule","default","JUnitReporter","EmptyReporter","constructor","options","_resolveOutputFile","config","configDir","suite","timestamp","totalTests","totalFailures","totalSkipped","resolvedOutputFile","stripANSIControlSequences","includeProjectInTestName","getAsBooleanFromENV","resolveOutputFile","outputFile","printsToStdio","onConfigure","onBegin","Date","onEnd","result","children","projectSuite","suites","fileSuite","push","_buildTestSuite","title","tokens","self","root","name","attributes","id","process","env","tests","failures","skipped","errors","time","duration","serializeXML","reportString","join","fs","promises","mkdir","path","dirname","recursive","writeFile","console","log","projectName","testCaseNamePrefix","test","allTests","outcome","ok","results","_addTestCase","entry","toISOString","hostname","suiteName","namePrefix","entries","_properties$children2","titlePath","slice","classname","reduce","acc","value","properties","annotation","annotations","_properties$children","property","type","description","length","message","basename","location","file","line","column","text","stripAnsiEscapes","formatFailure","systemOut","systemErr","stdout","map","item","toString","stderr","attachment","attachments","attachmentPath","relative","access","attrs","Object","escape","String","child","discouragedXMLCharacters","isCharacterData","replace","escapeRe","c","_default","exports"],"sources":["../../src/reporters/junit.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport type { FullConfig, FullResult, Suite, TestCase } from '../../types/testReporter';\nimport { formatFailure, resolveOutputFile, stripAnsiEscapes } from './base';\nimport EmptyReporter from './empty';\nimport { getAsBooleanFromENV } from 'playwright-core/lib/utils';\n\ntype JUnitOptions = {\n  outputFile?: string,\n  stripANSIControlSequences?: boolean,\n  includeProjectInTestName?: boolean,\n\n  configDir: string,\n};\n\nclass JUnitReporter extends EmptyReporter {\n  private config!: FullConfig;\n  private configDir: string;\n  private suite!: Suite;\n  private timestamp!: Date;\n  private totalTests = 0;\n  private totalFailures = 0;\n  private totalSkipped = 0;\n  private resolvedOutputFile: string | undefined;\n  private stripANSIControlSequences = false;\n  private includeProjectInTestName = false;\n\n  constructor(options: JUnitOptions) {\n    super();\n    this.stripANSIControlSequences = getAsBooleanFromENV('PLAYWRIGHT_JUNIT_STRIP_ANSI', !!options.stripANSIControlSequences);\n    this.includeProjectInTestName = getAsBooleanFromENV('PLAYWRIGHT_JUNIT_INCLUDE_PROJECT_IN_TEST_NAME', !!options.includeProjectInTestName);\n    this.configDir = options.configDir;\n    this.resolvedOutputFile = resolveOutputFile('JUNIT', options)?.outputFile;\n  }\n\n  override printsToStdio() {\n    return !this.resolvedOutputFile;\n  }\n\n  override onConfigure(config: FullConfig) {\n    this.config = config;\n  }\n\n  override onBegin(suite: Suite) {\n    this.suite = suite;\n    this.timestamp = new Date();\n  }\n\n  override async onEnd(result: FullResult) {\n    const children: XMLEntry[] = [];\n    for (const projectSuite of this.suite.suites) {\n      for (const fileSuite of projectSuite.suites)\n        children.push(await this._buildTestSuite(projectSuite.title, fileSuite));\n    }\n    const tokens: string[] = [];\n\n    const self = this;\n    const root: XMLEntry = {\n      name: 'testsuites',\n      attributes: {\n        id: process.env[`PLAYWRIGHT_JUNIT_SUITE_ID`] || '',\n        name: process.env[`PLAYWRIGHT_JUNIT_SUITE_NAME`] || '',\n        tests: self.totalTests,\n        failures: self.totalFailures,\n        skipped: self.totalSkipped,\n        errors: 0,\n        time: result.duration / 1000\n      },\n      children\n    };\n\n    serializeXML(root, tokens, this.stripANSIControlSequences);\n    const reportString = tokens.join('\\n');\n    if (this.resolvedOutputFile) {\n      await fs.promises.mkdir(path.dirname(this.resolvedOutputFile), { recursive: true });\n      await fs.promises.writeFile(this.resolvedOutputFile, reportString);\n    } else {\n      console.log(reportString);\n    }\n  }\n\n  private async _buildTestSuite(projectName: string, suite: Suite): Promise<XMLEntry> {\n    let tests = 0;\n    let skipped = 0;\n    let failures = 0;\n    let duration = 0;\n    const children: XMLEntry[] = [];\n    const testCaseNamePrefix = projectName && this.includeProjectInTestName ? `[${projectName}] ` : '';\n\n    for (const test of suite.allTests()){\n      ++tests;\n      if (test.outcome() === 'skipped')\n        ++skipped;\n      if (!test.ok())\n        ++failures;\n      for (const result of test.results)\n        duration += result.duration;\n      await this._addTestCase(suite.title, testCaseNamePrefix, test, children);\n    }\n\n    this.totalTests += tests;\n    this.totalSkipped += skipped;\n    this.totalFailures += failures;\n\n    const entry: XMLEntry = {\n      name: 'testsuite',\n      attributes: {\n        name: suite.title,\n        timestamp: this.timestamp.toISOString(),\n        hostname: projectName,\n        tests,\n        failures,\n        skipped,\n        time: duration / 1000,\n        errors: 0,\n      },\n      children\n    };\n\n    return entry;\n  }\n\n  private async _addTestCase(suiteName: string, namePrefix: string, test: TestCase, entries: XMLEntry[]) {\n    const entry = {\n      name: 'testcase',\n      attributes: {\n        // Skip root, project, file\n        name: namePrefix + test.titlePath().slice(3).join(' â€º '),\n        // filename\n        classname: suiteName,\n        time: (test.results.reduce((acc, value) => acc + value.duration, 0)) / 1000\n\n      },\n      children: [] as XMLEntry[]\n    };\n    entries.push(entry);\n\n    // Xray Test Management supports testcase level properties, where additional metadata may be provided\n    // some annotations are encoded as value attributes, other as cdata content; this implementation supports\n    // Xray JUnit extensions but it also agnostic, so other tools can also take advantage of this format\n    const properties: XMLEntry = {\n      name: 'properties',\n      children: [] as XMLEntry[]\n    };\n\n    for (const annotation of test.annotations) {\n      const property: XMLEntry = {\n        name: 'property',\n        attributes: {\n          name: annotation.type,\n          value: (annotation?.description ? annotation.description : '')\n        }\n      };\n      properties.children?.push(property);\n    }\n\n    if (properties.children?.length)\n      entry.children.push(properties);\n\n    if (test.outcome() === 'skipped') {\n      entry.children.push({ name: 'skipped' });\n      return;\n    }\n\n    if (!test.ok()) {\n      entry.children.push({\n        name: 'failure',\n        attributes: {\n          message: `${path.basename(test.location.file)}:${test.location.line}:${test.location.column} ${test.title}`,\n          type: 'FAILURE',\n        },\n        text: stripAnsiEscapes(formatFailure(this.config, test).message)\n      });\n    }\n\n    const systemOut: string[] = [];\n    const systemErr: string[] = [];\n    for (const result of test.results) {\n      systemOut.push(...result.stdout.map(item => item.toString()));\n      systemErr.push(...result.stderr.map(item => item.toString()));\n      for (const attachment of result.attachments) {\n        if (!attachment.path)\n          continue;\n\n        let attachmentPath = path.relative(this.configDir, attachment.path);\n        try {\n          if (this.resolvedOutputFile)\n            attachmentPath = path.relative(path.dirname(this.resolvedOutputFile), attachment.path);\n        } catch {\n          systemOut.push(`\\nWarning: Unable to make attachment path ${attachment.path} relative to report output file ${this.resolvedOutputFile}`);\n        }\n\n        try {\n          await fs.promises.access(attachment.path);\n          systemOut.push(`\\n[[ATTACHMENT|${attachmentPath}]]\\n`);\n        } catch {\n          systemErr.push(`\\nWarning: attachment ${attachmentPath} is missing`);\n        }\n      }\n    }\n    // Note: it is important to only produce a single system-out/system-err entry\n    // so that parsers in the wild understand it.\n    if (systemOut.length)\n      entry.children.push({ name: 'system-out', text: systemOut.join('') });\n    if (systemErr.length)\n      entry.children.push({ name: 'system-err', text: systemErr.join('') });\n  }\n}\n\ntype XMLEntry = {\n  name: string;\n  attributes?: { [name: string]: string | number | boolean };\n  children?: XMLEntry[];\n  text?: string;\n};\n\nfunction serializeXML(entry: XMLEntry, tokens: string[], stripANSIControlSequences: boolean) {\n  const attrs: string[] = [];\n  for (const [name, value] of Object.entries(entry.attributes || {}))\n    attrs.push(`${name}=\"${escape(String(value), stripANSIControlSequences, false)}\"`);\n  tokens.push(`<${entry.name}${attrs.length ? ' ' : ''}${attrs.join(' ')}>`);\n  for (const child of entry.children || [])\n    serializeXML(child, tokens, stripANSIControlSequences);\n  if (entry.text)\n    tokens.push(escape(entry.text, stripANSIControlSequences, true));\n  tokens.push(`</${entry.name}>`);\n}\n\n// See https://en.wikipedia.org/wiki/Valid_characters_in_XML\nconst discouragedXMLCharacters = /[\\u0000-\\u0008\\u000b-\\u000c\\u000e-\\u001f\\u007f-\\u0084\\u0086-\\u009f]/g;\n\nfunction escape(text: string, stripANSIControlSequences: boolean, isCharacterData: boolean): string {\n  if (stripANSIControlSequences)\n    text = stripAnsiEscapes(text);\n\n  if (isCharacterData) {\n    text = '<![CDATA[' + text.replace(/]]>/g, ']]&gt;') + ']]>';\n  } else {\n    const escapeRe = /[&\"'<>]/g;\n    text = text.replace(escapeRe, c => ({ '&': '&amp;', '\"': '&quot;', \"'\": '&apos;', '<': '&lt;', '>': '&gt;' }[c]!));\n  }\n\n  text = text.replace(discouragedXMLCharacters, '');\n  return text;\n}\n\nexport default JUnitReporter;\n"],"mappings":"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"}