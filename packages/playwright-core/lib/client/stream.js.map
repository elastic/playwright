{"version":3,"file":"stream.js","names":["_stream","require","_channelOwner","Stream","ChannelOwner","from","_object","constructor","parent","type","guid","initializer","stream","StreamImpl","_channel","exports","Readable","channel","_read","result","read","size","binary","byteLength","push","_destroy","error","callback","close","catch","e"],"sources":["../../src/client/stream.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Readable } from 'stream';\nimport type * as channels from '@protocol/channels';\nimport { ChannelOwner } from './channelOwner';\n\nexport class Stream extends ChannelOwner<channels.StreamChannel> {\n  static from(Stream: channels.StreamChannel): Stream {\n    return (Stream as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.StreamInitializer) {\n    super(parent, type, guid, initializer);\n  }\n\n  stream(): Readable {\n    return new StreamImpl(this._channel);\n  }\n}\n\nclass StreamImpl extends Readable {\n  private _channel: channels.StreamChannel;\n\n  constructor(channel: channels.StreamChannel) {\n    super();\n    this._channel = channel;\n  }\n\n  override async _read() {\n    const result = await this._channel.read({ size: 1024 * 1024 });\n    if (result.binary.byteLength)\n      this.push(result.binary);\n    else\n      this.push(null);\n  }\n\n  override _destroy(error: Error | null, callback: (error: Error | null | undefined) => void): void {\n    // Stream might be destroyed after the connection was closed.\n    this._channel.close().catch(e => null);\n    super._destroy(error, callback);\n  }\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMO,MAAME,MAAM,SAASC,0BAAY,CAAyB;EAC/D,OAAOC,IAAIA,CAACF,MAA8B,EAAU;IAClD,OAAQA,MAAM,CAASG,OAAO;EAChC;EAEAC,WAAWA,CAACC,MAAoB,EAAEC,IAAY,EAAEC,IAAY,EAAEC,WAAuC,EAAE;IACrG,KAAK,CAACH,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC;EACxC;EAEAC,MAAMA,CAAA,EAAa;IACjB,OAAO,IAAIC,UAAU,CAAC,IAAI,CAACC,QAAQ,CAAC;EACtC;AACF;AAACC,OAAA,CAAAZ,MAAA,GAAAA,MAAA;AAED,MAAMU,UAAU,SAASG,gBAAQ,CAAC;EAGhCT,WAAWA,CAACU,OAA+B,EAAE;IAC3C,KAAK,CAAC,CAAC;IAAC,KAHFH,QAAQ;IAId,IAAI,CAACA,QAAQ,GAAGG,OAAO;EACzB;EAEA,MAAeC,KAAKA,CAAA,EAAG;IACrB,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACL,QAAQ,CAACM,IAAI,CAAC;MAAEC,IAAI,EAAE,IAAI,GAAG;IAAK,CAAC,CAAC;IAC9D,IAAIF,MAAM,CAACG,MAAM,CAACC,UAAU,EAC1B,IAAI,CAACC,IAAI,CAACL,MAAM,CAACG,MAAM,CAAC,CAAC,KAEzB,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC;EACnB;EAESC,QAAQA,CAACC,KAAmB,EAAEC,QAAmD,EAAQ;IAChG;IACA,IAAI,CAACb,QAAQ,CAACc,KAAK,CAAC,CAAC,CAACC,KAAK,CAACC,CAAC,IAAI,IAAI,CAAC;IACtC,KAAK,CAACL,QAAQ,CAACC,KAAK,EAAEC,QAAQ,CAAC;EACjC;AACF"}