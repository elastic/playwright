{"version":3,"file":"writableStream.js","names":["_stream","require","_channelOwner","WritableStream","ChannelOwner","from","Stream","_object","constructor","parent","type","guid","initializer","stream","WritableStreamImpl","_channel","exports","Writable","channel","_write","chunk","encoding","callback","error","write","binary","Buffer","catch","e","_final","close"],"sources":["../../src/client/writableStream.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Writable } from 'stream';\nimport type * as channels from '@protocol/channels';\nimport { ChannelOwner } from './channelOwner';\n\nexport class WritableStream extends ChannelOwner<channels.WritableStreamChannel> {\n  static from(Stream: channels.WritableStreamChannel): WritableStream {\n    return (Stream as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.WritableStreamInitializer) {\n    super(parent, type, guid, initializer);\n  }\n\n  stream(): Writable {\n    return new WritableStreamImpl(this._channel);\n  }\n}\n\nclass WritableStreamImpl extends Writable {\n  private _channel: channels.WritableStreamChannel;\n\n  constructor(channel: channels.WritableStreamChannel) {\n    super();\n    this._channel = channel;\n  }\n\n  override async _write(chunk: Buffer | string, encoding: BufferEncoding, callback: (error?: Error | null) => void) {\n    const error = await this._channel.write({ binary: typeof chunk === 'string' ? Buffer.from(chunk) : chunk }).catch(e => e);\n    callback(error || null);\n  }\n\n  override async _final(callback: (error?: Error | null) => void) {\n    // Stream might be destroyed after the connection was closed.\n    const error = await this._channel.close().catch(e => e);\n    callback(error || null);\n  }\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,OAAA,GAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMO,MAAME,cAAc,SAASC,0BAAY,CAAiC;EAC/E,OAAOC,IAAIA,CAACC,MAAsC,EAAkB;IAClE,OAAQA,MAAM,CAASC,OAAO;EAChC;EAEAC,WAAWA,CAACC,MAAoB,EAAEC,IAAY,EAAEC,IAAY,EAAEC,WAA+C,EAAE;IAC7G,KAAK,CAACH,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC;EACxC;EAEAC,MAAMA,CAAA,EAAa;IACjB,OAAO,IAAIC,kBAAkB,CAAC,IAAI,CAACC,QAAQ,CAAC;EAC9C;AACF;AAACC,OAAA,CAAAb,cAAA,GAAAA,cAAA;AAED,MAAMW,kBAAkB,SAASG,gBAAQ,CAAC;EAGxCT,WAAWA,CAACU,OAAuC,EAAE;IACnD,KAAK,CAAC,CAAC;IAAC,KAHFH,QAAQ;IAId,IAAI,CAACA,QAAQ,GAAGG,OAAO;EACzB;EAEA,MAAeC,MAAMA,CAACC,KAAsB,EAAEC,QAAwB,EAAEC,QAAwC,EAAE;IAChH,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACR,QAAQ,CAACS,KAAK,CAAC;MAAEC,MAAM,EAAE,OAAOL,KAAK,KAAK,QAAQ,GAAGM,MAAM,CAACrB,IAAI,CAACe,KAAK,CAAC,GAAGA;IAAM,CAAC,CAAC,CAACO,KAAK,CAACC,CAAC,IAAIA,CAAC,CAAC;IACzHN,QAAQ,CAACC,KAAK,IAAI,IAAI,CAAC;EACzB;EAEA,MAAeM,MAAMA,CAACP,QAAwC,EAAE;IAC9D;IACA,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACR,QAAQ,CAACe,KAAK,CAAC,CAAC,CAACH,KAAK,CAACC,CAAC,IAAIA,CAAC,CAAC;IACvDN,QAAQ,CAACC,KAAK,IAAI,IAAI,CAAC;EACzB;AACF"}