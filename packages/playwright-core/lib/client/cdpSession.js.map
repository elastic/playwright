{"version":3,"file":"cdpSession.js","names":["_channelOwner","require","CDPSession","ChannelOwner","from","cdpSession","_object","constructor","parent","type","guid","initializer","_channel","on","method","params","emit","addListener","off","removeListener","once","send","result","detach","exports"],"sources":["../../src/client/cdpSession.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as channels from '@protocol/channels';\nimport { ChannelOwner } from './channelOwner';\nimport type { Protocol } from '../server/chromium/protocol';\nimport type * as api from '../../types/types';\n\nexport class CDPSession extends ChannelOwner<channels.CDPSessionChannel> implements api.CDPSession {\n  static from(cdpSession: channels.CDPSessionChannel): CDPSession {\n    return (cdpSession as any)._object;\n  }\n\n  constructor(parent: ChannelOwner, type: string, guid: string, initializer: channels.CDPSessionInitializer) {\n    super(parent, type, guid, initializer);\n\n    this._channel.on('event', ({ method, params }) => {\n      this.emit(method, params);\n    });\n\n    this.on = super.on;\n    this.addListener = super.addListener;\n    this.off = super.removeListener;\n    this.removeListener = super.removeListener;\n    this.once = super.once;\n  }\n\n  async send<T extends keyof Protocol.CommandParameters>(\n    method: T,\n    params?: Protocol.CommandParameters[T]\n  ): Promise<Protocol.CommandReturnValues[T]> {\n    const result = await this._channel.send({ method, params });\n    return result.result as Protocol.CommandReturnValues[T];\n  }\n\n  async detach() {\n    return await this._channel.detach();\n  }\n}\n"],"mappings":";;;;;;AAiBA,IAAAA,aAAA,GAAAC,OAAA;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOO,MAAMC,UAAU,SAASC,0BAAY,CAAuD;EACjG,OAAOC,IAAIA,CAACC,UAAsC,EAAc;IAC9D,OAAQA,UAAU,CAASC,OAAO;EACpC;EAEAC,WAAWA,CAACC,MAAoB,EAAEC,IAAY,EAAEC,IAAY,EAAEC,WAA2C,EAAE;IACzG,KAAK,CAACH,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,WAAW,CAAC;IAEtC,IAAI,CAACC,QAAQ,CAACC,EAAE,CAAC,OAAO,EAAE,CAAC;MAAEC,MAAM;MAAEC;IAAO,CAAC,KAAK;MAChD,IAAI,CAACC,IAAI,CAACF,MAAM,EAAEC,MAAM,CAAC;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACF,EAAE,GAAG,KAAK,CAACA,EAAE;IAClB,IAAI,CAACI,WAAW,GAAG,KAAK,CAACA,WAAW;IACpC,IAAI,CAACC,GAAG,GAAG,KAAK,CAACC,cAAc;IAC/B,IAAI,CAACA,cAAc,GAAG,KAAK,CAACA,cAAc;IAC1C,IAAI,CAACC,IAAI,GAAG,KAAK,CAACA,IAAI;EACxB;EAEA,MAAMC,IAAIA,CACRP,MAAS,EACTC,MAAsC,EACI;IAC1C,MAAMO,MAAM,GAAG,MAAM,IAAI,CAACV,QAAQ,CAACS,IAAI,CAAC;MAAEP,MAAM;MAAEC;IAAO,CAAC,CAAC;IAC3D,OAAOO,MAAM,CAACA,MAAM;EACtB;EAEA,MAAMC,MAAMA,CAAA,EAAG;IACb,OAAO,MAAM,IAAI,CAACX,QAAQ,CAACW,MAAM,CAAC,CAAC;EACrC;AACF;AAACC,OAAA,CAAAtB,UAAA,GAAAA,UAAA"}