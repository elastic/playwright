{"version":3,"file":"loader.js","names":["app","require","chromiumSwitches","process","argv","splice","indexOf","arg","match","commandLine","appendSwitch","originalWhenReady","whenReady","originalEmit","emit","bind","readyEventArgs","event","args","listenerCount","isReady","whenReadyCallback","whenReadyPromise","Promise","f","globalThis","__playwright_run"],"sources":["../../../src/server/electron/loader.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { app } = require('electron');\nconst { chromiumSwitches } = require('../chromium/chromiumSwitches');\n\n// Always pass user arguments first, see https://github.com/microsoft/playwright/issues/16614 and\n// https://github.com/microsoft/playwright/issues/29198.\n// [Electron, -r, loader.js[, --no-sandbox>], --inspect=0, --remote-debugging-port=0, ...args]\nprocess.argv.splice(1, process.argv.indexOf('--remote-debugging-port=0'));\n\nfor (const arg of chromiumSwitches) {\n  const match = arg.match(/--([^=]*)=?(.*)/)!;\n  app.commandLine.appendSwitch(match[1], match[2]);\n}\n\n// Defer ready event.\nconst originalWhenReady = app.whenReady();\nconst originalEmit = app.emit.bind(app);\nlet readyEventArgs: any[];\napp.emit = (event: string | symbol, ...args: any[]): boolean => {\n  if (event === 'ready') {\n    readyEventArgs = args;\n    return app.listenerCount('ready') > 0;\n  }\n  return originalEmit(event, ...args);\n};\n\nlet isReady = false;\nlet whenReadyCallback: (event: any) => any;\nconst whenReadyPromise = new Promise<void>(f => whenReadyCallback = f);\napp.isReady = () => isReady;\napp.whenReady = () => whenReadyPromise;\n\n(globalThis as any).__playwright_run = async () => {\n  // Wait for app to be ready to avoid browser initialization races.\n  const event = await originalWhenReady;\n  isReady = true;\n  whenReadyCallback(event);\n  originalEmit('ready', ...readyEventArgs);\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAI,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnC,MAAM;EAAEC;AAAiB,CAAC,GAAGD,OAAO,CAAC,8BAA8B,CAAC;;AAEpE;AACA;AACA;AACAE,OAAO,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,EAAEF,OAAO,CAACC,IAAI,CAACE,OAAO,CAAC,2BAA2B,CAAC,CAAC;AAEzE,KAAK,MAAMC,GAAG,IAAIL,gBAAgB,EAAE;EAClC,MAAMM,KAAK,GAAGD,GAAG,CAACC,KAAK,CAAC,iBAAiB,CAAE;EAC3CR,GAAG,CAACS,WAAW,CAACC,YAAY,CAACF,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;AAClD;;AAEA;AACA,MAAMG,iBAAiB,GAAGX,GAAG,CAACY,SAAS,CAAC,CAAC;AACzC,MAAMC,YAAY,GAAGb,GAAG,CAACc,IAAI,CAACC,IAAI,CAACf,GAAG,CAAC;AACvC,IAAIgB,cAAqB;AACzBhB,GAAG,CAACc,IAAI,GAAG,CAACG,KAAsB,EAAE,GAAGC,IAAW,KAAc;EAC9D,IAAID,KAAK,KAAK,OAAO,EAAE;IACrBD,cAAc,GAAGE,IAAI;IACrB,OAAOlB,GAAG,CAACmB,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC;EACvC;EACA,OAAON,YAAY,CAACI,KAAK,EAAE,GAAGC,IAAI,CAAC;AACrC,CAAC;AAED,IAAIE,OAAO,GAAG,KAAK;AACnB,IAAIC,iBAAsC;AAC1C,MAAMC,gBAAgB,GAAG,IAAIC,OAAO,CAAOC,CAAC,IAAIH,iBAAiB,GAAGG,CAAC,CAAC;AACtExB,GAAG,CAACoB,OAAO,GAAG,MAAMA,OAAO;AAC3BpB,GAAG,CAACY,SAAS,GAAG,MAAMU,gBAAgB;AAErCG,UAAU,CAASC,gBAAgB,GAAG,YAAY;EACjD;EACA,MAAMT,KAAK,GAAG,MAAMN,iBAAiB;EACrCS,OAAO,GAAG,IAAI;EACdC,iBAAiB,CAACJ,KAAK,CAAC;EACxBJ,YAAY,CAAC,OAAO,EAAE,GAAGG,cAAc,CAAC;AAC1C,CAAC"}