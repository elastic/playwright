{"version":3,"file":"bidiNetworkManager.js","names":["_eventsHelper","require","network","_interopRequireWildcard","bidi","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","BidiNetworkManager","constructor","bidiSession","page","onNavigationResponseStarted","_session","_requests","_page","_eventListeners","_onNavigationResponseStarted","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","_credentials","_intercepId","Map","eventsHelper","addEventListener","_onBeforeRequestSent","bind","_onResponseStarted","_onResponseCompleted","_onFetchError","_onAuthRequired","dispose","removeEventListeners","param","request","url","startsWith","redirectedFrom","redirectCount","frame","context","_frameManager","delete","_id","route","intercepts","_redirectedFrom$_orig","sendMayFail","headers","_originalRequestRoute","_alreadyContinuedHeaders","BidiRouteImpl","BidiRequest","requestStarted","params","getResponseBody","Error","timings","startTime","requestTime","relativeToStart","time","timing","requestStart","responseStart","domainLookupStart","dnsStart","domainLookupEnd","dnsEnd","connectStart","secureConnectionStart","tlsStart","connectEnd","response","Response","status","statusText","fromBidiHeaders","_serverAddrFinished","_securityDetailsFinished","setRawResponseHeaders","setResponseHeadersSize","headersSize","requestReceivedResponse","navigation","_existingResponse","setTransferSize","bodySize","setEncodedBodySize","isRedirected","responseEndTime","responseEnd","_requestFinished","_setHttpVersion","protocol","reportRequestFinished","_setFailureText","errorText","requestFailed","_params$response$auth","isBasic","authChallenges","some","challenge","scheme","credentials","_browserContext","_options","httpCredentials","action","type","username","password","setRequestInterception","value","_updateProtocolRequestInterception","setCredentials","initial","enabled","cachePromise","send","cacheBehavior","interceptPromise","Promise","resolve","undefined","phases","Network","InterceptPhase","AuthRequired","BeforeRequestSent","urlPatterns","then","intercept","all","exports","payload","_payload$navigation","_redirectedTo","postDataBuffer","Request","method","setRawRequestHeaders","_setBodySize","_setRequest","_finalRequest","session","requestId","_requestId","_request","continue","overrides","postData","map","header","name","toLowerCase","byteLength","toString","toBidiHeaders","body","Buffer","from","fulfill","base64body","isBase64","statusCode","reasonPhrase","abort","errorCode","bidiHeaders","result","push","bidiBytesValueToString"],"sources":["../../../src/server/bidi/bidiNetworkManager.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { RegisteredListener } from '../../utils/eventsHelper';\nimport { eventsHelper } from '../../utils/eventsHelper';\nimport type { Page } from '../page';\nimport * as network from '../network';\nimport type * as frames from '../frames';\nimport type * as types from '../types';\nimport * as bidi from './third_party/bidiProtocol';\nimport type { BidiSession } from './bidiConnection';\n\n\nexport class BidiNetworkManager {\n  private readonly _session: BidiSession;\n  private readonly _requests: Map<string, BidiRequest>;\n  private readonly _page: Page;\n  private readonly _eventListeners: RegisteredListener[];\n  private readonly _onNavigationResponseStarted: (params: bidi.Network.ResponseStartedParameters) => void;\n  private _userRequestInterceptionEnabled: boolean = false;\n  private _protocolRequestInterceptionEnabled: boolean = false;\n  private _credentials: types.Credentials | undefined;\n  private _intercepId: bidi.Network.Intercept | undefined;\n\n  constructor(bidiSession: BidiSession, page: Page, onNavigationResponseStarted: (params: bidi.Network.ResponseStartedParameters) => void) {\n    this._session = bidiSession;\n    this._requests = new Map();\n    this._page = page;\n    this._onNavigationResponseStarted = onNavigationResponseStarted;\n    this._eventListeners = [\n      eventsHelper.addEventListener(bidiSession, 'network.beforeRequestSent', this._onBeforeRequestSent.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.responseStarted', this._onResponseStarted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.responseCompleted', this._onResponseCompleted.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.fetchError', this._onFetchError.bind(this)),\n      eventsHelper.addEventListener(bidiSession, 'network.authRequired', this._onAuthRequired.bind(this)),\n    ];\n  }\n\n  dispose() {\n    eventsHelper.removeEventListeners(this._eventListeners);\n  }\n\n  private _onBeforeRequestSent(param: bidi.Network.BeforeRequestSentParameters) {\n    if (param.request.url.startsWith('data:'))\n      return;\n    const redirectedFrom = param.redirectCount ? (this._requests.get(param.request.request) || null) : null;\n    const frame = redirectedFrom ? redirectedFrom.request.frame() : (param.context ? this._page._frameManager.frame(param.context) : null);\n    if (!frame)\n      return;\n    if (redirectedFrom)\n      this._requests.delete(redirectedFrom._id);\n    let route;\n    if (param.intercepts) {\n      // We do not support intercepting redirects.\n      if (redirectedFrom) {\n        this._session.sendMayFail('network.continueRequest', {\n          request: param.request.request,\n          headers: redirectedFrom._originalRequestRoute?._alreadyContinuedHeaders,\n        });\n      } else {\n        route = new BidiRouteImpl(this._session, param.request.request);\n      }\n    }\n    const request = new BidiRequest(frame, redirectedFrom, param, route);\n    this._requests.set(request._id, request);\n    this._page._frameManager.requestStarted(request.request, route);\n  }\n\n  private _onResponseStarted(params: bidi.Network.ResponseStartedParameters) {\n    const request = this._requests.get(params.request.request);\n    if (!request)\n      return;\n    const getResponseBody = async () => {\n      throw new Error(`Response body is not available for requests in Bidi`);\n    };\n    const timings = params.request.timings;\n    const startTime = timings.requestTime;\n    function relativeToStart(time: number): number {\n      if (!time)\n        return -1;\n      return (time - startTime) / 1000;\n    }\n    const timing: network.ResourceTiming = {\n      startTime: startTime / 1000,\n      requestStart: relativeToStart(timings.requestStart),\n      responseStart: relativeToStart(timings.responseStart),\n      domainLookupStart: relativeToStart(timings.dnsStart),\n      domainLookupEnd: relativeToStart(timings.dnsEnd),\n      connectStart: relativeToStart(timings.connectStart),\n      secureConnectionStart: relativeToStart(timings.tlsStart),\n      connectEnd: relativeToStart(timings.connectEnd),\n    };\n    const response = new network.Response(request.request, params.response.status, params.response.statusText, fromBidiHeaders(params.response.headers), timing, getResponseBody, false);\n    response._serverAddrFinished();\n    response._securityDetailsFinished();\n    // \"raw\" headers are the same as \"provisional\" headers in Bidi.\n    response.setRawResponseHeaders(null);\n    response.setResponseHeadersSize(params.response.headersSize);\n    this._page._frameManager.requestReceivedResponse(response);\n    if (params.navigation)\n      this._onNavigationResponseStarted(params);\n  }\n\n  private _onResponseCompleted(params: bidi.Network.ResponseCompletedParameters) {\n    const request = this._requests.get(params.request.request);\n    if (!request)\n      return;\n    const response = request.request._existingResponse()!;\n    // TODO: body size is the encoded size\n    response.setTransferSize(params.response.bodySize);\n    response.setEncodedBodySize(params.response.bodySize);\n\n    // Keep redirected requests in the map for future reference as redirectedFrom.\n    const isRedirected = response.status() >= 300 && response.status() <= 399;\n    const responseEndTime = params.request.timings.responseEnd / 1000 - response.timing().startTime;\n    if (isRedirected) {\n      response._requestFinished(responseEndTime);\n    } else {\n      this._requests.delete(request._id);\n      response._requestFinished(responseEndTime);\n    }\n    response._setHttpVersion(params.response.protocol);\n    this._page._frameManager.reportRequestFinished(request.request, response);\n\n  }\n\n  private _onFetchError(params: bidi.Network.FetchErrorParameters) {\n    const request = this._requests.get(params.request.request);\n    if (!request)\n      return;\n    this._requests.delete(request._id);\n    const response = request.request._existingResponse();\n    if (response) {\n      response.setTransferSize(null);\n      response.setEncodedBodySize(null);\n      response._requestFinished(-1);\n    }\n    request.request._setFailureText(params.errorText);\n    // TODO: support canceled flag\n    this._page._frameManager.requestFailed(request.request, params.errorText === 'NS_BINDING_ABORTED');\n  }\n\n  private _onAuthRequired(params: bidi.Network.AuthRequiredParameters) {\n    const isBasic = params.response.authChallenges?.some(challenge => challenge.scheme.startsWith('Basic'));\n    const credentials = this._page._browserContext._options.httpCredentials;\n    if (isBasic && credentials) {\n      this._session.sendMayFail('network.continueWithAuth', {\n        request: params.request.request,\n        action: 'provideCredentials',\n        credentials: {\n          type: 'password',\n          username: credentials.username,\n          password: credentials.password,\n        }\n      });\n    } else {\n      this._session.sendMayFail('network.continueWithAuth', {\n        request: params.request.request,\n        action: 'default',\n      });\n    }\n  }\n\n  async setRequestInterception(value: boolean) {\n    this._userRequestInterceptionEnabled = value;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async setCredentials(credentials: types.Credentials | undefined) {\n    this._credentials = credentials;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async _updateProtocolRequestInterception(initial?: boolean) {\n    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;\n    if (enabled === this._protocolRequestInterceptionEnabled)\n      return;\n    this._protocolRequestInterceptionEnabled = enabled;\n    if (initial && !enabled)\n      return;\n    const cachePromise = this._session.send('network.setCacheBehavior', { cacheBehavior: enabled ? 'bypass' : 'default' });\n    let interceptPromise = Promise.resolve<any>(undefined);\n    if (enabled) {\n      interceptPromise = this._session.send('network.addIntercept', {\n        phases: [bidi.Network.InterceptPhase.AuthRequired, bidi.Network.InterceptPhase.BeforeRequestSent],\n        urlPatterns: [{ type: 'pattern' }],\n        // urlPatterns: [{ type: 'string', pattern: '*' }],\n      }).then(r => {\n        this._intercepId = r.intercept;\n      });\n    } else if (this._intercepId) {\n      interceptPromise = this._session.send('network.removeIntercept', { intercept: this._intercepId });\n      this._intercepId = undefined;\n    }\n    await Promise.all([cachePromise, interceptPromise]);\n  }\n}\n\n\nclass BidiRequest {\n  readonly request: network.Request;\n  readonly _id: string;\n  private _redirectedTo: BidiRequest | undefined;\n  // Only first request in the chain can be intercepted, so this will\n  // store the first and only Route in the chain (if any).\n  _originalRequestRoute: BidiRouteImpl | undefined;\n\n  constructor(frame: frames.Frame, redirectedFrom: BidiRequest | null, payload: bidi.Network.BeforeRequestSentParameters, route: BidiRouteImpl | undefined) {\n    this._id = payload.request.request;\n    if (redirectedFrom)\n      redirectedFrom._redirectedTo = this;\n    // TODO: missing in the spec?\n    const postDataBuffer = null;\n    this.request = new network.Request(frame._page._browserContext, frame, null, redirectedFrom ? redirectedFrom.request : null, payload.navigation ?? undefined,\n        payload.request.url, 'other', payload.request.method, postDataBuffer, fromBidiHeaders(payload.request.headers));\n    // \"raw\" headers are the same as \"provisional\" headers in Bidi.\n    this.request.setRawRequestHeaders(null);\n    this.request._setBodySize(payload.request.bodySize || 0);\n    this._originalRequestRoute = route ?? redirectedFrom?._originalRequestRoute;\n    route?._setRequest(this.request);\n  }\n\n  _finalRequest(): BidiRequest {\n    let request: BidiRequest = this;\n    while (request._redirectedTo)\n      request = request._redirectedTo;\n    return request;\n  }\n}\n\nclass BidiRouteImpl implements network.RouteDelegate {\n  private _requestId: bidi.Network.Request;\n  private _session: BidiSession;\n  private _request!: network.Request;\n  _alreadyContinuedHeaders: bidi.Network.Header[] | undefined;\n\n  constructor(session: BidiSession, requestId: bidi.Network.Request) {\n    this._session = session;\n    this._requestId = requestId;\n  }\n\n  _setRequest(request: network.Request) {\n    this._request = request;\n  }\n\n  async continue(overrides: types.NormalizedContinueOverrides) {\n    // Firefox does not update content-length header.\n    let headers = overrides.headers || this._request.headers();\n    if (overrides.postData && headers) {\n      headers = headers.map(header => {\n        if (header.name.toLowerCase() === 'content-length')\n          return { name: header.name, value: overrides.postData!.byteLength.toString() };\n        return header;\n      });\n    }\n    this._alreadyContinuedHeaders = toBidiHeaders(headers);\n    await this._session.sendMayFail('network.continueRequest', {\n      request: this._requestId,\n      url: overrides.url,\n      method: overrides.method,\n      // TODO: cookies!\n      headers: this._alreadyContinuedHeaders,\n      body: overrides.postData ? { type: 'base64', value: Buffer.from(overrides.postData).toString('base64') } : undefined,\n    });\n  }\n\n  async fulfill(response: types.NormalizedFulfillResponse) {\n    const base64body = response.isBase64 ? response.body : Buffer.from(response.body).toString('base64');\n    await this._session.sendMayFail('network.provideResponse', {\n      request: this._requestId,\n      statusCode: response.status,\n      reasonPhrase: network.statusText(response.status),\n      headers: toBidiHeaders(response.headers),\n      body: { type: 'base64', value: base64body },\n    });\n  }\n\n  async abort(errorCode: string) {\n    await this._session.sendMayFail('network.failRequest', {\n      request: this._requestId\n    });\n  }\n}\n\nfunction fromBidiHeaders(bidiHeaders: bidi.Network.Header[]): types.HeadersArray {\n  const result: types.HeadersArray = [];\n  for (const { name, value } of bidiHeaders)\n    result.push({ name, value: bidiBytesValueToString(value) });\n  return result;\n}\n\nfunction toBidiHeaders(headers: types.HeadersArray): bidi.Network.Header[] {\n  return headers.map(({ name, value }) => ({ name, value: { type: 'string', value } }));\n}\n\nexport function bidiBytesValueToString(value: bidi.Network.BytesValue): string {\n  if (value.type === 'string')\n    return value.value;\n  if (value.type === 'base64')\n    return Buffer.from(value.type, 'base64').toString('binary');\n  return 'unknown value type: ' + (value as any).type;\n\n}\n"],"mappings":"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"}