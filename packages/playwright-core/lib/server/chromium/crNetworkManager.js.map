{"version":3,"file":"crNetworkManager.js","names":["_helper","require","_eventsHelper","network","_interopRequireWildcard","_utils","_protocolError","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","CRNetworkManager","constructor","page","serviceWorker","_page","_serviceWorker","_requestIdToRequest","Map","_requestIdToRequestWillBeSentEvent","_credentials","_attemptedAuthentications","Set","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","_offline","_extraHTTPHeaders","_requestIdToRequestPausedEvent","_responseExtraInfoTracker","ResponseExtraInfoTracker","_sessions","addSession","session","workerFrame","isMain","sessionInfo","eventListeners","eventsHelper","addEventListener","_onRequestPaused","bind","_onAuthRequired","_onRequestWillBeSent","_onRequestWillBeSentExtraInfo","_onRequestServedFromCache","_onResponseReceived","_onResponseReceivedExtraInfo","_onLoadingFinished","_onLoadingFailed","push","_frameManager","onWebSocketCreated","requestId","url","onWebSocketRequest","onWebSocketResponse","response","status","statusText","payloadData","onWebSocketFrameSent","opcode","webSocketFrameReceived","webSocketClosed","webSocketError","errorMessage","Promise","all","send","_updateProtocolRequestInterceptionForSession","_setOfflineForSession","_setExtraHTTPHeadersForSession","removeSession","info","removeEventListeners","delete","_forEachSession","cb","values","map","catch","isSessionClosedError","authenticate","credentials","_updateProtocolRequestInterception","setOffline","offline","initial","latency","downloadThroughput","uploadThroughput","setRequestInterception","value","enabled","cachePromise","cacheDisabled","fetchPromise","resolve","undefined","handleAuthRequests","patterns","urlPattern","requestStage","setExtraHTTPHeaders","extraHTTPHeaders","length","headers","headersArrayToObject","clearCache","event","request","startsWith","requestPausedEvent","_onRequest","requestServedFromCache","requestWillBeSentExtraInfo","shouldProvideCredentials","_shouldProvideCredentials","add","username","password","_sendMayFail","authChallengeResponse","origin","URL","toLowerCase","networkId","requestWillBeSentEvent","_existingRequest$_rou","existingRequest","alreadyContinuedParams","_route","_alreadyContinuedParams","redirectedRequestId","requestWillBeSentSessionInfo","requestPausedSessionInfo","_this$_page","_this$_page2","_this$_page3","redirectedFrom","redirectResponse","_handleRequestRedirect","timestamp","redirectHasExtraInfo","frame","frameId","_delegate","_targetId","frameAttached","isInterceptedOptionsPreflight","method","initiator","type","needsRequestInterception","requestHeaders","responseHeaders","name","responseCode","responsePhrase","body","route","headersOverride","_redirectedFrom","_originalRequestRoute","RouteImpl","isNavigationRequest","loaderId","documentId","InterceptableRequest","context","_browserContext","setRawRequestHeaders","headersObjectToArray","requestStarted","_createResponse","responsePayload","hasExtraInfo","_responsePayload$secu","_responsePayload$secu2","_responsePayload$secu3","_responsePayload$secu4","_responsePayload$secu5","getResponseBody","_request$_route","contentLengthHeader","entries","find","header","expectedLength","_requestId","Buffer","from","base64Encoded","_fulfilled","resource","_id","options","disableCache","includeCredentials","chunks","stream","chunk","handle","data","eof","concat","timingPayload","timing","servedFromCache","startTime","requestTime","_timestamp","_wallTime","domainLookupStart","dnsStart","domainLookupEnd","dnsEnd","connectStart","secureConnectionStart","sslStart","connectEnd","requestStart","sendStart","responseStart","receiveHeadersEnd","Response","fromServiceWorker","protocol","remoteIPAddress","remotePort","_serverAddrFinished","ipAddress","port","_securityDetailsFinished","securityDetails","subjectName","issuer","validFrom","validTo","processResponse","_deleteRequest","_interceptionId","_this$_page4","_this$_page5","setTransferSize","setEncodedBodySize","_requestFinished","requestReceivedResponse","reportRequestFinished","responseReceivedExtraInfo","_this$_page6","_this$_page7","loadingFinished","_maybeUpdateOOPIFMainRequest","_existingResponse","encodedDataLength","responseHeadersSize","then","size","helper","secondsToRoundishMillis","_this$_page8","loadingFailed","_setFailureText","errorText","blockedReason","requestFailed","canceled","_documentId","exports","wallTime","postDataEntries","postDataBuffer","filter","entry","bytes","Request","interceptionId","_session","continue","overrides","postData","toString","catchDisallowedErrors","fulfill","isBase64","splitSetCookieHeader","abort","errorCode","errorReason","errorReasons","assert","callback","isProtocolError","message","includes","index","findIndex","split","result","slice","splice","_requests","_getOrCreateEntry","_patchHeaders","_checkFinished","_info","setResponseHeadersSize","setRawResponseHeaders","responses","requestExtraInfo","responseExtraInfo","_responseExtraInfo$he","headersText","_stopTracking"],"sources":["../../../src/server/chromium/crNetworkManager.ts"],"sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n * Modifications copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { CRSession } from './crConnection';\nimport type { Page } from '../page';\nimport { helper } from '../helper';\nimport type { RegisteredListener } from '../../utils/eventsHelper';\nimport { eventsHelper } from '../../utils/eventsHelper';\nimport type { Protocol } from './protocol';\nimport * as network from '../network';\nimport type * as contexts from '../browserContext';\nimport type * as frames from '../frames';\nimport type * as types from '../types';\nimport type { CRPage } from './crPage';\nimport { assert, headersArrayToObject, headersObjectToArray } from '../../utils';\nimport type { CRServiceWorker } from './crServiceWorker';\nimport { isProtocolError, isSessionClosedError } from '../protocolError';\n\ntype SessionInfo = {\n  session: CRSession;\n  isMain?: boolean;\n  workerFrame?: frames.Frame;\n  eventListeners: RegisteredListener[];\n};\n\nexport class CRNetworkManager {\n  private _page: Page | null;\n  private _serviceWorker: CRServiceWorker | null;\n  private _requestIdToRequest = new Map<string, InterceptableRequest>();\n  private _requestIdToRequestWillBeSentEvent = new Map<string, { sessionInfo: SessionInfo, event: Protocol.Network.requestWillBeSentPayload }>();\n  private _credentials: {origin?: string, username: string, password: string} | null = null;\n  private _attemptedAuthentications = new Set<string>();\n  private _userRequestInterceptionEnabled = false;\n  private _protocolRequestInterceptionEnabled = false;\n  private _offline = false;\n  private _extraHTTPHeaders: types.HeadersArray = [];\n  private _requestIdToRequestPausedEvent = new Map<string, { sessionInfo: SessionInfo, event: Protocol.Fetch.requestPausedPayload }>();\n  private _responseExtraInfoTracker = new ResponseExtraInfoTracker();\n  private _sessions = new Map<CRSession, SessionInfo>();\n\n  constructor(page: Page | null, serviceWorker: CRServiceWorker | null) {\n    this._page = page;\n    this._serviceWorker = serviceWorker;\n  }\n\n  async addSession(session: CRSession, workerFrame?: frames.Frame, isMain?: boolean) {\n    const sessionInfo: SessionInfo = { session, isMain, workerFrame, eventListeners: [] };\n    sessionInfo.eventListeners = [\n      eventsHelper.addEventListener(session, 'Fetch.requestPaused', this._onRequestPaused.bind(this, sessionInfo)),\n      eventsHelper.addEventListener(session, 'Fetch.authRequired', this._onAuthRequired.bind(this, sessionInfo)),\n      eventsHelper.addEventListener(session, 'Network.requestWillBeSent', this._onRequestWillBeSent.bind(this, sessionInfo)),\n      eventsHelper.addEventListener(session, 'Network.requestWillBeSentExtraInfo', this._onRequestWillBeSentExtraInfo.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.requestServedFromCache', this._onRequestServedFromCache.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.responseReceived', this._onResponseReceived.bind(this, sessionInfo)),\n      eventsHelper.addEventListener(session, 'Network.responseReceivedExtraInfo', this._onResponseReceivedExtraInfo.bind(this)),\n      eventsHelper.addEventListener(session, 'Network.loadingFinished', this._onLoadingFinished.bind(this, sessionInfo)),\n      eventsHelper.addEventListener(session, 'Network.loadingFailed', this._onLoadingFailed.bind(this, sessionInfo)),\n    ];\n    if (this._page) {\n      sessionInfo.eventListeners.push(...[\n        eventsHelper.addEventListener(session, 'Network.webSocketCreated', e => this._page!._frameManager.onWebSocketCreated(e.requestId, e.url)),\n        eventsHelper.addEventListener(session, 'Network.webSocketWillSendHandshakeRequest', e => this._page!._frameManager.onWebSocketRequest(e.requestId)),\n        eventsHelper.addEventListener(session, 'Network.webSocketHandshakeResponseReceived', e => this._page!._frameManager.onWebSocketResponse(e.requestId, e.response.status, e.response.statusText)),\n        eventsHelper.addEventListener(session, 'Network.webSocketFrameSent', e => e.response.payloadData && this._page!._frameManager.onWebSocketFrameSent(e.requestId, e.response.opcode, e.response.payloadData)),\n        eventsHelper.addEventListener(session, 'Network.webSocketFrameReceived', e => e.response.payloadData && this._page!._frameManager.webSocketFrameReceived(e.requestId, e.response.opcode, e.response.payloadData)),\n        eventsHelper.addEventListener(session, 'Network.webSocketClosed', e => this._page!._frameManager.webSocketClosed(e.requestId)),\n        eventsHelper.addEventListener(session, 'Network.webSocketFrameError', e => this._page!._frameManager.webSocketError(e.requestId, e.errorMessage)),\n      ]);\n    }\n    this._sessions.set(session, sessionInfo);\n    await Promise.all([\n      session.send('Network.enable'),\n      this._updateProtocolRequestInterceptionForSession(sessionInfo, true /* initial */),\n      this._setOfflineForSession(sessionInfo, true /* initial */),\n      this._setExtraHTTPHeadersForSession(sessionInfo, true /* initial */),\n    ]);\n  }\n\n  removeSession(session: CRSession) {\n    const info = this._sessions.get(session);\n    if (info)\n      eventsHelper.removeEventListeners(info.eventListeners);\n    this._sessions.delete(session);\n  }\n\n  private async _forEachSession(cb: (sessionInfo: SessionInfo) => Promise<any>) {\n    await Promise.all([...this._sessions.values()].map(info => {\n      if (info.isMain)\n        return cb(info);\n      return cb(info).catch(e => {\n        // Broadcasting a message to the closed target should be a noop.\n        if (isSessionClosedError(e))\n          return;\n        throw e;\n      });\n    }));\n  }\n\n  async authenticate(credentials: types.Credentials | null) {\n    this._credentials = credentials;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async setOffline(offline: boolean) {\n    if (offline === this._offline)\n      return;\n    this._offline = offline;\n    await this._forEachSession(info => this._setOfflineForSession(info));\n  }\n\n  private async _setOfflineForSession(info: SessionInfo, initial?: boolean) {\n    if (initial && !this._offline)\n      return;\n    // Workers are affected by the owner frame's Network.emulateNetworkConditions.\n    if (info.workerFrame)\n      return;\n    await info.session.send('Network.emulateNetworkConditions', {\n      offline: this._offline,\n      // values of 0 remove any active throttling. crbug.com/456324#c9\n      latency: 0,\n      downloadThroughput: -1,\n      uploadThroughput: -1\n    });\n  }\n\n  async setRequestInterception(value: boolean) {\n    this._userRequestInterceptionEnabled = value;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async _updateProtocolRequestInterception() {\n    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;\n    if (enabled === this._protocolRequestInterceptionEnabled)\n      return;\n    this._protocolRequestInterceptionEnabled = enabled;\n    await this._forEachSession(info => this._updateProtocolRequestInterceptionForSession(info));\n  }\n\n  private async _updateProtocolRequestInterceptionForSession(info: SessionInfo, initial?: boolean) {\n    const enabled = this._protocolRequestInterceptionEnabled;\n    if (initial && !enabled)\n      return;\n    const cachePromise = info.session.send('Network.setCacheDisabled', { cacheDisabled: enabled });\n    let fetchPromise = Promise.resolve<any>(undefined);\n    if (!info.workerFrame) {\n      if (enabled)\n        fetchPromise = info.session.send('Fetch.enable', { handleAuthRequests: true, patterns: [{ urlPattern: '*', requestStage: 'Request' }] });\n      else\n        fetchPromise = info.session.send('Fetch.disable');\n    }\n    await Promise.all([cachePromise, fetchPromise]);\n  }\n\n  async setExtraHTTPHeaders(extraHTTPHeaders: types.HeadersArray) {\n    if (!this._extraHTTPHeaders.length && !extraHTTPHeaders.length)\n      return;\n    this._extraHTTPHeaders = extraHTTPHeaders;\n    await this._forEachSession(info => this._setExtraHTTPHeadersForSession(info));\n  }\n\n  private async _setExtraHTTPHeadersForSession(info: SessionInfo, initial?: boolean) {\n    if (initial && !this._extraHTTPHeaders.length)\n      return;\n    await info.session.send('Network.setExtraHTTPHeaders', { headers: headersArrayToObject(this._extraHTTPHeaders, false /* lowerCase */) });\n  }\n\n  async clearCache() {\n    await this._forEachSession(async info => {\n      // Sending 'Network.setCacheDisabled' with 'cacheDisabled = true' will clear the MemoryCache.\n      await info.session.send('Network.setCacheDisabled', { cacheDisabled: true });\n      if (!this._protocolRequestInterceptionEnabled)\n        await info.session.send('Network.setCacheDisabled', { cacheDisabled: false });\n      if (!info.workerFrame)\n        await info.session.send('Network.clearBrowserCache');\n    });\n  }\n\n  _onRequestWillBeSent(sessionInfo: SessionInfo, event: Protocol.Network.requestWillBeSentPayload) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (this._protocolRequestInterceptionEnabled && !event.request.url.startsWith('data:')) {\n      const requestId = event.requestId;\n      const requestPausedEvent = this._requestIdToRequestPausedEvent.get(requestId);\n      if (requestPausedEvent) {\n        this._onRequest(sessionInfo, event, requestPausedEvent.sessionInfo, requestPausedEvent.event);\n        this._requestIdToRequestPausedEvent.delete(requestId);\n      } else {\n        this._requestIdToRequestWillBeSentEvent.set(event.requestId, { sessionInfo, event });\n      }\n    } else {\n      this._onRequest(sessionInfo, event, undefined, undefined);\n    }\n  }\n\n  _onRequestServedFromCache(event: Protocol.Network.requestServedFromCachePayload) {\n    this._responseExtraInfoTracker.requestServedFromCache(event);\n  }\n\n  _onRequestWillBeSentExtraInfo(event: Protocol.Network.requestWillBeSentExtraInfoPayload) {\n    this._responseExtraInfoTracker.requestWillBeSentExtraInfo(event);\n  }\n\n  _onAuthRequired(sessionInfo: SessionInfo, event: Protocol.Fetch.authRequiredPayload) {\n    let response: 'Default' | 'CancelAuth' | 'ProvideCredentials' = 'Default';\n    const shouldProvideCredentials = this._shouldProvideCredentials(event.request.url);\n    if (this._attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (shouldProvideCredentials) {\n      response = 'ProvideCredentials';\n      this._attemptedAuthentications.add(event.requestId);\n    }\n    const { username, password } =  shouldProvideCredentials && this._credentials ? this._credentials : { username: undefined, password: undefined };\n    sessionInfo.session._sendMayFail('Fetch.continueWithAuth', {\n      requestId: event.requestId,\n      authChallengeResponse: { response, username, password },\n    });\n  }\n\n  _shouldProvideCredentials(url: string): boolean {\n    if (!this._credentials)\n      return false;\n    return !this._credentials.origin || new URL(url).origin.toLowerCase() === this._credentials.origin.toLowerCase();\n  }\n\n  _onRequestPaused(sessionInfo: SessionInfo, event: Protocol.Fetch.requestPausedPayload) {\n    if (!event.networkId) {\n      // Fetch without networkId means that request was not recognized by inspector, and\n      // it will never receive Network.requestWillBeSent. Continue the request to not affect it.\n      sessionInfo.session._sendMayFail('Fetch.continueRequest', { requestId: event.requestId });\n      return;\n    }\n    if (event.request.url.startsWith('data:'))\n      return;\n\n    const requestId = event.networkId;\n    const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(requestId);\n    if (requestWillBeSentEvent) {\n      this._onRequest(requestWillBeSentEvent.sessionInfo, requestWillBeSentEvent.event, sessionInfo, event);\n      this._requestIdToRequestWillBeSentEvent.delete(requestId);\n    } else {\n      const existingRequest = this._requestIdToRequest.get(requestId);\n      const alreadyContinuedParams = existingRequest?._route?._alreadyContinuedParams;\n      if (alreadyContinuedParams && !event.redirectedRequestId) {\n        // Sometimes Chromium network stack restarts the request internally.\n        // For example, when no-cors request hits a \"less public address space\", it should be resent with cors.\n        // There are some more examples here: https://source.chromium.org/chromium/chromium/src/+/main:services/network/url_loader.cc;l=1205-1234;drc=d5dd931e0ad3d9ffe74888ec62a3cc106efd7ea6\n        // There are probably even more cases deep inside the network stack.\n        //\n        // Anyway, in this case, continue the request in the same way as before, and it should go through.\n        //\n        // Note: make sure not to prematurely continue the redirect, which shares the\n        // `networkId` between the original request and the redirect.\n        sessionInfo.session._sendMayFail('Fetch.continueRequest', {\n          ...alreadyContinuedParams,\n          requestId: event.requestId,\n        });\n        return;\n      }\n      this._requestIdToRequestPausedEvent.set(requestId, { sessionInfo, event });\n    }\n  }\n\n  _onRequest(requestWillBeSentSessionInfo: SessionInfo, requestWillBeSentEvent: Protocol.Network.requestWillBeSentPayload, requestPausedSessionInfo: SessionInfo | undefined, requestPausedEvent: Protocol.Fetch.requestPausedPayload | undefined) {\n    if (requestWillBeSentEvent.request.url.startsWith('data:'))\n      return;\n    let redirectedFrom: InterceptableRequest | null = null;\n    if (requestWillBeSentEvent.redirectResponse) {\n      const request = this._requestIdToRequest.get(requestWillBeSentEvent.requestId);\n      // If we connect late to the target, we could have missed the requestWillBeSent event.\n      if (request) {\n        this._handleRequestRedirect(request, requestWillBeSentEvent.redirectResponse, requestWillBeSentEvent.timestamp, requestWillBeSentEvent.redirectHasExtraInfo);\n        redirectedFrom = request;\n      }\n    }\n    let frame = requestWillBeSentEvent.frameId ? this._page?._frameManager.frame(requestWillBeSentEvent.frameId) : requestWillBeSentSessionInfo.workerFrame;\n    // Requests from workers lack frameId, because we receive Network.requestWillBeSent\n    // on the worker target. However, we receive Fetch.requestPaused on the page target,\n    // and lack workerFrame there. Luckily, Fetch.requestPaused provides a frameId.\n    if (!frame && this._page && requestPausedEvent && requestPausedEvent.frameId)\n      frame = this._page._frameManager.frame(requestPausedEvent.frameId);\n\n    // Check if it's main resource request interception (targetId === main frame id).\n    if (!frame && this._page && requestWillBeSentEvent.frameId === (this._page?._delegate as CRPage)._targetId) {\n      // Main resource request for the page is being intercepted so the Frame is not created\n      // yet. Precreate it here for the purposes of request interception. It will be updated\n      // later as soon as the request continues and we receive frame tree from the page.\n      frame = this._page._frameManager.frameAttached(requestWillBeSentEvent.frameId, null);\n    }\n\n    // CORS options preflight request is generated by the network stack. If interception is enabled,\n    // we accept all CORS options, assuming that this was intended when setting route.\n    //\n    // Note: it would be better to match the URL against interception patterns.\n    const isInterceptedOptionsPreflight = !!requestPausedEvent && requestPausedEvent.request.method === 'OPTIONS' && requestWillBeSentEvent.initiator.type === 'preflight';\n    if (isInterceptedOptionsPreflight && (this._page || this._serviceWorker)!.needsRequestInterception()) {\n      const requestHeaders = requestPausedEvent.request.headers;\n      const responseHeaders: Protocol.Fetch.HeaderEntry[] = [\n        { name: 'Access-Control-Allow-Origin', value: requestHeaders['Origin'] || '*' },\n        { name: 'Access-Control-Allow-Methods', value: requestHeaders['Access-Control-Request-Method'] || 'GET, POST, OPTIONS, DELETE' },\n        { name: 'Access-Control-Allow-Credentials', value: 'true' }\n      ];\n      if (requestHeaders['Access-Control-Request-Headers'])\n        responseHeaders.push({ name: 'Access-Control-Allow-Headers', value: requestHeaders['Access-Control-Request-Headers'] });\n      requestPausedSessionInfo!.session._sendMayFail('Fetch.fulfillRequest', {\n        requestId: requestPausedEvent.requestId,\n        responseCode: 204,\n        responsePhrase: network.statusText(204),\n        responseHeaders,\n        body: '',\n      });\n      return;\n    }\n\n    // Non-service-worker requests MUST have a frame—if they don't, we pretend there was no request\n    if (!frame && !this._serviceWorker) {\n      if (requestPausedEvent)\n        requestPausedSessionInfo!.session._sendMayFail('Fetch.continueRequest', { requestId: requestPausedEvent.requestId });\n      return;\n    }\n\n    let route = null;\n    let headersOverride: types.HeadersArray | undefined;\n    if (requestPausedEvent) {\n      // We do not support intercepting redirects.\n      if (redirectedFrom || (!this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled)) {\n        // Chromium does not preserve header overrides between redirects, so we have to do it ourselves.\n        headersOverride = redirectedFrom?._originalRequestRoute?._alreadyContinuedParams?.headers;\n        requestPausedSessionInfo!.session._sendMayFail('Fetch.continueRequest', { requestId: requestPausedEvent.requestId, headers: headersOverride });\n      } else {\n        route = new RouteImpl(requestPausedSessionInfo!.session, requestPausedEvent.requestId);\n      }\n    }\n    const isNavigationRequest = requestWillBeSentEvent.requestId === requestWillBeSentEvent.loaderId && requestWillBeSentEvent.type === 'Document';\n    const documentId = isNavigationRequest ? requestWillBeSentEvent.loaderId : undefined;\n    const request = new InterceptableRequest({\n      session: requestWillBeSentSessionInfo.session,\n      context: (this._page || this._serviceWorker)!._browserContext,\n      frame: frame || null,\n      serviceWorker: this._serviceWorker || null,\n      documentId,\n      route,\n      requestWillBeSentEvent,\n      requestPausedEvent,\n      redirectedFrom,\n      headersOverride: headersOverride || null,\n    });\n    this._requestIdToRequest.set(requestWillBeSentEvent.requestId, request);\n\n    if (route) {\n      // We may not receive extra info when intercepting the request.\n      // Use the headers from the Fetch.requestPausedPayload and release the allHeaders()\n      // right away, so that client can call it from the route handler.\n      request.request.setRawRequestHeaders(headersObjectToArray(requestPausedEvent!.request.headers, '\\n'));\n    }\n    (this._page?._frameManager || this._serviceWorker)!.requestStarted(request.request, route || undefined);\n  }\n\n  _createResponse(request: InterceptableRequest, responsePayload: Protocol.Network.Response, hasExtraInfo: boolean): network.Response {\n    const getResponseBody = async () => {\n      const contentLengthHeader = Object.entries(responsePayload.headers).find(header => header[0].toLowerCase() === 'content-length');\n      const expectedLength = contentLengthHeader ? +contentLengthHeader[1] : undefined;\n\n      const session = request.session;\n      const response = await session.send('Network.getResponseBody', { requestId: request._requestId });\n      if (response.body || !expectedLength)\n        return Buffer.from(response.body, response.base64Encoded ? 'base64' : 'utf8');\n\n      // Make sure no network requests sent while reading the body for fulfilled requests.\n      if (request._route?._fulfilled)\n        return Buffer.from('');\n\n      // For <link prefetch we are going to receive empty body with non-empty content-length expectation. Reach out for the actual content.\n      const resource = await session.send('Network.loadNetworkResource', { url: request.request.url(), frameId: this._serviceWorker ? undefined : request.request.frame()!._id, options: { disableCache: false, includeCredentials: true } });\n      const chunks: Buffer[] = [];\n      while (resource.resource.stream) {\n        const chunk = await session.send('IO.read', { handle: resource.resource.stream });\n        chunks.push(Buffer.from(chunk.data, chunk.base64Encoded ? 'base64' : 'utf-8'));\n        if (chunk.eof) {\n          await session.send('IO.close', { handle: resource.resource.stream });\n          break;\n        }\n      }\n      return Buffer.concat(chunks);\n    };\n    const timingPayload = responsePayload.timing!;\n    let timing: network.ResourceTiming;\n    if (timingPayload && !this._responseExtraInfoTracker.servedFromCache(request._requestId)) {\n      timing = {\n        startTime: (timingPayload.requestTime - request._timestamp + request._wallTime) * 1000,\n        domainLookupStart: timingPayload.dnsStart,\n        domainLookupEnd: timingPayload.dnsEnd,\n        connectStart: timingPayload.connectStart,\n        secureConnectionStart: timingPayload.sslStart,\n        connectEnd: timingPayload.connectEnd,\n        requestStart: timingPayload.sendStart,\n        responseStart: timingPayload.receiveHeadersEnd,\n      };\n    } else {\n      timing = {\n        startTime: request._wallTime * 1000,\n        domainLookupStart: -1,\n        domainLookupEnd: -1,\n        connectStart: -1,\n        secureConnectionStart: -1,\n        connectEnd: -1,\n        requestStart: -1,\n        responseStart: -1,\n      };\n    }\n    const response = new network.Response(request.request, responsePayload.status, responsePayload.statusText, headersObjectToArray(responsePayload.headers), timing, getResponseBody, !!responsePayload.fromServiceWorker, responsePayload.protocol);\n    if (responsePayload?.remoteIPAddress && typeof responsePayload?.remotePort === 'number') {\n      response._serverAddrFinished({\n        ipAddress: responsePayload.remoteIPAddress,\n        port: responsePayload.remotePort,\n      });\n    } else {\n      response._serverAddrFinished();\n    }\n    response._securityDetailsFinished({\n      protocol: responsePayload?.securityDetails?.protocol,\n      subjectName: responsePayload?.securityDetails?.subjectName,\n      issuer: responsePayload?.securityDetails?.issuer,\n      validFrom: responsePayload?.securityDetails?.validFrom,\n      validTo: responsePayload?.securityDetails?.validTo,\n    });\n    this._responseExtraInfoTracker.processResponse(request._requestId, response, hasExtraInfo);\n    return response;\n  }\n\n  _deleteRequest(request: InterceptableRequest) {\n    this._requestIdToRequest.delete(request._requestId);\n    if (request._interceptionId)\n      this._attemptedAuthentications.delete(request._interceptionId);\n  }\n\n  _handleRequestRedirect(request: InterceptableRequest, responsePayload: Protocol.Network.Response, timestamp: number, hasExtraInfo: boolean) {\n    const response = this._createResponse(request, responsePayload, hasExtraInfo);\n    response.setTransferSize(null);\n    response.setEncodedBodySize(null);\n    response._requestFinished((timestamp - request._timestamp) * 1000);\n    this._deleteRequest(request);\n    (this._page?._frameManager || this._serviceWorker)!.requestReceivedResponse(response);\n    (this._page?._frameManager || this._serviceWorker)!.reportRequestFinished(request.request, response);\n  }\n\n  _onResponseReceivedExtraInfo(event: Protocol.Network.responseReceivedExtraInfoPayload) {\n    this._responseExtraInfoTracker.responseReceivedExtraInfo(event);\n  }\n\n  _onResponseReceived(sessionInfo: SessionInfo, event: Protocol.Network.responseReceivedPayload) {\n    let request = this._requestIdToRequest.get(event.requestId);\n    // For frame-level Requests that are handled by a Service Worker's fetch handler, we'll never get a requestPaused event, so we need to\n    // manually create the request. In an ideal world, crNetworkManager would be able to know this on Network.requestWillBeSent, but there\n    // is not enough metadata there.\n    if (!request && event.response.fromServiceWorker) {\n      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);\n      if (requestWillBeSentEvent) {\n        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);\n        this._onRequest(sessionInfo, requestWillBeSentEvent.event, undefined, undefined);\n        request = this._requestIdToRequest.get(event.requestId);\n      }\n    }\n    // FileUpload sends a response without a matching request.\n    if (!request)\n      return;\n    const response = this._createResponse(request, event.response, event.hasExtraInfo);\n    (this._page?._frameManager || this._serviceWorker)!.requestReceivedResponse(response);\n  }\n\n  _onLoadingFinished(sessionInfo: SessionInfo, event: Protocol.Network.loadingFinishedPayload) {\n    this._responseExtraInfoTracker.loadingFinished(event);\n\n    const request = this._requestIdToRequest.get(event.requestId);\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request)\n      return;\n    this._maybeUpdateOOPIFMainRequest(sessionInfo, request);\n\n    // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n    const response = request.request._existingResponse();\n    if (response) {\n      response.setTransferSize(event.encodedDataLength);\n      response.responseHeadersSize().then(size => response.setEncodedBodySize(event.encodedDataLength - size));\n      response._requestFinished(helper.secondsToRoundishMillis(event.timestamp - request._timestamp));\n    }\n    this._deleteRequest(request);\n    (this._page?._frameManager || this._serviceWorker)!.reportRequestFinished(request.request, response);\n  }\n\n  _onLoadingFailed(sessionInfo: SessionInfo, event: Protocol.Network.loadingFailedPayload) {\n    this._responseExtraInfoTracker.loadingFailed(event);\n\n    let request = this._requestIdToRequest.get(event.requestId);\n\n    if (!request) {\n      const requestWillBeSentEvent = this._requestIdToRequestWillBeSentEvent.get(event.requestId);\n      if (requestWillBeSentEvent) {\n        // This is a case where request has failed before we had a chance to intercept it.\n        // We stop waiting for Fetch.requestPaused (it might never come), and dispatch request event\n        // right away, followed by requestfailed event.\n        this._requestIdToRequestWillBeSentEvent.delete(event.requestId);\n        this._onRequest(sessionInfo, requestWillBeSentEvent.event, undefined, undefined);\n        request = this._requestIdToRequest.get(event.requestId);\n      }\n    }\n\n    // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n    if (!request)\n      return;\n    this._maybeUpdateOOPIFMainRequest(sessionInfo, request);\n    const response = request.request._existingResponse();\n    if (response) {\n      response.setTransferSize(null);\n      response.setEncodedBodySize(null);\n      response._requestFinished(helper.secondsToRoundishMillis(event.timestamp - request._timestamp));\n    } else {\n      // Loading failed before response has arrived - there will be no extra info events.\n      request.request.setRawRequestHeaders(null);\n    }\n    this._deleteRequest(request);\n    request.request._setFailureText(event.errorText || event.blockedReason || '');\n    (this._page?._frameManager || this._serviceWorker)!.requestFailed(request.request, !!event.canceled);\n  }\n\n  private _maybeUpdateOOPIFMainRequest(sessionInfo: SessionInfo, request: InterceptableRequest) {\n    // OOPIF has a main request that starts in the parent session but finishes in the child session.\n    // We check for the main request by matching loaderId and requestId, and if it now belongs to\n    // a child session, migrate it there.\n    if (request.session !== sessionInfo.session && !sessionInfo.isMain && request._documentId === request._requestId)\n      request.session = sessionInfo.session;\n  }\n}\n\nclass InterceptableRequest {\n  readonly request: network.Request;\n  readonly _requestId: string;\n  readonly _interceptionId: string | undefined;\n  readonly _documentId: string | undefined;\n  readonly _timestamp: number;\n  readonly _wallTime: number;\n  readonly _route: RouteImpl | null;\n  // Only first request in the chain can be intercepted, so this will\n  // store the first and only Route in the chain (if any).\n  readonly _originalRequestRoute: RouteImpl | undefined;\n  session: CRSession;\n\n  constructor(options: {\n    session: CRSession,\n    context: contexts.BrowserContext;\n    frame: frames.Frame | null;\n    serviceWorker: CRServiceWorker | null;\n    documentId?: string;\n    route: RouteImpl | null;\n    requestWillBeSentEvent: Protocol.Network.requestWillBeSentPayload;\n    requestPausedEvent: Protocol.Fetch.requestPausedPayload | undefined;\n    redirectedFrom: InterceptableRequest | null;\n    headersOverride: types.HeadersArray | null;\n  }) {\n    const { session, context, frame, documentId, route, requestWillBeSentEvent, requestPausedEvent, redirectedFrom, serviceWorker, headersOverride } = options;\n    this.session = session;\n    this._timestamp = requestWillBeSentEvent.timestamp;\n    this._wallTime = requestWillBeSentEvent.wallTime;\n    this._requestId = requestWillBeSentEvent.requestId;\n    this._interceptionId = requestPausedEvent && requestPausedEvent.requestId;\n    this._documentId = documentId;\n    this._route = route;\n    this._originalRequestRoute = route ?? redirectedFrom?._originalRequestRoute;\n\n    const {\n      headers,\n      method,\n      url,\n      postDataEntries = null,\n    } = requestPausedEvent ? requestPausedEvent.request : requestWillBeSentEvent.request;\n    const type = (requestWillBeSentEvent.type || '').toLowerCase();\n    let postDataBuffer = null;\n    const entries = postDataEntries?.filter(entry => entry.bytes);\n    if (entries && entries.length)\n      postDataBuffer = Buffer.concat(entries.map(entry => Buffer.from(entry.bytes!, 'base64')));\n\n    this.request = new network.Request(context, frame, serviceWorker, redirectedFrom?.request || null, documentId, url, type, method, postDataBuffer,  headersOverride || headersObjectToArray(headers));\n  }\n}\n\nclass RouteImpl implements network.RouteDelegate {\n  private readonly _session: CRSession;\n  private _interceptionId: string;\n  _alreadyContinuedParams: Protocol.Fetch.continueRequestParameters | undefined;\n  _fulfilled: boolean = false;\n\n  constructor(session: CRSession, interceptionId: string) {\n    this._session = session;\n    this._interceptionId = interceptionId;\n  }\n\n  async continue(overrides: types.NormalizedContinueOverrides): Promise<void> {\n    this._alreadyContinuedParams = {\n      requestId: this._interceptionId!,\n      url: overrides.url,\n      headers: overrides.headers,\n      method: overrides.method,\n      postData: overrides.postData ? overrides.postData.toString('base64') : undefined\n    };\n    await catchDisallowedErrors(async () => {\n      await this._session.send('Fetch.continueRequest', this._alreadyContinuedParams);\n    });\n  }\n\n  async fulfill(response: types.NormalizedFulfillResponse) {\n    this._fulfilled = true;\n    const body = response.isBase64 ? response.body : Buffer.from(response.body).toString('base64');\n\n    const responseHeaders = splitSetCookieHeader(response.headers);\n    await catchDisallowedErrors(async () => {\n      await this._session.send('Fetch.fulfillRequest', {\n        requestId: this._interceptionId!,\n        responseCode: response.status,\n        responsePhrase: network.statusText(response.status),\n        responseHeaders,\n        body,\n      });\n    });\n  }\n\n  async abort(errorCode: string = 'failed') {\n    const errorReason = errorReasons[errorCode];\n    assert(errorReason, 'Unknown error code: ' + errorCode);\n    await catchDisallowedErrors(async () => {\n      await this._session.send('Fetch.failRequest', {\n        requestId: this._interceptionId!,\n        errorReason\n      });\n    });\n  }\n}\n\n// In certain cases, protocol will return error if the request was already canceled\n// or the page was closed. We should tolerate these errors but propagate other.\nasync function catchDisallowedErrors(callback: () => Promise<void>) {\n  try {\n    return await callback();\n  } catch (e) {\n    if (isProtocolError(e) && e.message.includes('Invalid http status code or phrase'))\n      throw e;\n  }\n}\n\n\nfunction splitSetCookieHeader(headers: types.HeadersArray): types.HeadersArray {\n  const index = headers.findIndex(({ name }) => name.toLowerCase() === 'set-cookie');\n  if (index === -1)\n    return headers;\n\n  const header = headers[index];\n  const values = header.value.split('\\n');\n  if (values.length === 1)\n    return headers;\n  const result = headers.slice();\n  result.splice(index, 1, ...values.map(value => ({ name: header.name, value })));\n  return result;\n}\n\nconst errorReasons: { [reason: string]: Protocol.Network.ErrorReason } = {\n  'aborted': 'Aborted',\n  'accessdenied': 'AccessDenied',\n  'addressunreachable': 'AddressUnreachable',\n  'blockedbyclient': 'BlockedByClient',\n  'blockedbyresponse': 'BlockedByResponse',\n  'connectionaborted': 'ConnectionAborted',\n  'connectionclosed': 'ConnectionClosed',\n  'connectionfailed': 'ConnectionFailed',\n  'connectionrefused': 'ConnectionRefused',\n  'connectionreset': 'ConnectionReset',\n  'internetdisconnected': 'InternetDisconnected',\n  'namenotresolved': 'NameNotResolved',\n  'timedout': 'TimedOut',\n  'failed': 'Failed',\n};\n\ntype RequestInfo = {\n  requestId: string,\n  // Events are replaced with \"undefined\" to avoid updating the same headers twice.\n  requestWillBeSentExtraInfo: (Protocol.Network.requestWillBeSentExtraInfoPayload | undefined)[],\n  responseReceivedExtraInfo: (Protocol.Network.responseReceivedExtraInfoPayload | undefined)[],\n  // Note: we only put the responses that expect extra info in this list.\n  // Since the order of responses and extraInfo events is the same, each response\n  // will get a pair of matching request/response extraInfo events in this list.\n  responses: network.Response[],\n  loadingFinished?: Protocol.Network.loadingFinishedPayload,\n  loadingFailed?: Protocol.Network.loadingFailedPayload,\n  servedFromCache?: boolean,\n};\n\n// This class aligns responses with response headers from extra info:\n//   - Network.requestWillBeSent, Network.responseReceived, Network.loadingFinished/loadingFailed are\n//     dispatched using one channel.\n//   - Network.requestWillBeSentExtraInfo and Network.responseReceivedExtraInfo are dispatched on\n//     another channel. Those channels are not associated, so events come in random order.\n//\n// This class will associate responses with the new headers. These extra info headers will become\n// available to client reliably upon requestfinished event only. It consumes CDP\n// signals on one end and processResponse(network.Response) signals on the other hands. It then makes\n// sure that responses have all the extra headers in place by the time request finishes.\n//\n// The shape of the instrumentation API is deliberately following the CDP, so that it\n// is clear what is called when and what this means to the tracker without extra\n// documentation.\nclass ResponseExtraInfoTracker {\n  private _requests = new Map<string, RequestInfo>();\n\n  requestWillBeSentExtraInfo(event: Protocol.Network.requestWillBeSentExtraInfoPayload) {\n    const info = this._getOrCreateEntry(event.requestId);\n    info.requestWillBeSentExtraInfo.push(event);\n    this._patchHeaders(info, info.requestWillBeSentExtraInfo.length - 1);\n    this._checkFinished(info);\n  }\n\n  requestServedFromCache(event: Protocol.Network.requestServedFromCachePayload) {\n    const info = this._getOrCreateEntry(event.requestId);\n    info.servedFromCache = true;\n  }\n\n  servedFromCache(requestId: string): boolean {\n    const info = this._requests.get(requestId);\n    return !!info?.servedFromCache;\n  }\n\n  responseReceivedExtraInfo(event: Protocol.Network.responseReceivedExtraInfoPayload) {\n    const info = this._getOrCreateEntry(event.requestId);\n    info.responseReceivedExtraInfo.push(event);\n    this._patchHeaders(info, info.responseReceivedExtraInfo.length - 1);\n    this._checkFinished(info);\n  }\n\n  processResponse(requestId: string, response: network.Response, hasExtraInfo: boolean) {\n    let info = this._requests.get(requestId);\n    // Cached responses have erroneous \"hasExtraInfo\" flag.\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=1340398\n    if (!hasExtraInfo || info?.servedFromCache) {\n      // Use \"provisional\" headers as \"raw\" ones.\n      response.request().setRawRequestHeaders(null);\n      response.setResponseHeadersSize(null);\n      response.setRawResponseHeaders(null);\n      return;\n    }\n\n    info = this._getOrCreateEntry(requestId);\n    info.responses.push(response);\n    this._patchHeaders(info, info.responses.length - 1);\n  }\n\n  loadingFinished(event: Protocol.Network.loadingFinishedPayload) {\n    const info = this._requests.get(event.requestId);\n    if (!info)\n      return;\n    info.loadingFinished = event;\n    this._checkFinished(info);\n  }\n\n  loadingFailed(event: Protocol.Network.loadingFailedPayload) {\n    const info = this._requests.get(event.requestId);\n    if (!info)\n      return;\n    info.loadingFailed = event;\n    this._checkFinished(info);\n  }\n\n  _getOrCreateEntry(requestId: string): RequestInfo {\n    let info = this._requests.get(requestId);\n    if (!info) {\n      info = {\n        requestId: requestId,\n        requestWillBeSentExtraInfo: [],\n        responseReceivedExtraInfo: [],\n        responses: [],\n      };\n      this._requests.set(requestId, info);\n    }\n    return info;\n  }\n\n  private _patchHeaders(info: RequestInfo, index: number) {\n    const response = info.responses[index];\n    const requestExtraInfo = info.requestWillBeSentExtraInfo[index];\n    if (response && requestExtraInfo) {\n      response.request().setRawRequestHeaders(headersObjectToArray(requestExtraInfo.headers, '\\n'));\n      info.requestWillBeSentExtraInfo[index] = undefined;\n    }\n    const responseExtraInfo = info.responseReceivedExtraInfo[index];\n    if (response && responseExtraInfo) {\n      response.setResponseHeadersSize(responseExtraInfo.headersText?.length || 0);\n      response.setRawResponseHeaders(headersObjectToArray(responseExtraInfo.headers, '\\n'));\n      info.responseReceivedExtraInfo[index] = undefined;\n    }\n  }\n\n  private _checkFinished(info: RequestInfo) {\n    if (!info.loadingFinished && !info.loadingFailed)\n      return;\n\n    if (info.responses.length <= info.responseReceivedExtraInfo.length) {\n      // We have extra info for each response.\n      this._stopTracking(info.requestId);\n      return;\n    }\n\n    // We are not done yet.\n  }\n\n  private _stopTracking(requestId: string) {\n    this._requests.delete(requestId);\n  }\n}\n"],"mappings":"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"}