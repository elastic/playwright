{"version":3,"file":"videoRecorder.js","names":["_utils","require","_page","_processLauncher","_progress","_instrumentation","fps","VideoRecorder","launch","page","ffmpegPath","options","outputFile","endsWith","Error","controller","ProgressController","serverSideCallMetadata","setLogName","run","progress","recorder","_launch","constructor","_process","_gracefullyClose","_lastWritePromise","Promise","resolve","_lastFrameTimestamp","_lastFrameBuffer","_lastWriteTimestamp","_frameQueue","_isStopped","_ffmpegPath","on","Page","Events","ScreencastFrame","frame","writeFrame","buffer","timestamp","w","width","h","height","args","split","push","launchedProcess","gracefullyClose","launchProcess","command","stdio","log","message","tempDirectories","attemptToGracefullyClose","stdin","end","onExit","exitCode","signal","assert","durationSec","repeatCount","Math","max","round","i","then","_sendFrames","monotonicTime","length","_sendFrame","shift","f","write","error","String","stop","Buffer","from","exports"],"sources":["../../../src/server/chromium/videoRecorder.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ChildProcess } from 'child_process';\nimport { assert, monotonicTime } from '../../utils';\nimport { Page } from '../page';\nimport { launchProcess } from '../../utils/processLauncher';\nimport type { Progress } from '../progress';\nimport { ProgressController } from '../progress';\nimport { serverSideCallMetadata } from '../instrumentation';\nimport type * as types from '../types';\n\nconst fps = 25;\n\nexport class VideoRecorder {\n  private _process: ChildProcess | null = null;\n  private _gracefullyClose: (() => Promise<void>) | null = null;\n  private _lastWritePromise: Promise<void> = Promise.resolve();\n  private _lastFrameTimestamp: number = 0;\n  private _lastFrameBuffer: Buffer | null = null;\n  private _lastWriteTimestamp: number = 0;\n  private readonly _progress: Progress;\n  private _frameQueue: Buffer[] = [];\n  private _isStopped = false;\n  private _ffmpegPath: string;\n\n  static async launch(page: Page, ffmpegPath: string, options: types.PageScreencastOptions): Promise<VideoRecorder> {\n    if (!options.outputFile.endsWith('.webm'))\n      throw new Error('File must have .webm extension');\n\n    const controller = new ProgressController(serverSideCallMetadata(), page);\n    controller.setLogName('browser');\n    return await controller.run(async progress => {\n      const recorder = new VideoRecorder(page, ffmpegPath, progress);\n      await recorder._launch(options);\n      return recorder;\n    });\n  }\n\n  private constructor(page: Page, ffmpegPath: string, progress: Progress) {\n    this._progress = progress;\n    this._ffmpegPath = ffmpegPath;\n    page.on(Page.Events.ScreencastFrame, frame => this.writeFrame(frame.buffer, frame.timestamp));\n  }\n\n  private async _launch(options: types.PageScreencastOptions) {\n    // How to tune the codec:\n    // 1. Read vp8 documentation to figure out the options.\n    //   https://www.webmproject.org/docs/encoder-parameters/\n    // 2. Use the following command to map the options to ffmpeg arguments.\n    //   $ ./third_party/ffmpeg/ffmpeg-mac -h encoder=vp8\n    // 3. A bit more about passing vp8 options to ffmpeg.\n    //   https://trac.ffmpeg.org/wiki/Encode/VP8\n    // 4. Tuning for VP9:\n    //   https://developers.google.com/media/vp9/live-encoding\n    //\n    // How to stress-test video recording (runs 10 recorders in parallel to book all cpus available):\n    //   $ node ./utils/video_stress.js\n    //\n    // We use the following vp8 options:\n    //   \"-qmin 0 -qmax 50\" - quality variation from 0 to 50.\n    //     Suggested here: https://trac.ffmpeg.org/wiki/Encode/VP8\n    //   \"-crf 8\" - constant quality mode, 4-63, lower means better quality.\n    //   \"-deadline realtime -speed 8\" - do not use too much cpu to keep up with incoming frames.\n    //   \"-b:v 1M\" - video bitrate. Default value is too low for vp8\n    //     Suggested here: https://trac.ffmpeg.org/wiki/Encode/VP8\n    //   Note that we can switch to \"-qmin 20 -qmax 50 -crf 30\" for smaller video size but worse quality.\n    //\n    // We use \"pad\" and \"crop\" video filters (-vf option) to resize incoming frames\n    // that might be of the different size to the desired video size.\n    //   https://ffmpeg.org/ffmpeg-filters.html#pad-1\n    //   https://ffmpeg.org/ffmpeg-filters.html#crop\n    //\n    // We use \"image2pipe\" mode to pipe frames and get a single video - https://trac.ffmpeg.org/wiki/Slideshow\n    //   \"-f image2pipe -c:v mjpeg -i -\" forces input to be read from standard input, and forces\n    //     mjpeg input image format.\n    //   \"-avioflags direct\" reduces general buffering.\n    //   \"-fpsprobesize 0 -probesize 32 -analyzeduration 0\" reduces initial buffering\n    //     while analyzing input fps and other stats.\n    //\n    // \"-y\" means overwrite output.\n    // \"-an\" means no audio.\n    // \"-threads 1\" means using one thread. This drastically reduces stalling when\n    //   cpu is overbooked. By default vp8 tries to use all available threads?\n\n    const w = options.width;\n    const h = options.height;\n    const args = `-loglevel error -f image2pipe -avioflags direct -fpsprobesize 0 -probesize 32 -analyzeduration 0 -c:v mjpeg -i pipe:0 -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -speed 8 -b:v 1M -threads 1 -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(' ');\n    args.push(options.outputFile);\n    const progress = this._progress;\n\n    const { launchedProcess, gracefullyClose } = await launchProcess({\n      command: this._ffmpegPath,\n      args,\n      stdio: 'stdin',\n      log: (message: string) => progress.log(message),\n      tempDirectories: [],\n      attemptToGracefullyClose: async () => {\n        progress.log('Closing stdin...');\n        launchedProcess.stdin!.end();\n      },\n      onExit: (exitCode, signal) => {\n        progress.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);\n      },\n    });\n    launchedProcess.stdin!.on('finish', () => {\n      progress.log('ffmpeg finished input.');\n    });\n    launchedProcess.stdin!.on('error', () => {\n      progress.log('ffmpeg error.');\n    });\n    this._process = launchedProcess;\n    this._gracefullyClose = gracefullyClose;\n  }\n\n  writeFrame(frame: Buffer, timestamp: number) {\n    assert(this._process);\n    if (this._isStopped)\n      return;\n\n    if (this._lastFrameBuffer) {\n      const durationSec = timestamp - this._lastFrameTimestamp;\n      const repeatCount = Math.max(1, Math.round(fps * durationSec));\n      for (let i = 0; i < repeatCount; ++i)\n        this._frameQueue.push(this._lastFrameBuffer);\n      this._lastWritePromise = this._lastWritePromise.then(() => this._sendFrames());\n    }\n\n    this._lastFrameBuffer = frame;\n    this._lastFrameTimestamp = timestamp;\n    this._lastWriteTimestamp = monotonicTime();\n  }\n\n  private async _sendFrames() {\n    while (this._frameQueue.length)\n      await this._sendFrame(this._frameQueue.shift()!);\n  }\n\n  private async _sendFrame(frame: Buffer) {\n    return new Promise(f => this._process!.stdin!.write(frame, f)).then(error => {\n      if (error)\n        this._progress.log(`ffmpeg failed to write: ${String(error)}`);\n    });\n  }\n\n  async stop() {\n    if (this._isStopped)\n      return;\n    this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + (monotonicTime() - this._lastWriteTimestamp) / 1000);\n    this._isStopped = true;\n    await this._lastWritePromise;\n    await this._gracefullyClose!();\n  }\n}\n"],"mappings":"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"}