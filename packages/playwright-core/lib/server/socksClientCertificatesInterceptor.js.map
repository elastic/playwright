{"version":3,"file":"socksClientCertificatesInterceptor.js","names":["_net","_interopRequireDefault","require","_http","_tls","_stream","_happyEyeballs","_utils","_socksProxy","_debugLogger","obj","__esModule","default","dummyServerTlsOptions","undefined","loadDummyServerCertsIfNeeded","cert","key","generateSelfSignedCertificate","ALPNCache","constructor","_cache","Map","get","host","port","success","cacheKey","result","then","ManualPromise","set","createTLSSocket","servername","net","isIP","ALPNProtocols","rejectUnauthorized","socket","resolve","alpnProtocol","end","catch","error","debugLogger","log","message","SocksProxyConnection","socksProxy","uid","firstPackageReceived","target","internal","internalTLS","_targetCloseEventListener","_dummyServer","_closed","_this$internalTLS","_this$_dummyServer","sendSocketEnd","destroy","close","connect","createSocket","rewriteToLocalhostIfNeeded","once","sendSocketError","socketConnected","localAddress","localPort","onClose","_this$internalTLS2","_this$_dummyServer2","onData","data","_attachTLSListeners","on","sendSocketData","push","write","stream","Duplex","read","encoding","callback","alpnCache","alpnProtocolChosenByServer","tls","createServer","emit","targetTLS","handleError","replaceAll","responseBody","escapeHTML","http2","removeListener","session","performServerHandshake","respond","constants","HTTP2_HEADER_STATUS","cleanup","Buffer","byteLength","join","ignoreHTTPSErrors","secureContext","secureContextMap","URL","origin","pipe","ClientCertificatesProxy","contextOptions","_connections","_initSecureContexts","clientCertificates","SocksProxy","setPattern","addListener","Events","SocksRequested","payload","connection","socketFailed","errorCode","code","SocksData","_this$_connections$ge","SocksClosed","_this$_connections$ge2","delete","origin2certs","normalizeOrigin","certs","createSecureContext","convertClientCertificatesToTLSOptions","rewriteOpenSSLErrorIfNeeded","rewriteErrorMessage","listen","exports","length","tlsOptions","pfx","pem","passphrase","buf","getMatchingTLSOptionsForOrigin","matchingCerts","filter","c"],"sources":["../../src/server/socksClientCertificatesInterceptor.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport net from 'net';\nimport http2 from 'http2';\nimport type https from 'https';\nimport tls from 'tls';\nimport stream from 'stream';\nimport { createSocket, createTLSSocket } from '../utils/happy-eyeballs';\nimport { escapeHTML, generateSelfSignedCertificate, ManualPromise, rewriteErrorMessage } from '../utils';\nimport type { SocksSocketClosedPayload, SocksSocketDataPayload, SocksSocketRequestedPayload } from '../common/socksProxy';\nimport { SocksProxy } from '../common/socksProxy';\nimport type * as channels from '@protocol/channels';\nimport { debugLogger } from '../utils/debugLogger';\n\nlet dummyServerTlsOptions: tls.TlsOptions | undefined = undefined;\nfunction loadDummyServerCertsIfNeeded() {\n  if (dummyServerTlsOptions)\n    return;\n  const { cert, key } = generateSelfSignedCertificate();\n  dummyServerTlsOptions = { key, cert };\n}\n\nclass ALPNCache {\n  private _cache = new Map<string, ManualPromise<string>>();\n\n  get(host: string, port: number, success: (protocol: string) => void) {\n    const cacheKey = `${host}:${port}`;\n    {\n      const result = this._cache.get(cacheKey);\n      if (result) {\n        result.then(success);\n        return;\n      }\n    }\n    const result = new ManualPromise<string>();\n    this._cache.set(cacheKey, result);\n    result.then(success);\n    createTLSSocket({\n      host,\n      port,\n      servername: net.isIP(host) ? undefined : host,\n      ALPNProtocols: ['h2', 'http/1.1'],\n      rejectUnauthorized: false,\n    }).then(socket => {\n      // The server may not respond with ALPN, in which case we default to http/1.1.\n      result.resolve(socket.alpnProtocol || 'http/1.1');\n      socket.end();\n    }).catch(error => {\n      debugLogger.log('client-certificates', `ALPN error: ${error.message}`);\n      result.resolve('http/1.1');\n    });\n  }\n}\n\nclass SocksProxyConnection {\n  private readonly socksProxy: ClientCertificatesProxy;\n  private readonly uid: string;\n  private readonly host: string;\n  private readonly port: number;\n  firstPackageReceived: boolean = false;\n  target!: net.Socket;\n  // In case of http, we just pipe data to the target socket and they are |undefined|.\n  internal: stream.Duplex | undefined;\n  internalTLS: tls.TLSSocket | undefined;\n  private _targetCloseEventListener: () => void;\n  private _dummyServer: tls.Server | undefined;\n  private _closed = false;\n\n  constructor(socksProxy: ClientCertificatesProxy, uid: string, host: string, port: number) {\n    this.socksProxy = socksProxy;\n    this.uid = uid;\n    this.host = host;\n    this.port = port;\n    this._targetCloseEventListener = () => {\n      // Close the other end and cleanup TLS resources.\n      this.socksProxy._socksProxy.sendSocketEnd({ uid: this.uid });\n      this.internalTLS?.destroy();\n      this._dummyServer?.close();\n    };\n  }\n\n  async connect() {\n    this.target = await createSocket(rewriteToLocalhostIfNeeded(this.host), this.port);\n    this.target.once('close', this._targetCloseEventListener);\n    this.target.once('error', error => this.socksProxy._socksProxy.sendSocketError({ uid: this.uid, error: error.message }));\n    if (this._closed) {\n      this.target.destroy();\n      return;\n    }\n    this.socksProxy._socksProxy.socketConnected({\n      uid: this.uid,\n      host: this.target.localAddress!,\n      port: this.target.localPort!,\n    });\n  }\n\n  public onClose() {\n    // Close the other end and cleanup TLS resources.\n    this.target.destroy();\n    this.internalTLS?.destroy();\n    this._dummyServer?.close();\n    this._closed = true;\n  }\n\n  public onData(data: Buffer) {\n    // HTTP / TLS are client-hello based protocols. This allows us to detect\n    // the protocol on the first package and attach appropriate listeners.\n    if (!this.firstPackageReceived) {\n      this.firstPackageReceived = true;\n      // 0x16 is SSLv3/TLS \"handshake\" content type: https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_record\n      if (data[0] === 0x16)\n        this._attachTLSListeners();\n      else\n        this.target.on('data', data => this.socksProxy._socksProxy.sendSocketData({ uid: this.uid, data }));\n    }\n    if (this.internal)\n      this.internal.push(data);\n    else\n      this.target.write(data);\n  }\n\n  private _attachTLSListeners() {\n    this.internal = new stream.Duplex({\n      read: () => {},\n      write: (data, encoding, callback) => {\n        this.socksProxy._socksProxy.sendSocketData({ uid: this.uid, data });\n        callback();\n      }\n    });\n    this.socksProxy.alpnCache.get(rewriteToLocalhostIfNeeded(this.host), this.port, alpnProtocolChosenByServer => {\n      debugLogger.log('client-certificates', `Proxy->Target ${this.host}:${this.port} chooses ALPN ${alpnProtocolChosenByServer}`);\n      if (this._closed)\n        return;\n      this._dummyServer = tls.createServer({\n        ...dummyServerTlsOptions,\n        ALPNProtocols: alpnProtocolChosenByServer === 'h2' ? ['h2', 'http/1.1'] : ['http/1.1'],\n      });\n      this._dummyServer.emit('connection', this.internal);\n      this._dummyServer.once('secureConnection', internalTLS => {\n        this.internalTLS = internalTLS;\n        debugLogger.log('client-certificates', `Browser->Proxy ${this.host}:${this.port} chooses ALPN ${internalTLS.alpnProtocol}`);\n\n        let targetTLS: tls.TLSSocket | undefined = undefined;\n\n        const handleError = (error: Error) => {\n          debugLogger.log('client-certificates', `error when connecting to target: ${error.message.replaceAll('\\n', ' ')}`);\n          const responseBody = escapeHTML('Playwright client-certificate error: ' + error.message)\n              .replaceAll('\\n', ' <br>');\n          if (internalTLS?.alpnProtocol === 'h2') {\n            // This method is available only in Node.js 20+\n            if ('performServerHandshake' in http2) {\n              // In case of an 'error' event on the target connection, we still need to perform the http2 handshake on the browser side.\n              // This is an async operation, so we need to remove the listener to prevent the socket from being closed too early.\n              // This means we call this._targetCloseEventListener manually.\n              this.target.removeListener('close', this._targetCloseEventListener);\n              // @ts-expect-error\n              const session: http2.ServerHttp2Session = http2.performServerHandshake(internalTLS);\n              session.on('error', () => {\n                this.target.destroy();\n                this._targetCloseEventListener();\n              });\n              session.once('stream', (stream: http2.ServerHttp2Stream) => {\n                stream.respond({\n                  'content-type': 'text/html',\n                  [http2.constants.HTTP2_HEADER_STATUS]: 503,\n                });\n                const cleanup = () => {\n                  session.close();\n                  this.target.destroy();\n                  this._targetCloseEventListener();\n                };\n                stream.end(responseBody, cleanup);\n                stream.once('error', cleanup);\n              });\n            } else {\n              this.target.destroy();\n            }\n          } else {\n            internalTLS.end([\n              'HTTP/1.1 503 Internal Server Error',\n              'Content-Type: text/html; charset=utf-8',\n              'Content-Length: ' + Buffer.byteLength(responseBody),\n              '',\n              responseBody,\n            ].join('\\r\\n'));\n            this.target.destroy();\n          }\n        };\n\n        if (this._closed) {\n          internalTLS.destroy();\n          return;\n        }\n        targetTLS = tls.connect({\n          socket: this.target,\n          host: this.host,\n          port: this.port,\n          rejectUnauthorized: !this.socksProxy.ignoreHTTPSErrors,\n          ALPNProtocols: [internalTLS.alpnProtocol || 'http/1.1'],\n          servername: !net.isIP(this.host) ? this.host : undefined,\n          secureContext: this.socksProxy.secureContextMap.get(new URL(`https://${this.host}:${this.port}`).origin),\n        });\n\n        targetTLS.once('secureConnect', () => {\n          internalTLS.pipe(targetTLS);\n          targetTLS.pipe(internalTLS);\n        });\n\n        internalTLS.once('error', () => this.target.destroy());\n        targetTLS.once('error', handleError);\n      });\n    });\n  }\n}\n\nexport class ClientCertificatesProxy {\n  _socksProxy: SocksProxy;\n  private _connections: Map<string, SocksProxyConnection> = new Map();\n  ignoreHTTPSErrors: boolean | undefined;\n  secureContextMap: Map<string, tls.SecureContext> = new Map();\n  alpnCache: ALPNCache;\n\n  constructor(\n    contextOptions: Pick<channels.BrowserNewContextOptions, 'clientCertificates' | 'ignoreHTTPSErrors'>\n  ) {\n    this.alpnCache = new ALPNCache();\n    this.ignoreHTTPSErrors = contextOptions.ignoreHTTPSErrors;\n    this._initSecureContexts(contextOptions.clientCertificates);\n    this._socksProxy = new SocksProxy();\n    this._socksProxy.setPattern('*');\n    this._socksProxy.addListener(SocksProxy.Events.SocksRequested, async (payload: SocksSocketRequestedPayload) => {\n      try {\n        const connection = new SocksProxyConnection(this, payload.uid, payload.host, payload.port);\n        await connection.connect();\n        this._connections.set(payload.uid, connection);\n      } catch (error) {\n        this._socksProxy.socketFailed({ uid: payload.uid, errorCode: error.code });\n      }\n    });\n    this._socksProxy.addListener(SocksProxy.Events.SocksData, async (payload: SocksSocketDataPayload) => {\n      this._connections.get(payload.uid)?.onData(payload.data);\n    });\n    this._socksProxy.addListener(SocksProxy.Events.SocksClosed, (payload: SocksSocketClosedPayload) => {\n      this._connections.get(payload.uid)?.onClose();\n      this._connections.delete(payload.uid);\n    });\n    loadDummyServerCertsIfNeeded();\n  }\n\n  _initSecureContexts(clientCertificates: channels.BrowserNewContextOptions['clientCertificates']) {\n    // Step 1. Group certificates by origin.\n    const origin2certs = new Map<string, channels.BrowserNewContextOptions['clientCertificates']>();\n    for (const cert of clientCertificates || []) {\n      const origin = normalizeOrigin(cert.origin);\n      const certs = origin2certs.get(origin) || [];\n      certs.push(cert);\n      origin2certs.set(origin, certs);\n    }\n\n    // Step 2. Create secure contexts for each origin.\n    for (const [origin, certs] of origin2certs) {\n      try {\n        this.secureContextMap.set(origin, tls.createSecureContext(convertClientCertificatesToTLSOptions(certs)));\n      } catch (error) {\n        error = rewriteOpenSSLErrorIfNeeded(error);\n        throw rewriteErrorMessage(error, `Failed to load client certificate: ${error.message}`);\n      }\n    }\n  }\n\n  public async listen(): Promise<string> {\n    const port = await this._socksProxy.listen(0, '127.0.0.1');\n    return `socks5://127.0.0.1:${port}`;\n  }\n\n  public async close() {\n    await this._socksProxy.close();\n  }\n}\n\nfunction normalizeOrigin(origin: string): string {\n  try {\n    return new URL(origin).origin;\n  } catch (error) {\n    return origin;\n  }\n}\n\nfunction convertClientCertificatesToTLSOptions(\n  clientCertificates: channels.BrowserNewContextOptions['clientCertificates']\n): Pick<https.RequestOptions, 'pfx' | 'key' | 'cert'> | undefined {\n  if (!clientCertificates || !clientCertificates.length)\n    return;\n  const tlsOptions = {\n    pfx: [] as { buf: Buffer, passphrase?: string }[],\n    key: [] as { pem: Buffer, passphrase?: string }[],\n    cert: [] as Buffer[],\n  };\n  for (const cert of clientCertificates) {\n    if (cert.cert)\n      tlsOptions.cert.push(cert.cert);\n    if (cert.key)\n      tlsOptions.key.push({ pem: cert.key, passphrase: cert.passphrase });\n    if (cert.pfx)\n      tlsOptions.pfx.push({ buf: cert.pfx, passphrase: cert.passphrase });\n  }\n  return tlsOptions;\n}\n\nexport function getMatchingTLSOptionsForOrigin(\n  clientCertificates: channels.BrowserNewContextOptions['clientCertificates'],\n  origin: string\n): Pick<https.RequestOptions, 'pfx' | 'key' | 'cert'> | undefined {\n  const matchingCerts = clientCertificates?.filter(c =>\n    normalizeOrigin(c.origin) === origin\n  );\n  return convertClientCertificatesToTLSOptions(matchingCerts);\n}\n\nfunction rewriteToLocalhostIfNeeded(host: string): string {\n  return host === 'local.playwright' ? 'localhost' : host;\n}\n\nexport function rewriteOpenSSLErrorIfNeeded(error: Error): Error {\n  if (error.message !== 'unsupported')\n    return error;\n  return rewriteErrorMessage(error, [\n    'Unsupported TLS certificate.',\n    'Most likely, the security algorithm of the given certificate was deprecated by OpenSSL.',\n    'For more details, see https://github.com/openssl/openssl/blob/master/README-PROVIDERS.md#the-legacy-provider',\n    'You could probably modernize the certificate by following the steps at https://github.com/nodejs/node/issues/40672#issuecomment-1243648223',\n  ].join('\\n'));\n}"],"mappings":"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"}