{"version":3,"file":"tracingDispatcher.js","names":["_artifactDispatcher","require","_dispatcher","TracingDispatcher","Dispatcher","from","scope","tracing","result","existingDispatcher","constructor","_type_Tracing","tracingStart","params","_object","start","tracingStartChunk","startChunk","tracingStopChunk","artifact","entries","stopChunk","ArtifactDispatcher","undefined","tracingStop","stop","exports"],"sources":["../../../src/server/dispatchers/tracingDispatcher.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as channels from '@protocol/channels';\nimport type { Tracing } from '../trace/recorder/tracing';\nimport { ArtifactDispatcher } from './artifactDispatcher';\nimport { Dispatcher, existingDispatcher } from './dispatcher';\nimport type { BrowserContextDispatcher } from './browserContextDispatcher';\nimport type { APIRequestContextDispatcher } from './networkDispatchers';\n\nexport class TracingDispatcher extends Dispatcher<Tracing, channels.TracingChannel, BrowserContextDispatcher | APIRequestContextDispatcher> implements channels.TracingChannel {\n  _type_Tracing = true;\n\n  static from(scope: BrowserContextDispatcher | APIRequestContextDispatcher, tracing: Tracing): TracingDispatcher {\n    const result = existingDispatcher<TracingDispatcher>(tracing);\n    return result || new TracingDispatcher(scope, tracing);\n  }\n\n  constructor(scope: BrowserContextDispatcher | APIRequestContextDispatcher, tracing: Tracing) {\n    super(scope, tracing, 'Tracing', {});\n  }\n\n  async tracingStart(params: channels.TracingTracingStartParams): Promise<channels.TracingTracingStartResult> {\n    await this._object.start(params);\n  }\n\n  async tracingStartChunk(params: channels.TracingTracingStartChunkParams): Promise<channels.TracingTracingStartChunkResult> {\n    return await this._object.startChunk(params);\n  }\n\n  async tracingStopChunk(params: channels.TracingTracingStopChunkParams): Promise<channels.TracingTracingStopChunkResult> {\n    const { artifact, entries } = await this._object.stopChunk(params);\n    return { artifact: artifact ? ArtifactDispatcher.from(this, artifact) : undefined, entries };\n  }\n\n  async tracingStop(params: channels.TracingTracingStopParams): Promise<channels.TracingTracingStopResult> {\n    await this._object.stop();\n  }\n\n}\n"],"mappings":";;;;;;AAkBA,IAAAA,mBAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASO,MAAME,iBAAiB,SAASC,sBAAU,CAA8H;EAG7K,OAAOC,IAAIA,CAACC,KAA6D,EAAEC,OAAgB,EAAqB;IAC9G,MAAMC,MAAM,GAAG,IAAAC,8BAAkB,EAAoBF,OAAO,CAAC;IAC7D,OAAOC,MAAM,IAAI,IAAIL,iBAAiB,CAACG,KAAK,EAAEC,OAAO,CAAC;EACxD;EAEAG,WAAWA,CAACJ,KAA6D,EAAEC,OAAgB,EAAE;IAC3F,KAAK,CAACD,KAAK,EAAEC,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAAC,KARvCI,aAAa,GAAG,IAAI;EASpB;EAEA,MAAMC,YAAYA,CAACC,MAA0C,EAA+C;IAC1G,MAAM,IAAI,CAACC,OAAO,CAACC,KAAK,CAACF,MAAM,CAAC;EAClC;EAEA,MAAMG,iBAAiBA,CAACH,MAA+C,EAAoD;IACzH,OAAO,MAAM,IAAI,CAACC,OAAO,CAACG,UAAU,CAACJ,MAAM,CAAC;EAC9C;EAEA,MAAMK,gBAAgBA,CAACL,MAA8C,EAAmD;IACtH,MAAM;MAAEM,QAAQ;MAAEC;IAAQ,CAAC,GAAG,MAAM,IAAI,CAACN,OAAO,CAACO,SAAS,CAACR,MAAM,CAAC;IAClE,OAAO;MAAEM,QAAQ,EAAEA,QAAQ,GAAGG,sCAAkB,CAACjB,IAAI,CAAC,IAAI,EAAEc,QAAQ,CAAC,GAAGI,SAAS;MAAEH;IAAQ,CAAC;EAC9F;EAEA,MAAMI,WAAWA,CAACX,MAAyC,EAA8C;IACvG,MAAM,IAAI,CAACC,OAAO,CAACW,IAAI,CAAC,CAAC;EAC3B;AAEF;AAACC,OAAA,CAAAvB,iBAAA,GAAAA,iBAAA"}