{"version":3,"file":"cdpSessionDispatcher.js","names":["_crConnection","require","_dispatcher","CDPSessionDispatcher","Dispatcher","constructor","scope","cdpSession","_type_CDPSession","addObjectListener","CDPSession","Events","Event","method","params","_dispatchEvent","Closed","_dispose","send","result","_object","detach","_","metadata","potentiallyClosesScope","exports"],"sources":["../../../src/server/dispatchers/cdpSessionDispatcher.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CDPSession } from '../chromium/crConnection';\nimport type * as channels from '@protocol/channels';\nimport { Dispatcher } from './dispatcher';\nimport type { BrowserDispatcher } from './browserDispatcher';\nimport type { BrowserContextDispatcher } from './browserContextDispatcher';\nimport type { CallMetadata } from '../instrumentation';\n\nexport class CDPSessionDispatcher extends Dispatcher<CDPSession, channels.CDPSessionChannel, BrowserDispatcher | BrowserContextDispatcher> implements channels.CDPSessionChannel {\n  _type_CDPSession = true;\n\n  constructor(scope: BrowserDispatcher | BrowserContextDispatcher, cdpSession: CDPSession) {\n    super(scope, cdpSession, 'CDPSession', {});\n    this.addObjectListener(CDPSession.Events.Event, ({ method, params }) => this._dispatchEvent('event', { method, params }));\n    this.addObjectListener(CDPSession.Events.Closed, () => this._dispose());\n  }\n\n  async send(params: channels.CDPSessionSendParams): Promise<channels.CDPSessionSendResult> {\n    return { result: await this._object.send(params.method as any, params.params) };\n  }\n\n  async detach(_: any, metadata: CallMetadata): Promise<void> {\n    metadata.potentiallyClosesScope = true;\n    await this._object.detach();\n  }\n}\n"],"mappings":";;;;;;AAgBA,IAAAA,aAAA,GAAAC,OAAA;AAEA,IAAAC,WAAA,GAAAD,OAAA;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASO,MAAME,oBAAoB,SAASC,sBAAU,CAA6H;EAG/KC,WAAWA,CAACC,KAAmD,EAAEC,UAAsB,EAAE;IACvF,KAAK,CAACD,KAAK,EAAEC,UAAU,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;IAAC,KAH7CC,gBAAgB,GAAG,IAAI;IAIrB,IAAI,CAACC,iBAAiB,CAACC,wBAAU,CAACC,MAAM,CAACC,KAAK,EAAE,CAAC;MAAEC,MAAM;MAAEC;IAAO,CAAC,KAAK,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;MAAEF,MAAM;MAAEC;IAAO,CAAC,CAAC,CAAC;IACzH,IAAI,CAACL,iBAAiB,CAACC,wBAAU,CAACC,MAAM,CAACK,MAAM,EAAE,MAAM,IAAI,CAACC,QAAQ,CAAC,CAAC,CAAC;EACzE;EAEA,MAAMC,IAAIA,CAACJ,MAAqC,EAA0C;IACxF,OAAO;MAAEK,MAAM,EAAE,MAAM,IAAI,CAACC,OAAO,CAACF,IAAI,CAACJ,MAAM,CAACD,MAAM,EAASC,MAAM,CAACA,MAAM;IAAE,CAAC;EACjF;EAEA,MAAMO,MAAMA,CAACC,CAAM,EAAEC,QAAsB,EAAiB;IAC1DA,QAAQ,CAACC,sBAAsB,GAAG,IAAI;IACtC,MAAM,IAAI,CAACJ,OAAO,CAACC,MAAM,CAAC,CAAC;EAC7B;AACF;AAACI,OAAA,CAAAtB,oBAAA,GAAAA,oBAAA"}