{"version":3,"file":"recorder.js","names":["fs","_interopRequireWildcard","require","consoleApiSource","_utils","_locatorParser","_browserContext","_debugger","_contextRecorder","_recorderUtils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","prototype","hasOwnProperty","call","i","set","recorderSymbol","Symbol","Recorder","showInspector","context","recorderAppFactory","params","isUnderTest","language","process","env","TEST_INSPECTOR_LANGUAGE","show","catch","recorderPromise","_create","recorder","recorderApp","install","Boolean","showRecorder","constructor","_context","_mode","_highlightedSelector","_overlayState","offsetX","_recorderApp","_currentCallsMetadata","Map","_recorderSources","_userSources","_omitCallTracking","_currentLanguage","mode","ContextRecorder","omitCallTracking","debugger","instrumentation","addListener","languageName","installRecorder","once","resume","on","data","event","setMode","setHighlightedSelector","selector","file","_refreshOverlay","pauseOnNextStatement","clearScript","Promise","all","setPaused","isPaused","_pushAllSources","recorderAppForTest","BrowserContext","Events","Close","_this$_recorderApp","dispose","removeListener","close","Change","_this$_recorderApp2","sources","setFileIfNeeded","primaryFileName","exposeBinding","source","actionSelector","actionPoint","hasActiveScreenshotCommand","keys","some","isScreenshotCommand","metadata","sdkObject","page","attribution","point","uiState","testIdAttributeName","overlay","frame","_this$_recorderApp3","emitSelector","selectorChain","generateFrameSelector","setSelector","buildFullSelector","parentFrame","state","_","extendInjectedScript","_pausedStateChanged","Debugger","PausedStateChanged","_this$_recorderApp4","pausedDetails","onBeforeCall","_updateUserSources","updateCallLog","_this$_recorderApp5","setEnabled","setMuted","pages","length","bringToFront","locatorOrSelectorAsSelector","selectors","hideHighlightedSelector","setOutput","codegenId","outputFile","mainFrame","evaluateExpression","_this$_recorderApp6","onAfterCall","error","delete","_this$_recorderApp7","values","highlight","revealLine","undefined","fileToSelect","location","line","isRecorded","label","id","text","_readSource","languageForFile","paused","push","type","_this$_recorderApp8","setSources","onBeforeInputAction","onCallLog","logName","message","metadatas","_this$_recorderApp9","logs","method","internal","status","metadataToCallLog","updateCallLogs","fileName","readFileSync","exports","toLowerCase","includes","endsWith"],"sources":["../../src/server/recorder.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as channels from '@protocol/channels';\nimport type { CallLog, CallLogStatus, EventData, Mode, OverlayState, Source, UIState } from '@recorder/recorderTypes';\nimport * as fs from 'fs';\nimport type { Point } from '../common/types';\nimport * as consoleApiSource from '../generated/consoleApiSource';\nimport { isUnderTest } from '../utils';\nimport { locatorOrSelectorAsSelector } from '../utils/isomorphic/locatorParser';\nimport { BrowserContext } from './browserContext';\nimport { type Language } from './codegen/types';\nimport { Debugger } from './debugger';\nimport type { CallMetadata, InstrumentationListener, SdkObject } from './instrumentation';\nimport { ContextRecorder, generateFrameSelector } from './recorder/contextRecorder';\nimport { type IRecorderApp } from './recorder/recorderApp';\nimport { buildFullSelector, metadataToCallLog } from './recorder/recorderUtils';\n\nconst recorderSymbol = Symbol('recorderSymbol');\n\nexport type RecorderAppFactory = (recorder: Recorder) => Promise<IRecorderApp>;\n\nexport class Recorder implements InstrumentationListener {\n  private _context: BrowserContext;\n  private _mode: Mode;\n  private _highlightedSelector = '';\n  private _overlayState: OverlayState = { offsetX: 0 };\n  private _recorderApp: IRecorderApp | null = null;\n  private _currentCallsMetadata = new Map<CallMetadata, SdkObject>();\n  private _recorderSources: Source[] = [];\n  private _userSources = new Map<string, Source>();\n  private _debugger: Debugger;\n  private _contextRecorder: ContextRecorder;\n  private _omitCallTracking = false;\n  private _currentLanguage: Language;\n\n  static showInspector(context: BrowserContext, recorderAppFactory: RecorderAppFactory) {\n    const params: channels.BrowserContextRecorderSupplementEnableParams = {};\n    if (isUnderTest())\n      params.language = process.env.TEST_INSPECTOR_LANGUAGE;\n    Recorder.show(context, recorderAppFactory, params).catch(() => {});\n  }\n\n  static show(context: BrowserContext, recorderAppFactory: RecorderAppFactory, params: channels.BrowserContextRecorderSupplementEnableParams = {}): Promise<Recorder> {\n    let recorderPromise = (context as any)[recorderSymbol] as Promise<Recorder>;\n    if (!recorderPromise) {\n      recorderPromise = Recorder._create(context, recorderAppFactory, params);\n      (context as any)[recorderSymbol] = recorderPromise;\n    }\n    return recorderPromise;\n  }\n\n  private static async _create(context: BrowserContext, recorderAppFactory: RecorderAppFactory, params: channels.BrowserContextRecorderSupplementEnableParams = {}): Promise<Recorder> {\n    const recorder = new Recorder(context, params);\n    const recorderApp = await recorderAppFactory(recorder);\n    await recorder.install(Boolean(params.showRecorder), recorderApp);\n    return recorder;\n  }\n\n  constructor(context: BrowserContext, params: channels.BrowserContextRecorderSupplementEnableParams) {\n    this._mode = params.mode || 'none';\n    this._contextRecorder = new ContextRecorder(context, params, {});\n    this._context = context;\n    this._omitCallTracking = !!params.omitCallTracking;\n    this._debugger = context.debugger();\n    context.instrumentation.addListener(this, context);\n    this._currentLanguage = this._contextRecorder.languageName();\n\n    if (isUnderTest()) {\n      // Most of our tests put elements at the top left, so get out of the way.\n      this._overlayState.offsetX = 200;\n    }\n  }\n\n  async installRecorder(recorderApp: IRecorderApp) {\n    this._recorderApp = recorderApp;\n    recorderApp.once('close', () => {\n      this._debugger.resume(false);\n      this._recorderApp = null;\n    });\n    recorderApp.on('event', (data: EventData) => {\n      if (data.event === 'setMode') {\n        this.setMode(data.params.mode);\n        return;\n      }\n      if (data.event === 'selectorUpdated') {\n        this.setHighlightedSelector(this._currentLanguage, data.params.selector);\n        return;\n      }\n      if (data.event === 'step') {\n        this._debugger.resume(true);\n        return;\n      }\n      if (data.event === 'fileChanged') {\n        this._currentLanguage = this._contextRecorder.languageName(data.params.file);\n        this._refreshOverlay();\n        return;\n      }\n      if (data.event === 'resume') {\n        this._debugger.resume(false);\n        return;\n      }\n      if (data.event === 'pause') {\n        this._debugger.pauseOnNextStatement();\n        return;\n      }\n      if (data.event === 'clear') {\n        this._contextRecorder.clearScript();\n        return;\n      }\n    });\n\n    await Promise.all([\n      recorderApp.setMode(this._mode),\n      recorderApp.setPaused(this._debugger.isPaused()),\n      this._pushAllSources()\n    ]);\n\n    (this._context as any).recorderAppForTest = this._recorderApp;\n  }\n\n  async install(showRecorder: Boolean, recorderApp: IRecorderApp) {\n    if (showRecorder)\n      await this.installRecorder(recorderApp);\n    this._context.once(BrowserContext.Events.Close, () => {\n      this._contextRecorder.dispose();\n      this._context.instrumentation.removeListener(this);\n      this._recorderApp?.close().catch(() => {});\n    });\n    this._contextRecorder.on(ContextRecorder.Events.Change, (data: { sources: Source[], primaryFileName: string }) => {\n      this._recorderSources = data.sources;\n      this._pushAllSources();\n      this._recorderApp?.setFileIfNeeded(data.primaryFileName);\n    });\n\n    await this._context.exposeBinding('__pw_recorderState', false, source => {\n      let actionSelector = '';\n      let actionPoint: Point | undefined;\n      const hasActiveScreenshotCommand = [...this._currentCallsMetadata.keys()].some(isScreenshotCommand);\n      if (!hasActiveScreenshotCommand) {\n        actionSelector = this._highlightedSelector;\n        for (const [metadata, sdkObject] of this._currentCallsMetadata) {\n          if (source.page === sdkObject.attribution.page) {\n            actionPoint = metadata.point || actionPoint;\n            actionSelector = actionSelector || metadata.params.selector;\n          }\n        }\n      }\n      const uiState: UIState = {\n        mode: this._mode,\n        actionPoint,\n        actionSelector,\n        language: this._currentLanguage,\n        testIdAttributeName: this._contextRecorder.testIdAttributeName(),\n        overlay: this._overlayState,\n      };\n      return uiState;\n    });\n\n    await this._context.exposeBinding('__pw_recorderSetSelector', false, async ({ frame }, selector: string) => {\n      this.setMode('none');\n      this._contextRecorder.emitSelector(selector);\n      const selectorChain = await generateFrameSelector(frame);\n      await this._recorderApp?.setSelector(buildFullSelector(selectorChain, selector), true);\n    });\n\n    await this._context.exposeBinding('__pw_recorderSetMode', false, async ({ frame }, mode: Mode) => {\n      if (frame.parentFrame())\n        return;\n      this.setMode(mode);\n    });\n\n    await this._context.exposeBinding('__pw_recorderSetOverlayState', false, async ({ frame }, state: OverlayState) => {\n      if (frame.parentFrame())\n        return;\n      this._overlayState = state;\n    });\n\n    // added for synthetics\n    await this._context.exposeBinding('__pw_setMode', false, async (_, mode: Mode) => {\n      this.setMode(mode);\n    });\n\n    await this._context.exposeBinding('__pw_resume', false, () => {\n      this._debugger.resume(false);\n    });\n    await this._context.extendInjectedScript(consoleApiSource.source);\n\n    await this._contextRecorder.install();\n\n    if (this._debugger.isPaused())\n      this._pausedStateChanged();\n    this._debugger.on(Debugger.Events.PausedStateChanged, () => this._pausedStateChanged());\n  }\n\n  _pausedStateChanged() {\n    // If we are called upon page.pause, we don't have metadatas, populate them.\n    for (const { metadata, sdkObject } of this._debugger.pausedDetails()) {\n      if (!this._currentCallsMetadata.has(metadata))\n        this.onBeforeCall(sdkObject, metadata);\n    }\n    this._recorderApp?.setPaused(this._debugger.isPaused());\n    this._updateUserSources();\n    this.updateCallLog([...this._currentCallsMetadata.keys()]);\n  }\n\n  setMode(mode: Mode) {\n    if (this._mode === mode)\n      return;\n    this._highlightedSelector = '';\n    this._mode = mode;\n    this._recorderApp?.setMode(this._mode);\n    this._contextRecorder.setEnabled(this._mode === 'recording' || this._mode === 'assertingText' || this._mode === 'assertingVisibility' || this._mode === 'assertingValue');\n    this._debugger.setMuted(this._mode === 'recording' || this._mode === 'assertingText' || this._mode === 'assertingVisibility' || this._mode === 'assertingValue');\n    if (this._mode !== 'none' && this._mode !== 'standby' && this._context.pages().length === 1)\n      this._context.pages()[0].bringToFront().catch(() => {});\n    this._refreshOverlay();\n  }\n\n  resume() {\n    this._debugger.resume(false);\n  }\n\n  mode() {\n    return this._mode;\n  }\n\n  setHighlightedSelector(language: Language, selector: string) {\n    this._highlightedSelector = locatorOrSelectorAsSelector(language, selector, this._context.selectors().testIdAttributeName());\n    this._refreshOverlay();\n  }\n\n  hideHighlightedSelector() {\n    this._highlightedSelector = '';\n    this._refreshOverlay();\n  }\n\n  setOutput(codegenId: string, outputFile: string | undefined) {\n    this._contextRecorder.setOutput(codegenId, outputFile);\n  }\n\n  private _refreshOverlay() {\n    for (const page of this._context.pages())\n      page.mainFrame().evaluateExpression('window.__pw_refreshOverlay()').catch(() => {});\n  }\n\n  async onBeforeCall(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (this._omitCallTracking || this._mode === 'recording' || this._mode === 'assertingText' || this._mode === 'assertingVisibility' || this._mode === 'assertingValue')\n      return;\n    this._currentCallsMetadata.set(metadata, sdkObject);\n    this._updateUserSources();\n    this.updateCallLog([metadata]);\n    if (isScreenshotCommand(metadata)) {\n      this.hideHighlightedSelector();\n    } else if (metadata.params && metadata.params.selector) {\n      this._highlightedSelector = metadata.params.selector;\n      this._recorderApp?.setSelector(this._highlightedSelector).catch(() => {});\n    }\n  }\n\n  async onAfterCall(sdkObject: SdkObject, metadata: CallMetadata) {\n    if (this._omitCallTracking || this._mode === 'recording' || this._mode === 'assertingText' || this._mode === 'assertingVisibility' || this._mode === 'assertingValue')\n      return;\n    if (!metadata.error)\n      this._currentCallsMetadata.delete(metadata);\n    this._updateUserSources();\n    this.updateCallLog([metadata]);\n  }\n\n  private _updateUserSources() {\n    // Remove old decorations.\n    for (const source of this._userSources.values()) {\n      source.highlight = [];\n      source.revealLine = undefined;\n    }\n\n    // Apply new decorations.\n    let fileToSelect = undefined;\n    for (const metadata of this._currentCallsMetadata.keys()) {\n      if (!metadata.location)\n        continue;\n      const { file, line } = metadata.location;\n      let source = this._userSources.get(file);\n      if (!source) {\n        source = { isRecorded: false, label: file, id: file, text: this._readSource(file), highlight: [], language: languageForFile(file) };\n        this._userSources.set(file, source);\n      }\n      if (line) {\n        const paused = this._debugger.isPaused(metadata);\n        source.highlight.push({ line, type: metadata.error ? 'error' : (paused ? 'paused' : 'running') });\n        source.revealLine = line;\n        fileToSelect = source.id;\n      }\n    }\n    this._pushAllSources();\n    if (fileToSelect)\n      this._recorderApp?.setFileIfNeeded(fileToSelect);\n  }\n\n  private _pushAllSources() {\n    this._recorderApp?.setSources([...this._recorderSources, ...this._userSources.values()]);\n  }\n\n  async onBeforeInputAction(sdkObject: SdkObject, metadata: CallMetadata) {\n  }\n\n  async onCallLog(sdkObject: SdkObject, metadata: CallMetadata, logName: string, message: string): Promise<void> {\n    this.updateCallLog([metadata]);\n  }\n\n  updateCallLog(metadatas: CallMetadata[]) {\n    if (this._mode === 'recording' || this._mode === 'assertingText' || this._mode === 'assertingVisibility' || this._mode === 'assertingValue')\n      return;\n    const logs: CallLog[] = [];\n    for (const metadata of metadatas) {\n      if (!metadata.method || metadata.internal)\n        continue;\n      let status: CallLogStatus = 'done';\n      if (this._currentCallsMetadata.has(metadata))\n        status = 'in-progress';\n      if (this._debugger.isPaused(metadata))\n        status = 'paused';\n      logs.push(metadataToCallLog(metadata, status));\n    }\n    this._recorderApp?.updateCallLogs(logs);\n  }\n\n  private _readSource(fileName: string): string {\n    try {\n      return fs.readFileSync(fileName, 'utf-8');\n    } catch (e) {\n      return '// No source available';\n    }\n  }\n}\n\nfunction isScreenshotCommand(metadata: CallMetadata) {\n  return metadata.method.toLowerCase().includes('screenshot');\n}\n\nfunction languageForFile(file: string) {\n  if (file.endsWith('.py'))\n    return 'python';\n  if (file.endsWith('.java'))\n    return 'java';\n  if (file.endsWith('.cs'))\n    return 'csharp';\n  return 'javascript';\n}\n"],"mappings":"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"}