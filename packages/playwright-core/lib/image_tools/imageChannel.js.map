{"version":3,"file":"imageChannel.js","names":["_colorUtils","require","ImageChannel","intoRGB","width","height","data","options","paddingSize","paddingColorOdd","paddingColorEven","newWidth","newHeight","r","Uint8Array","g","b","y","x","index","offset","alpha","blendWithWhite","color","constructor","get","boundXY","Math","min","max","exports"],"sources":["../../src/image_tools/imageChannel.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { blendWithWhite } from './colorUtils';\n\nexport type PaddingOptions = {\n  paddingSize?: number,\n  paddingColorOdd?: number[],\n  paddingColorEven?: number[],\n};\n\nexport class ImageChannel {\n  data: Uint8Array;\n  width: number;\n  height: number;\n\n  static intoRGB(width: number, height: number, data: Buffer, options: PaddingOptions = {}): ImageChannel[] {\n    const {\n      paddingSize = 0,\n      paddingColorOdd = [255, 0, 255],\n      paddingColorEven = [0, 255, 0],\n    } = options;\n    const newWidth = width + 2 * paddingSize;\n    const newHeight = height + 2 * paddingSize;\n    const r = new Uint8Array(newWidth * newHeight);\n    const g = new Uint8Array(newWidth * newHeight);\n    const b = new Uint8Array(newWidth * newHeight);\n    for (let y = 0; y < newHeight; ++y) {\n      for (let x = 0; x < newWidth; ++x) {\n        const index = y * newWidth + x;\n        if (y >= paddingSize && y < newHeight - paddingSize && x >= paddingSize && x < newWidth - paddingSize) {\n          const offset = ((y - paddingSize) * width + (x - paddingSize)) * 4;\n          const alpha = data[offset + 3] === 255 ? 1 : data[offset + 3] / 255;\n          r[index] = blendWithWhite(data[offset], alpha);\n          g[index] = blendWithWhite(data[offset + 1], alpha);\n          b[index] = blendWithWhite(data[offset + 2], alpha);\n        } else {\n          const color = (y + x) % 2 === 0 ? paddingColorEven : paddingColorOdd;\n          r[index] = color[0];\n          g[index] = color[1];\n          b[index] = color[2];\n        }\n      }\n    }\n    return [\n      new ImageChannel(newWidth, newHeight, r),\n      new ImageChannel(newWidth, newHeight, g),\n      new ImageChannel(newWidth, newHeight, b),\n    ];\n  }\n\n  constructor(width: number, height: number, data: Uint8Array) {\n    this.data = data;\n    this.width = width;\n    this.height = height;\n  }\n\n  get(x: number, y: number) {\n    return this.data[y * this.width + x];\n  }\n\n  boundXY(x: number, y: number) {\n    return [\n      Math.min(Math.max(x, 0), this.width - 1),\n      Math.min(Math.max(y, 0), this.height - 1),\n    ];\n  }\n}\n"],"mappings":"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"}