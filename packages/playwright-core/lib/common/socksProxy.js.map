{"version":3,"file":"socksProxy.js","names":["_events","_interopRequireDefault","require","_net","_debugLogger","_happyEyeballs","_utils","obj","__esModule","default","SocksAuth","SocksAddressType","SocksCommand","SocksReply","SocksConnection","constructor","uid","socket","client","_buffer","Buffer","from","_offset","_fence","_fenceCallback","_socket","_boundOnData","_uid","_client","_onData","bind","on","_onClose","_run","catch","end","assert","_authenticate","command","host","port","_parseRequest","CONNECT","_writeBytes","CommandNotSupported","off","onSocketRequested","version","_readByte","nMethods","methods","_readBytes","method","NO_ACCEPTABLE_METHODS","addressType","IPv4","join","FqName","length","toString","IPv6","bytes","tokens","i","push","readUInt16BE","buffer","Promise","f","slice","writable","write","onSocketClosed","concat","callback","undefined","socketConnected","Succeeded","ipToSocksAddress","data","onSocketData","socketFailed","errorCode","HostUnreachable","NetworkUnreachable","ConnectionRefused","NotAllowedByRuleSet","sendData","error","destroy","Error","hexToNumber","hex","reduce","value","digit","code","charCodeAt","address","net","isIPv4","split","map","t","isIPv6","result","unshift","token","starMatchToRegex","pattern","source","s","replace","RegExp","parsePattern","matchers","match","tokenPort","portMatches","tokenHost","endsWith","tokenRegex","some","matcher","SocksProxy","EventEmitter","_server","_connections","Map","_sockets","Set","_closed","_port","_patternMatcher","_directSockets","Server","createGuid","connection","set","add","once","delete","setPattern","e","_handleDirect","request","_this$_connections$ge4","createSocket","_this$_connections$ge","get","_this$_connections$ge2","message","_this$_connections$ge3","localAddress","localPort","_this$_connections$ge5","listen","hostname","close","clear","payload","emit","Events","SocksRequested","direct","SocksData","SocksClosed","_this$_connections$ge6","_this$_connections$ge7","sendSocketData","_this$_connections$ge8","sendSocketEnd","_this$_connections$ge9","sendSocketError","_this$_connections$ge10","exports","SocksProxyHandler","redirectPortForTest","_redirectPortForTest","cleanup","keys","socketClosed","socketRequested","debugLogger","log","SocksFailed","SocksError","SocksEnd","SocksConnected","_this$_sockets$get","_this$_sockets$get2"],"sources":["../../src/common/socksProxy.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from 'events';\nimport type { AddressInfo } from 'net';\nimport net from 'net';\nimport { debugLogger } from '../utils/debugLogger';\nimport { createSocket } from '../utils/happy-eyeballs';\nimport { assert, createGuid,  } from '../utils';\n\n// https://tools.ietf.org/html/rfc1928\n\nenum SocksAuth {\n  NO_AUTHENTICATION_REQUIRED = 0x00,\n  GSSAPI = 0x01,\n  USERNAME_PASSWORD = 0x02,\n  NO_ACCEPTABLE_METHODS = 0xFF\n}\n\nenum SocksAddressType {\n  IPv4 = 0x01,\n  FqName = 0x03,\n  IPv6 = 0x04\n}\n\nenum SocksCommand {\n  CONNECT = 0x01,\n  BIND = 0x02,\n  UDP_ASSOCIATE = 0x03\n}\n\nenum SocksReply {\n  Succeeded = 0x00,\n  GeneralServerFailure = 0x01,\n  NotAllowedByRuleSet = 0x02,\n  NetworkUnreachable = 0x03,\n  HostUnreachable = 0x04,\n  ConnectionRefused = 0x05,\n  TtlExpired = 0x06,\n  CommandNotSupported = 0x07,\n  AddressTypeNotSupported = 0x08\n}\n\nexport type SocksSocketRequestedPayload = { uid: string, host: string, port: number };\nexport type SocksSocketConnectedPayload = { uid: string, host: string, port: number };\nexport type SocksSocketDataPayload = { uid: string, data: Buffer };\nexport type SocksSocketErrorPayload = { uid: string, error: string };\nexport type SocksSocketFailedPayload = { uid: string, errorCode: string };\nexport type SocksSocketClosedPayload = { uid: string };\nexport type SocksSocketEndPayload = { uid: string };\n\ninterface SocksConnectionClient {\n  onSocketRequested(payload: SocksSocketRequestedPayload): void;\n  onSocketData(payload: SocksSocketDataPayload): void;\n  onSocketClosed(payload: SocksSocketClosedPayload): void;\n}\n\nclass SocksConnection {\n  private _buffer = Buffer.from([]);\n  private _offset = 0;\n  private _fence = 0;\n  private _fenceCallback: (() => void) | undefined;\n  private _socket: net.Socket;\n  private _boundOnData: (buffer: Buffer) => void;\n  private _uid: string;\n  private _client: SocksConnectionClient;\n\n  constructor(uid: string, socket: net.Socket, client: SocksConnectionClient) {\n    this._uid = uid;\n    this._socket = socket;\n    this._client = client;\n    this._boundOnData = this._onData.bind(this);\n    socket.on('data', this._boundOnData);\n    socket.on('close', () => this._onClose());\n    socket.on('end', () => this._onClose());\n    socket.on('error', () => this._onClose());\n    this._run().catch(() => this._socket.end());\n  }\n\n  async _run() {\n    assert(await this._authenticate());\n    const { command, host, port } = await this._parseRequest();\n    if (command !== SocksCommand.CONNECT) {\n      this._writeBytes(Buffer.from([\n        0x05,\n        SocksReply.CommandNotSupported,\n        0x00, // RSV\n        0x01, // IPv4\n        0x00, 0x00, 0x00, 0x00, // Address\n        0x00, 0x00 // Port\n      ]));\n      return;\n    }\n\n    this._socket.off('data', this._boundOnData);\n    this._client.onSocketRequested({ uid: this._uid, host, port });\n  }\n\n  async _authenticate(): Promise<boolean> {\n    // Request:\n    // +----+----------+----------+\n    // |VER | NMETHODS | METHODS  |\n    // +----+----------+----------+\n    // | 1  |    1     | 1 to 255 |\n    // +----+----------+----------+\n\n    // Response:\n    // +----+--------+\n    // |VER | METHOD |\n    // +----+--------+\n    // | 1  |   1    |\n    // +----+--------+\n\n    const version = await this._readByte();\n    assert(version === 0x05, 'The VER field must be set to x05 for this version of the protocol, was ' + version);\n\n    const nMethods = await this._readByte();\n    assert(nMethods, 'No authentication methods specified');\n\n    const methods = await this._readBytes(nMethods);\n    for (const method of methods) {\n      if (method === 0) {\n        this._writeBytes(Buffer.from([version, method]));\n        return true;\n      }\n    }\n    this._writeBytes(Buffer.from([version, SocksAuth.NO_ACCEPTABLE_METHODS]));\n    return false;\n  }\n\n  async _parseRequest(): Promise<{ host: string, port: number, command: SocksCommand }> {\n    // Request.\n    // +----+-----+-------+------+----------+----------+\n    // |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |\n    // +----+-----+-------+------+----------+----------+\n    // | 1  |  1  | X'00' |  1   | Variable |    2     |\n    // +----+-----+-------+------+----------+----------+\n\n    // Response.\n    // +----+-----+-------+------+----------+----------+\n    // |VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |\n    // +----+-----+-------+------+----------+----------+\n    // | 1  |  1  | X'00' |  1   | Variable |    2     |\n    // +----+-----+-------+------+----------+----------+\n\n    const version = await this._readByte();\n    assert(version === 0x05, 'The VER field must be set to x05 for this version of the protocol, was ' + version);\n\n    const command = await this._readByte();\n    await this._readByte();  // skip reserved.\n    const addressType = await this._readByte();\n    let host = '';\n    switch (addressType) {\n      case SocksAddressType.IPv4:\n        host = (await this._readBytes(4)).join('.');\n        break;\n      case SocksAddressType.FqName:\n        const length = await this._readByte();\n        host = (await this._readBytes(length)).toString();\n        break;\n      case SocksAddressType.IPv6:\n        const bytes = await this._readBytes(16);\n        const tokens: string[] = [];\n        for (let i = 0; i < 8; ++i)\n          tokens.push(bytes.readUInt16BE(i * 2).toString(16));\n        host = tokens.join(':');\n        break;\n    }\n    const port = (await this._readBytes(2)).readUInt16BE(0);\n\n    this._buffer = Buffer.from([]);\n    this._offset = 0;\n    this._fence = 0;\n\n    return {\n      command,\n      host,\n      port\n    };\n  }\n\n  private async _readByte(): Promise<number> {\n    const buffer = await this._readBytes(1);\n    return buffer[0];\n  }\n\n  private async _readBytes(length: number): Promise<Buffer> {\n    this._fence = this._offset + length;\n    if (!this._buffer || this._buffer.length < this._fence)\n      await new Promise<void>(f => this._fenceCallback = f);\n    this._offset += length;\n    return this._buffer.slice(this._offset - length, this._offset);\n  }\n\n  private _writeBytes(buffer: Buffer) {\n    if (this._socket.writable)\n      this._socket.write(buffer);\n  }\n\n  private _onClose() {\n    this._client.onSocketClosed({ uid: this._uid });\n  }\n\n  private _onData(buffer: Buffer) {\n    this._buffer = Buffer.concat([this._buffer, buffer]);\n    if (this._fenceCallback && this._buffer.length >= this._fence) {\n      const callback = this._fenceCallback;\n      this._fenceCallback = undefined;\n      callback();\n    }\n  }\n\n  socketConnected(host: string, port: number) {\n    this._writeBytes(Buffer.from([\n      0x05,\n      SocksReply.Succeeded,\n      0x00, // RSV\n      ...ipToSocksAddress(host), // ATYP, Address\n      port >> 8, port & 0xFF // Port\n    ]));\n    this._socket.on('data', data => this._client.onSocketData({ uid: this._uid, data }));\n  }\n\n  socketFailed(errorCode: string) {\n    const buffer = Buffer.from([\n      0x05,\n      0,\n      0x00, // RSV\n      ...ipToSocksAddress('0.0.0.0'), // ATYP, Address\n      0, 0 // Port\n    ]);\n    switch (errorCode) {\n      case 'ENOENT':\n      case 'ENOTFOUND':\n      case 'ETIMEDOUT':\n      case 'EHOSTUNREACH':\n        buffer[1] = SocksReply.HostUnreachable;\n        break;\n      case 'ENETUNREACH':\n        buffer[1] = SocksReply.NetworkUnreachable;\n        break;\n      case 'ECONNREFUSED':\n        buffer[1] = SocksReply.ConnectionRefused;\n        break;\n      case 'ERULESET':\n        buffer[1] = SocksReply.NotAllowedByRuleSet;\n        break;\n    }\n    this._writeBytes(buffer);\n    this._socket.end();\n  }\n\n  sendData(data: Buffer) {\n    this._socket.write(data);\n  }\n\n  end() {\n    this._socket.end();\n  }\n\n  error(error: string) {\n    this._socket.destroy(new Error(error));\n  }\n}\n\nfunction hexToNumber(hex: string): number {\n  // Note: parseInt has a few issues including ignoring trailing characters and allowing leading 0x.\n  return [...hex].reduce((value, digit) => {\n    const code = digit.charCodeAt(0);\n    if (code >= 48 && code <= 57) // 0..9\n      return value + code;\n    if (code >= 97 && code <= 102) // a..f\n      return value + (code - 97) + 10;\n    if (code >= 65 && code <= 70) // A..F\n      return value + (code - 65) + 10;\n    throw new Error('Invalid IPv6 token ' + hex);\n  }, 0);\n}\n\nfunction ipToSocksAddress(address: string): number[] {\n  if (net.isIPv4(address)) {\n    return [\n      0x01, // IPv4\n      ...address.split('.', 4).map(t => (+t) & 0xFF), // Address\n    ];\n  }\n  if (net.isIPv6(address)) {\n    const result = [0x04]; // IPv6\n    const tokens = address.split(':', 8);\n    while (tokens.length < 8)\n      tokens.unshift('');\n    for (const token of tokens) {\n      const value = hexToNumber(token);\n      result.push((value >> 8) & 0xFF, value & 0xFF);  // Big-endian\n    }\n    return result;\n  }\n  throw new Error('Only IPv4 and IPv6 addresses are supported');\n}\n\ntype PatternMatcher = (host: string, port: number) => boolean;\n\nfunction starMatchToRegex(pattern: string) {\n  const source = pattern.split('*').map(s => {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#escaping\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  }).join('.*');\n  return new RegExp('^' + source + '$');\n}\n\n// This follows \"Proxy bypass rules\" syntax without implicit and negative rules.\n// https://source.chromium.org/chromium/chromium/src/+/main:net/docs/proxy.md;l=331\nexport function parsePattern(pattern: string | undefined): PatternMatcher {\n  if (!pattern)\n    return () => false;\n\n  const matchers: PatternMatcher[] = pattern.split(',').map(token => {\n    const match = token.match(/^(.*?)(?::(\\d+))?$/);\n    if (!match)\n      throw new Error(`Unsupported token \"${token}\" in pattern \"${pattern}\"`);\n    const tokenPort = match[2] ? +match[2] : undefined;\n    const portMatches = (port: number) => tokenPort === undefined || tokenPort === port;\n    let tokenHost = match[1];\n\n    if (tokenHost === '<loopback>') {\n      return (host, port) => {\n        if (!portMatches(port))\n          return false;\n        return host === 'localhost'\n            || host.endsWith('.localhost')\n            || host === '127.0.0.1'\n            || host === '[::1]';\n      };\n    }\n\n    if (tokenHost === '*')\n      return (host, port) => portMatches(port);\n\n    if (net.isIPv4(tokenHost) || net.isIPv6(tokenHost))\n      return (host, port) => host === tokenHost && portMatches(port);\n\n    if (tokenHost[0] === '.')\n      tokenHost = '*' + tokenHost;\n    const tokenRegex = starMatchToRegex(tokenHost);\n    return (host, port) => {\n      if (!portMatches(port))\n        return false;\n      if (net.isIPv4(host) || net.isIPv6(host))\n        return false;\n      return !!host.match(tokenRegex);\n    };\n  });\n  return (host, port) => matchers.some(matcher => matcher(host, port));\n}\n\nexport class SocksProxy extends EventEmitter implements SocksConnectionClient {\n  static Events = {\n    SocksRequested: 'socksRequested',\n    SocksData: 'socksData',\n    SocksClosed: 'socksClosed',\n  };\n\n  private _server: net.Server;\n  private _connections = new Map<string, SocksConnection>();\n  private _sockets = new Set<net.Socket>();\n  private _closed = false;\n  private _port: number | undefined;\n  private _patternMatcher: PatternMatcher = () => false;\n  private _directSockets = new Map<string, net.Socket>();\n\n  constructor() {\n    super();\n    this._server = new net.Server((socket: net.Socket) => {\n      const uid = createGuid();\n      const connection = new SocksConnection(uid, socket, this);\n      this._connections.set(uid, connection);\n    });\n    this._server.on('connection', socket => {\n      if (this._closed) {\n        socket.destroy();\n        return;\n      }\n      this._sockets.add(socket);\n      socket.once('close', () => this._sockets.delete(socket));\n    });\n  }\n\n  setPattern(pattern: string | undefined) {\n    try {\n      this._patternMatcher = parsePattern(pattern);\n    } catch (e) {\n      this._patternMatcher = () => false;\n    }\n  }\n\n  private async _handleDirect(request: SocksSocketRequestedPayload) {\n    try {\n      const socket = await createSocket(request.host, request.port);\n      socket.on('data', data => this._connections.get(request.uid)?.sendData(data));\n      socket.on('error', error => {\n        this._connections.get(request.uid)?.error(error.message);\n        this._directSockets.delete(request.uid);\n      });\n      socket.on('end', () => {\n        this._connections.get(request.uid)?.end();\n        this._directSockets.delete(request.uid);\n      });\n      const localAddress = socket.localAddress;\n      const localPort = socket.localPort;\n      this._directSockets.set(request.uid, socket);\n      this._connections.get(request.uid)?.socketConnected(localAddress!, localPort!);\n    } catch (error) {\n      this._connections.get(request.uid)?.socketFailed(error.code);\n    }\n  }\n\n  port() {\n    return this._port;\n  }\n\n  async listen(port: number, hostname?: string): Promise<number> {\n    return new Promise(f => {\n      this._server.listen(port, hostname, () => {\n        const port = (this._server.address() as AddressInfo).port;\n        this._port = port;\n        f(port);\n      });\n    });\n  }\n\n  async close() {\n    if (this._closed)\n      return;\n    this._closed = true;\n    for (const socket of this._sockets)\n      socket.destroy();\n    this._sockets.clear();\n    await new Promise(f => this._server.close(f));\n  }\n\n  onSocketRequested(payload: SocksSocketRequestedPayload) {\n    if (!this._patternMatcher(payload.host, payload.port)) {\n      this._handleDirect(payload);\n      return;\n    }\n    this.emit(SocksProxy.Events.SocksRequested, payload);\n  }\n\n  onSocketData(payload: SocksSocketDataPayload): void {\n    const direct = this._directSockets.get(payload.uid);\n    if (direct) {\n      direct.write(payload.data);\n      return;\n    }\n    this.emit(SocksProxy.Events.SocksData, payload);\n  }\n\n  onSocketClosed(payload: SocksSocketClosedPayload): void {\n    const direct = this._directSockets.get(payload.uid);\n    if (direct) {\n      direct.destroy();\n      this._directSockets.delete(payload.uid);\n      return;\n    }\n    this.emit(SocksProxy.Events.SocksClosed, payload);\n  }\n\n  socketConnected({ uid, host, port }: SocksSocketConnectedPayload) {\n    this._connections.get(uid)?.socketConnected(host, port);\n  }\n\n  socketFailed({ uid, errorCode }: SocksSocketFailedPayload) {\n    this._connections.get(uid)?.socketFailed(errorCode);\n  }\n\n  sendSocketData({ uid, data }: SocksSocketDataPayload) {\n    this._connections.get(uid)?.sendData(data);\n  }\n\n  sendSocketEnd({ uid }: SocksSocketEndPayload) {\n    this._connections.get(uid)?.end();\n  }\n\n  sendSocketError({ uid, error }: SocksSocketErrorPayload) {\n    this._connections.get(uid)?.error(error);\n  }\n}\n\nexport class SocksProxyHandler extends EventEmitter {\n  static Events = {\n    SocksConnected: 'socksConnected',\n    SocksData: 'socksData',\n    SocksError: 'socksError',\n    SocksFailed: 'socksFailed',\n    SocksEnd: 'socksEnd',\n  };\n\n  private _sockets = new Map<string, net.Socket>();\n  private _patternMatcher: PatternMatcher = () => false;\n  private _redirectPortForTest: number | undefined;\n\n  constructor(pattern: string | undefined, redirectPortForTest?: number) {\n    super();\n    this._patternMatcher = parsePattern(pattern);\n    this._redirectPortForTest = redirectPortForTest;\n  }\n\n  cleanup() {\n    for (const uid of this._sockets.keys())\n      this.socketClosed({ uid });\n  }\n\n  async socketRequested({ uid, host, port }: SocksSocketRequestedPayload): Promise<void> {\n    debugLogger.log('socks', `[${uid}] => request ${host}:${port}`);\n    if (!this._patternMatcher(host, port)) {\n      const payload: SocksSocketFailedPayload = { uid, errorCode: 'ERULESET' };\n      debugLogger.log('socks', `[${uid}] <= pattern error ${payload.errorCode}`);\n      this.emit(SocksProxyHandler.Events.SocksFailed, payload);\n      return;\n    }\n\n    if (host === 'local.playwright')\n      host = 'localhost';\n    try {\n      if (this._redirectPortForTest)\n        port = this._redirectPortForTest;\n      const socket = await createSocket(host, port);\n      socket.on('data', data => {\n        const payload: SocksSocketDataPayload = { uid, data };\n        this.emit(SocksProxyHandler.Events.SocksData, payload);\n      });\n      socket.on('error', error => {\n        const payload: SocksSocketErrorPayload = { uid, error: error.message };\n        debugLogger.log('socks', `[${uid}] <= network socket error ${payload.error}`);\n        this.emit(SocksProxyHandler.Events.SocksError, payload);\n        this._sockets.delete(uid);\n      });\n      socket.on('end', () => {\n        const payload: SocksSocketEndPayload = { uid };\n        debugLogger.log('socks', `[${uid}] <= network socket closed`);\n        this.emit(SocksProxyHandler.Events.SocksEnd, payload);\n        this._sockets.delete(uid);\n      });\n      const localAddress = socket.localAddress;\n      const localPort = socket.localPort;\n      this._sockets.set(uid, socket);\n      const payload: SocksSocketConnectedPayload = { uid, host: localAddress!, port: localPort! };\n      debugLogger.log('socks', `[${uid}] <= connected to network ${payload.host}:${payload.port}`);\n      this.emit(SocksProxyHandler.Events.SocksConnected, payload);\n    } catch (error) {\n      const payload: SocksSocketFailedPayload = { uid, errorCode: error.code };\n      debugLogger.log('socks', `[${uid}] <= connect error ${payload.errorCode}`);\n      this.emit(SocksProxyHandler.Events.SocksFailed, payload);\n    }\n  }\n\n  sendSocketData({ uid, data }: SocksSocketDataPayload): void {\n    this._sockets.get(uid)?.write(data);\n  }\n\n  socketClosed({ uid }: SocksSocketClosedPayload): void {\n    debugLogger.log('socks', `[${uid}] <= browser socket closed`);\n    this._sockets.get(uid)?.destroy();\n    this._sockets.delete(uid);\n  }\n}\n"],"mappings":"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"}