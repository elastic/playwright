{"version":3,"mappings":"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","names":["pathSeparator","treeItem","React.useState","React.useRef","React.useEffect","jsx","jsxs","selectedTreeItem","outputDir","_a","model","_b","teleSuiteUpdater","hasBrowsers","testTree","testIds","testModel","ReactDOM.createRoot"],"ignoreList":[],"sources":["../../../../playwright/src/isomorphic/teleReceiver.ts","../../../../playwright/src/isomorphic/testTree.ts","../../../../playwright/src/isomorphic/teleSuiteUpdater.ts","../../../../web/src/components/xtermWrapper.tsx","../../../../trace-viewer/src/ui/uiModeFiltersView.tsx","../../../../trace-viewer/src/ui/tag.tsx","../../../../trace-viewer/src/ui/uiModeTestListView.tsx","../../../../playwright/src/isomorphic/folders.ts","../../../../trace-viewer/src/ui/uiModeTraceView.tsx","../../../../trace-viewer/src/ui/uiModeView.tsx","../../../../trace-viewer/src/uiMode.tsx"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { Annotation } from '../common/config';\nimport type { Metadata } from '../../types/test';\nimport type * as reporterTypes from '../../types/testReporter';\nimport type { ReporterV2 } from '../reporters/reporterV2';\n\nexport type StringIntern = (s: string) => string;\nexport type JsonLocation = reporterTypes.Location;\nexport type JsonError = string;\nexport type JsonStackFrame = { file: string, line: number, column: number };\n\nexport type JsonStdIOType = 'stdout' | 'stderr';\n\nexport type JsonConfig = Pick<reporterTypes.FullConfig, 'configFile' | 'globalTimeout' | 'maxFailures' | 'metadata' | 'rootDir' | 'version' | 'workers'>;\n\nexport type JsonPattern = {\n  s?: string;\n  r?: { source: string, flags: string };\n};\n\nexport type JsonProject = {\n  grep: JsonPattern[];\n  grepInvert: JsonPattern[];\n  metadata: Metadata;\n  name: string;\n  dependencies: string[];\n  // This is relative to root dir.\n  snapshotDir: string;\n  // This is relative to root dir.\n  outputDir: string;\n  repeatEach: number;\n  retries: number;\n  suites: JsonSuite[];\n  teardown?: string;\n  // This is relative to root dir.\n  testDir: string;\n  testIgnore: JsonPattern[];\n  testMatch: JsonPattern[];\n  timeout: number;\n};\n\nexport type JsonSuite = {\n  title: string;\n  location?: JsonLocation;\n  entries: (JsonSuite | JsonTestCase)[];\n};\n\nexport type JsonTestCase = {\n  testId: string;\n  title: string;\n  location: JsonLocation;\n  retries: number;\n  tags?: string[];\n  repeatEachIndex: number;\n  annotations?: { type: string, description?: string }[];\n};\n\nexport type JsonTestEnd = {\n  testId: string;\n  expectedStatus: reporterTypes.TestStatus;\n  timeout: number;\n  annotations: { type: string, description?: string }[];\n};\n\nexport type JsonTestResultStart = {\n  id: string;\n  retry: number;\n  workerIndex: number;\n  parallelIndex: number;\n  startTime: number;\n};\n\nexport type JsonAttachment = Omit<reporterTypes.TestResult['attachments'][0], 'body'> & { base64?: string };\n\nexport type JsonTestResultEnd = {\n  id: string;\n  duration: number;\n  status: reporterTypes.TestStatus;\n  errors: reporterTypes.TestError[];\n  attachments: JsonAttachment[];\n};\n\nexport type JsonTestStepStart = {\n  id: string;\n  parentStepId?: string;\n  title: string;\n  category: string,\n  startTime: number;\n  location?: reporterTypes.Location;\n};\n\nexport type JsonTestStepEnd = {\n  id: string;\n  duration: number;\n  error?: reporterTypes.TestError;\n};\n\nexport type JsonFullResult = {\n  status: reporterTypes.FullResult['status'];\n  startTime: number;\n  duration: number;\n};\n\nexport type JsonEvent = {\n  method: string;\n  params: any\n};\n\ntype TeleReporterReceiverOptions = {\n  mergeProjects?: boolean;\n  mergeTestCases?: boolean;\n  resolvePath?: (rootDir: string, relativePath: string) => string;\n  configOverrides?: Pick<reporterTypes.FullConfig, 'configFile' | 'quiet' | 'reportSlowTests' | 'reporter'>;\n  clearPreviousResultsWhenTestBegins?: boolean;\n};\n\nexport class TeleReporterReceiver {\n  public isListing = false;\n  private _rootSuite: TeleSuite;\n  private _options: TeleReporterReceiverOptions;\n  private _reporter: Partial<ReporterV2>;\n  private _tests = new Map<string, TeleTestCase>();\n  private _rootDir!: string;\n  private _config!: reporterTypes.FullConfig;\n\n  constructor(reporter: Partial<ReporterV2>, options: TeleReporterReceiverOptions = {}) {\n    this._rootSuite = new TeleSuite('', 'root');\n    this._options = options;\n    this._reporter = reporter;\n  }\n\n  reset() {\n    this._rootSuite._entries = [];\n    this._tests.clear();\n  }\n\n  dispatch(message: JsonEvent): Promise<void> | void {\n    const { method, params } = message;\n    if (method === 'onConfigure') {\n      this._onConfigure(params.config);\n      return;\n    }\n    if (method === 'onProject') {\n      this._onProject(params.project);\n      return;\n    }\n    if (method === 'onBegin') {\n      this._onBegin();\n      return;\n    }\n    if (method === 'onTestBegin') {\n      this._onTestBegin(params.testId, params.result);\n      return;\n    }\n    if (method === 'onTestEnd') {\n      this._onTestEnd(params.test, params.result);\n      return;\n    }\n    if (method === 'onStepBegin') {\n      this._onStepBegin(params.testId, params.resultId, params.step);\n      return;\n    }\n    if (method === 'onStepEnd') {\n      this._onStepEnd(params.testId, params.resultId, params.step);\n      return;\n    }\n    if (method === 'onError') {\n      this._onError(params.error);\n      return;\n    }\n    if (method === 'onStdIO') {\n      this._onStdIO(params.type, params.testId, params.resultId, params.data, params.isBase64);\n      return;\n    }\n    if (method === 'onEnd')\n      return this._onEnd(params.result);\n    if (method === 'onExit')\n      return this._onExit();\n  }\n\n  private _onConfigure(config: JsonConfig) {\n    this._rootDir = config.rootDir;\n    this._config = this._parseConfig(config);\n    this._reporter.onConfigure?.(this._config);\n  }\n\n  private _onProject(project: JsonProject) {\n    let projectSuite = this._options.mergeProjects ? this._rootSuite.suites.find(suite => suite.project()!.name === project.name) : undefined;\n    if (!projectSuite) {\n      projectSuite = new TeleSuite(project.name, 'project');\n      this._rootSuite._addSuite(projectSuite);\n    }\n    // Always update project in watch mode.\n    projectSuite._project = this._parseProject(project);\n    for (const suite of project.suites)\n      this._mergeSuiteInto(suite, projectSuite);\n  }\n\n  private _onBegin() {\n    this._reporter.onBegin?.(this._rootSuite);\n  }\n\n  private _onTestBegin(testId: string, payload: JsonTestResultStart) {\n    const test = this._tests.get(testId)!;\n    if (this._options.clearPreviousResultsWhenTestBegins)\n      test.results = [];\n    const testResult = test._createTestResult(payload.id);\n    testResult.retry = payload.retry;\n    testResult.workerIndex = payload.workerIndex;\n    testResult.parallelIndex = payload.parallelIndex;\n    testResult.setStartTimeNumber(payload.startTime);\n    this._reporter.onTestBegin?.(test, testResult);\n  }\n\n  private _onTestEnd(testEndPayload: JsonTestEnd, payload: JsonTestResultEnd) {\n    const test = this._tests.get(testEndPayload.testId)!;\n    test.timeout = testEndPayload.timeout;\n    test.expectedStatus = testEndPayload.expectedStatus;\n    test.annotations = testEndPayload.annotations;\n    const result = test.results.find(r => r._id === payload.id)!;\n    result.duration = payload.duration;\n    result.status = payload.status;\n    result.errors = payload.errors;\n    result.error = result.errors?.[0];\n    result.attachments = this._parseAttachments(payload.attachments);\n    this._reporter.onTestEnd?.(test, result);\n    // Free up the memory as won't see these step ids.\n    result._stepMap = new Map();\n  }\n\n  private _onStepBegin(testId: string, resultId: string, payload: JsonTestStepStart) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    const parentStep = payload.parentStepId ? result._stepMap.get(payload.parentStepId) : undefined;\n\n    const location = this._absoluteLocation(payload.location);\n    const step = new TeleTestStep(payload, parentStep, location);\n    if (parentStep)\n      parentStep.steps.push(step);\n    else\n      result.steps.push(step);\n    result._stepMap.set(payload.id, step);\n    this._reporter.onStepBegin?.(test, result, step);\n  }\n\n  private _onStepEnd(testId: string, resultId: string, payload: JsonTestStepEnd) {\n    const test = this._tests.get(testId)!;\n    const result = test.results.find(r => r._id === resultId)!;\n    const step = result._stepMap.get(payload.id)!;\n    step.duration = payload.duration;\n    step.error = payload.error;\n    this._reporter.onStepEnd?.(test, result, step);\n  }\n\n  private _onError(error: reporterTypes.TestError) {\n    this._reporter.onError?.(error);\n  }\n\n  private _onStdIO(type: JsonStdIOType, testId: string | undefined, resultId: string | undefined, data: string, isBase64: boolean) {\n    const chunk = isBase64 ? ((globalThis as any).Buffer ? Buffer.from(data, 'base64') : atob(data)) : data;\n    const test = testId ? this._tests.get(testId) : undefined;\n    const result = test && resultId ? test.results.find(r => r._id === resultId) : undefined;\n    if (type === 'stdout') {\n      result?.stdout.push(chunk);\n      this._reporter.onStdOut?.(chunk, test, result);\n    } else {\n      result?.stderr.push(chunk);\n      this._reporter.onStdErr?.(chunk, test, result);\n    }\n  }\n\n  private async _onEnd(result: JsonFullResult): Promise<void> {\n    await this._reporter.onEnd?.({\n      status: result.status,\n      startTime: new Date(result.startTime),\n      duration: result.duration,\n    });\n  }\n\n  private _onExit(): Promise<void> | void {\n    return this._reporter.onExit?.();\n  }\n\n  private _parseConfig(config: JsonConfig): reporterTypes.FullConfig {\n    const result = { ...baseFullConfig, ...config };\n    if (this._options.configOverrides) {\n      result.configFile = this._options.configOverrides.configFile;\n      result.reportSlowTests = this._options.configOverrides.reportSlowTests;\n      result.quiet = this._options.configOverrides.quiet;\n      result.reporter = [...this._options.configOverrides.reporter];\n    }\n    return result;\n  }\n\n  private _parseProject(project: JsonProject): TeleFullProject {\n    return {\n      metadata: project.metadata,\n      name: project.name,\n      outputDir: this._absolutePath(project.outputDir),\n      repeatEach: project.repeatEach,\n      retries: project.retries,\n      testDir: this._absolutePath(project.testDir),\n      testIgnore: parseRegexPatterns(project.testIgnore),\n      testMatch: parseRegexPatterns(project.testMatch),\n      timeout: project.timeout,\n      grep: parseRegexPatterns(project.grep) as RegExp[],\n      grepInvert: parseRegexPatterns(project.grepInvert) as RegExp[],\n      dependencies: project.dependencies,\n      teardown: project.teardown,\n      snapshotDir: this._absolutePath(project.snapshotDir),\n      use: {},\n    };\n  }\n\n  private _parseAttachments(attachments: JsonAttachment[]): reporterTypes.TestResult['attachments'] {\n    return attachments.map(a => {\n      return {\n        ...a,\n        body: a.base64 && (globalThis as any).Buffer ? Buffer.from(a.base64, 'base64') : undefined,\n      };\n    });\n  }\n\n  private _mergeSuiteInto(jsonSuite: JsonSuite, parent: TeleSuite): void {\n    let targetSuite = parent.suites.find(s => s.title === jsonSuite.title);\n    if (!targetSuite) {\n      targetSuite = new TeleSuite(jsonSuite.title, parent.type === 'project' ? 'file' : 'describe');\n      parent._addSuite(targetSuite);\n    }\n    targetSuite.location = this._absoluteLocation(jsonSuite.location);\n    jsonSuite.entries.forEach(e => {\n      if ('testId' in e)\n        this._mergeTestInto(e, targetSuite!);\n      else\n        this._mergeSuiteInto(e, targetSuite!);\n    });\n  }\n\n  private _mergeTestInto(jsonTest: JsonTestCase, parent: TeleSuite) {\n    let targetTest = this._options.mergeTestCases ? parent.tests.find(s => s.title === jsonTest.title && s.repeatEachIndex === jsonTest.repeatEachIndex) : undefined;\n    if (!targetTest) {\n      targetTest = new TeleTestCase(jsonTest.testId, jsonTest.title, this._absoluteLocation(jsonTest.location), jsonTest.repeatEachIndex);\n      parent._addTest(targetTest);\n      this._tests.set(targetTest.id, targetTest);\n    }\n    this._updateTest(jsonTest, targetTest);\n  }\n\n  private _updateTest(payload: JsonTestCase, test: TeleTestCase): TeleTestCase {\n    test.id = payload.testId;\n    test.location = this._absoluteLocation(payload.location);\n    test.retries = payload.retries;\n    test.tags = payload.tags ?? [];\n    test.annotations = payload.annotations ?? [];\n    return test;\n  }\n\n  private _absoluteLocation(location: reporterTypes.Location): reporterTypes.Location;\n  private _absoluteLocation(location?: reporterTypes.Location): reporterTypes.Location | undefined;\n  private _absoluteLocation(location: reporterTypes.Location | undefined): reporterTypes.Location | undefined {\n    if (!location)\n      return location;\n    return {\n      ...location,\n      file: this._absolutePath(location.file),\n    };\n  }\n\n  private _absolutePath(relativePath: string): string;\n  private _absolutePath(relativePath?: string): string | undefined;\n  private _absolutePath(relativePath?: string): string | undefined {\n    if (relativePath === undefined)\n      return;\n    return this._options.resolvePath ? this._options.resolvePath(this._rootDir, relativePath) : this._rootDir + '/' + relativePath;\n  }\n}\n\nexport class TeleSuite implements reporterTypes.Suite {\n  title: string;\n  location?: reporterTypes.Location;\n  parent?: TeleSuite;\n  _entries: (TeleSuite | TeleTestCase)[] = [];\n  _requireFile: string = '';\n  _timeout: number | undefined;\n  _retries: number | undefined;\n  _project: TeleFullProject | undefined;\n  _parallelMode: 'none' | 'default' | 'serial' | 'parallel' = 'none';\n  private readonly _type: 'root' | 'project' | 'file' | 'describe';\n\n  constructor(title: string, type: 'root' | 'project' | 'file' | 'describe') {\n    this.title = title;\n    this._type = type;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  get suites(): TeleSuite[] {\n    return this._entries.filter(e => e.type !== 'test') as TeleSuite[];\n  }\n\n  get tests(): TeleTestCase[] {\n    return this._entries.filter(e => e.type === 'test') as TeleTestCase[];\n  }\n\n  entries() {\n    return this._entries;\n  }\n\n  allTests(): reporterTypes.TestCase[] {\n    const result: reporterTypes.TestCase[] = [];\n    const visit = (suite: reporterTypes.Suite) => {\n      for (const entry of suite.entries()) {\n        if (entry.type === 'test')\n          result.push(entry);\n        else\n          visit(entry);\n      }\n    };\n    visit(this);\n    return result;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    // Ignore anonymous describe blocks.\n    if (this.title || this._type !== 'describe')\n      titlePath.push(this.title);\n    return titlePath;\n  }\n\n  project(): TeleFullProject | undefined {\n    return this._project ?? this.parent?.project();\n  }\n\n  _addTest(test: TeleTestCase) {\n    test.parent = this;\n    this._entries.push(test);\n  }\n\n  _addSuite(suite: TeleSuite) {\n    suite.parent = this;\n    this._entries.push(suite);\n  }\n}\n\nexport class TeleTestCase implements reporterTypes.TestCase {\n  title: string;\n  fn = () => {};\n  results: TeleTestResult[] = [];\n  location: reporterTypes.Location;\n  parent!: TeleSuite;\n  type: 'test' = 'test';\n\n  expectedStatus: reporterTypes.TestStatus = 'passed';\n  timeout = 0;\n  annotations: Annotation[] = [];\n  retries = 0;\n  tags: string[] = [];\n  repeatEachIndex = 0;\n  id: string;\n\n  constructor(id: string, title: string, location: reporterTypes.Location, repeatEachIndex: number) {\n    this.id = id;\n    this.title = title;\n    this.location = location;\n    this.repeatEachIndex = repeatEachIndex;\n  }\n\n  titlePath(): string[] {\n    const titlePath = this.parent ? this.parent.titlePath() : [];\n    titlePath.push(this.title);\n    return titlePath;\n  }\n\n  outcome(): 'skipped' | 'expected' | 'unexpected' | 'flaky' {\n    return computeTestCaseOutcome(this);\n  }\n\n  ok(): boolean {\n    const status = this.outcome();\n    return status === 'expected' || status === 'flaky' || status === 'skipped';\n  }\n\n  _createTestResult(id: string): TeleTestResult {\n    const result = new TeleTestResult(this.results.length, id);\n    this.results.push(result);\n    return result;\n  }\n}\n\nclass TeleTestStep implements reporterTypes.TestStep {\n  title: string;\n  category: string;\n  location: reporterTypes.Location | undefined;\n  parent: reporterTypes.TestStep | undefined;\n  duration: number = -1;\n  steps: reporterTypes.TestStep[] = [];\n\n  private _startTime: number = 0;\n\n  constructor(payload: JsonTestStepStart, parentStep: reporterTypes.TestStep | undefined, location: reporterTypes.Location | undefined) {\n    this.title = payload.title;\n    this.category = payload.category;\n    this.location = location;\n    this.parent = parentStep;\n    this._startTime = payload.startTime;\n  }\n\n  titlePath() {\n    const parentPath = this.parent?.titlePath() || [];\n    return [...parentPath, this.title];\n  }\n\n  get startTime(): Date {\n    return new Date(this._startTime);\n  }\n\n  set startTime(value: Date) {\n    this._startTime = +value;\n  }\n}\n\nexport class TeleTestResult implements reporterTypes.TestResult {\n  retry: reporterTypes.TestResult['retry'];\n  parallelIndex: reporterTypes.TestResult['parallelIndex'] = -1;\n  workerIndex: reporterTypes.TestResult['workerIndex'] = -1;\n  duration: reporterTypes.TestResult['duration'] = -1;\n  stdout: reporterTypes.TestResult['stdout'] = [];\n  stderr: reporterTypes.TestResult['stderr'] = [];\n  attachments: reporterTypes.TestResult['attachments'] = [];\n  status: reporterTypes.TestStatus = 'skipped';\n  steps: TeleTestStep[] = [];\n  errors: reporterTypes.TestResult['errors'] = [];\n  error: reporterTypes.TestResult['error'];\n\n  _stepMap: Map<string, reporterTypes.TestStep> = new Map();\n  _id: string;\n\n  private _startTime: number = 0;\n\n  constructor(retry: number, id: string) {\n    this.retry = retry;\n    this._id = id;\n  }\n\n  setStartTimeNumber(startTime: number) {\n    this._startTime = startTime;\n  }\n\n  get startTime(): Date {\n    return new Date(this._startTime);\n  }\n\n  set startTime(value: Date) {\n    this._startTime = +value;\n  }\n}\n\nexport type TeleFullProject = reporterTypes.FullProject;\n\nexport const baseFullConfig: reporterTypes.FullConfig = {\n  forbidOnly: false,\n  fullyParallel: false,\n  globalSetup: null,\n  globalTeardown: null,\n  globalTimeout: 0,\n  grep: /.*/,\n  grepInvert: null,\n  maxFailures: 0,\n  metadata: {},\n  preserveOutput: 'always',\n  projects: [],\n  reporter: [[process.env.CI ? 'dot' : 'list']],\n  reportSlowTests: { max: 5, threshold: 15000 },\n  configFile: '',\n  rootDir: '',\n  quiet: false,\n  shard: null,\n  updateSnapshots: 'missing',\n  version: '',\n  workers: 0,\n  webServer: null,\n};\n\nexport function serializeRegexPatterns(patterns: string | RegExp | (string | RegExp)[]): JsonPattern[] {\n  if (!Array.isArray(patterns))\n    patterns = [patterns];\n  return patterns.map(s => {\n    if (typeof s === 'string')\n      return { s };\n    return { r: { source: s.source, flags: s.flags } };\n  });\n}\n\nexport function parseRegexPatterns(patterns: JsonPattern[]): (string | RegExp)[] {\n  return patterns.map(p => {\n    if (p.s !== undefined)\n      return p.s;\n    return new RegExp(p.r!.source, p.r!.flags);\n  });\n}\n\nexport function computeTestCaseOutcome(test: reporterTypes.TestCase) {\n  let skipped = 0;\n  let didNotRun = 0;\n  let expected = 0;\n  let interrupted = 0;\n  let unexpected = 0;\n  for (const result of test.results) {\n    if (result.status === 'interrupted') {\n      ++interrupted; // eslint-disable-line @typescript-eslint/no-unused-vars\n    } else if (result.status === 'skipped' && test.expectedStatus === 'skipped') {\n      // Only tests \"expected to be skipped\" are skipped. These were specifically\n      // marked with test.skip or test.fixme.\n      ++skipped;\n    } else if (result.status === 'skipped') {\n      // Tests that were expected to run, but were skipped are \"did not run\".\n      // This happens when:\n      // - testing finished early;\n      // - test failure prevented other tests in the serial suite to run;\n      // - probably more cases!\n      ++didNotRun; // eslint-disable-line @typescript-eslint/no-unused-vars\n    } else if (result.status === test.expectedStatus) {\n      // Either passed and expected to pass, or failed and expected to fail.\n      ++expected;\n    } else {\n      ++unexpected;\n    }\n  }\n\n  // Tests that were \"skipped as expected\" are considered equal to \"expected\" below,\n  // because that's the expected outcome.\n  //\n  // However, we specifically differentiate the case of \"only skipped\"\n  // and show it as \"skipped\" in all reporters.\n  //\n  // More exotic cases like \"failed on first run and skipped on retry\" are flaky.\n  if (expected === 0 && unexpected === 0)\n    return 'skipped';  // all results were skipped or interrupted\n  if (unexpected === 0)\n    return 'expected';  // no failures, just expected+skipped\n  if (expected === 0 && skipped === 0)\n    return 'unexpected';  // only failures\n  return 'flaky';  // expected+unexpected or skipped+unexpected\n}\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type TestItemStatus = 'none' | 'running' | 'scheduled' | 'passed' | 'failed' | 'skipped';\nimport type * as reporterTypes from '../../types/testReporter';\n\n// -- Reuse boundary -- Everything below this line is reused in the vscode extension.\n\nexport type TreeItemBase = {\n  kind: 'root' | 'group' | 'case' | 'test',\n  id: string;\n  title: string;\n  location: reporterTypes.Location,\n  duration: number;\n  parent: TreeItem | undefined;\n  children: TreeItem[];\n  status: TestItemStatus;\n};\n\nexport type GroupItem = TreeItemBase & {\n  kind: 'group';\n  subKind: 'folder' | 'file' | 'describe';\n  hasLoadErrors: boolean;\n  children: (TestCaseItem | GroupItem)[];\n};\n\nexport type TestCaseItem = TreeItemBase & {\n  kind: 'case',\n  tests: reporterTypes.TestCase[];\n  children: TestItem[];\n  test: reporterTypes.TestCase | undefined;\n  project: reporterTypes.FullProject | undefined;\n  tags: Array<string>;\n};\n\nexport type TestItem = TreeItemBase & {\n  kind: 'test',\n  test: reporterTypes.TestCase;\n  project: reporterTypes.FullProject;\n};\n\nexport type TreeItem = GroupItem | TestCaseItem | TestItem;\n\nexport class TestTree {\n  rootItem: GroupItem;\n  private _treeItemById = new Map<string, TreeItem>();\n  private _treeItemByTestId = new Map<string, TestItem | TestCaseItem>();\n  readonly pathSeparator: string;\n\n  constructor(rootFolder: string, rootSuite: reporterTypes.Suite | undefined, loadErrors: reporterTypes.TestError[], projectFilters: Map<string, boolean> | undefined, pathSeparator: string) {\n    const filterProjects = projectFilters && [...projectFilters.values()].some(Boolean);\n    this.pathSeparator = pathSeparator;\n    this.rootItem = {\n      kind: 'group',\n      subKind: 'folder',\n      id: rootFolder,\n      title: '',\n      location: { file: '', line: 0, column: 0 },\n      duration: 0,\n      parent: undefined,\n      children: [],\n      status: 'none',\n      hasLoadErrors: false,\n    };\n    this._treeItemById.set(rootFolder, this.rootItem);\n\n    const visitSuite = (project: reporterTypes.FullProject, parentSuite: reporterTypes.Suite, parentGroup: GroupItem) => {\n      for (const suite of parentSuite.suites) {\n        const title = suite.title || '<anonymous>';\n        let group = parentGroup.children.find(item => item.kind === 'group' && item.title === title) as GroupItem | undefined;\n        if (!group) {\n          group = {\n            kind: 'group',\n            subKind: 'describe',\n            id: 'suite:' + parentSuite.titlePath().join('\\x1e') + '\\x1e' + title,  // account for anonymous suites\n            title,\n            location: suite.location!,\n            duration: 0,\n            parent: parentGroup,\n            children: [],\n            status: 'none',\n            hasLoadErrors: false,\n          };\n          this._addChild(parentGroup, group);\n        }\n        visitSuite(project, suite, group);\n      }\n\n      for (const test of parentSuite.tests) {\n        const title = test.title;\n        let testCaseItem = parentGroup.children.find(t => t.kind !== 'group' && t.title === title) as TestCaseItem;\n        if (!testCaseItem) {\n          testCaseItem = {\n            kind: 'case',\n            id: 'test:' + test.titlePath().join('\\x1e'),\n            title,\n            parent: parentGroup,\n            children: [],\n            tests: [],\n            location: test.location,\n            duration: 0,\n            status: 'none',\n            project: undefined,\n            test: undefined,\n            tags: test.tags,\n          };\n          this._addChild(parentGroup, testCaseItem);\n        }\n\n        const result = test.results[0];\n        let status: 'none' | 'running' | 'scheduled' | 'passed' | 'failed' | 'skipped' = 'none';\n        if ((result as any)?.[statusEx] === 'scheduled')\n          status = 'scheduled';\n        else if ((result as any)?.[statusEx] === 'running')\n          status = 'running';\n        else if (result?.status === 'skipped')\n          status = 'skipped';\n        else if (result?.status === 'interrupted')\n          status = 'none';\n        else if (result && test.outcome() !== 'expected')\n          status = 'failed';\n        else if (result && test.outcome() === 'expected')\n          status = 'passed';\n\n        testCaseItem.tests.push(test);\n        const testItem: TestItem = {\n          kind: 'test',\n          id: test.id,\n          title: project.name,\n          location: test.location!,\n          test,\n          parent: testCaseItem,\n          children: [],\n          status,\n          duration: test.results.length ? Math.max(0, test.results[0].duration) : 0,\n          project,\n        };\n        this._addChild(testCaseItem, testItem);\n        this._treeItemByTestId.set(test.id, testItem);\n        testCaseItem.duration = (testCaseItem.children as TestItem[]).reduce((a, b) => a + b.duration, 0);\n      }\n    };\n\n    for (const projectSuite of rootSuite?.suites || []) {\n      if (filterProjects && !projectFilters.get(projectSuite.title))\n        continue;\n      for (const fileSuite of projectSuite.suites) {\n        const fileItem = this._fileItem(fileSuite.location!.file.split(pathSeparator), true);\n        visitSuite(projectSuite.project()!, fileSuite, fileItem);\n      }\n    }\n\n    for (const loadError of loadErrors) {\n      if (!loadError.location)\n        continue;\n      const fileItem = this._fileItem(loadError.location.file.split(pathSeparator), true);\n      fileItem.hasLoadErrors = true;\n    }\n  }\n\n  private _addChild(parent: TreeItem, child: TreeItem) {\n    parent.children.push(child);\n    child.parent = parent;\n    this._treeItemById.set(child.id, child);\n  }\n\n  filterTree(filterText: string, statusFilters: Map<string, boolean>, runningTestIds: Set<string> | undefined) {\n    const tokens = filterText.trim().toLowerCase().split(' ');\n    const filtersStatuses = [...statusFilters.values()].some(Boolean);\n\n    const filter = (testCase: TestCaseItem) => {\n      const titleWithTags = [...testCase.tests[0].titlePath(), ...testCase.tests[0].tags].join(' ').toLowerCase();\n      if (!tokens.every(token => titleWithTags.includes(token)) && !testCase.tests.some(t => runningTestIds?.has(t.id)))\n        return false;\n      testCase.children = (testCase.children as TestItem[]).filter(test => {\n        return !filtersStatuses || runningTestIds?.has(test.test.id) || statusFilters.get(test.status);\n      });\n      testCase.tests = (testCase.children as TestItem[]).map(c => c.test);\n      return !!testCase.children.length;\n    };\n\n    const visit = (treeItem: GroupItem) => {\n      const newChildren: (GroupItem | TestCaseItem)[] = [];\n      for (const child of treeItem.children) {\n        if (child.kind === 'case') {\n          if (filter(child))\n            newChildren.push(child);\n        } else {\n          visit(child);\n          if (child.children.length || child.hasLoadErrors)\n            newChildren.push(child);\n        }\n      }\n      treeItem.children = newChildren;\n    };\n    visit(this.rootItem);\n  }\n\n  private _fileItem(filePath: string[], isFile: boolean): GroupItem {\n    if (filePath.length === 0)\n      return this.rootItem;\n    const fileName = filePath.join(this.pathSeparator);\n    const existingFileItem = this._treeItemById.get(fileName);\n    if (existingFileItem)\n      return existingFileItem as GroupItem;\n    const parentFileItem = this._fileItem(filePath.slice(0, filePath.length - 1), false);\n    const fileItem: GroupItem = {\n      kind: 'group',\n      subKind: isFile ? 'file' : 'folder',\n      id: fileName,\n      title: filePath[filePath.length - 1],\n      location: { file: fileName, line: 0, column: 0 },\n      duration: 0,\n      parent: parentFileItem,\n      children: [],\n      status: 'none',\n      hasLoadErrors: false,\n    };\n    this._addChild(parentFileItem, fileItem);\n    return fileItem;\n  }\n\n  sortAndPropagateStatus() {\n    sortAndPropagateStatus(this.rootItem);\n  }\n\n  flattenForSingleProject() {\n    const visit = (treeItem: TreeItem) => {\n      if (treeItem.kind === 'case' && treeItem.children.length === 1) {\n        treeItem.project = treeItem.children[0].project;\n        treeItem.test = treeItem.children[0].test;\n        treeItem.children = [];\n        this._treeItemByTestId.set(treeItem.test.id, treeItem);\n      } else {\n        treeItem.children.forEach(visit);\n      }\n    };\n    visit(this.rootItem);\n  }\n\n  shortenRoot() {\n    let shortRoot = this.rootItem;\n    while (shortRoot.children.length === 1 && shortRoot.children[0].kind === 'group' && shortRoot.children[0].subKind === 'folder')\n      shortRoot = shortRoot.children[0];\n    shortRoot.location = this.rootItem.location;\n    this.rootItem = shortRoot;\n  }\n\n  testIds(): Set<string> {\n    const result = new Set<string>();\n    const visit = (treeItem: TreeItem) => {\n      if (treeItem.kind === 'case')\n        treeItem.tests.forEach(t => result.add(t.id));\n      treeItem.children.forEach(visit);\n    };\n    visit(this.rootItem);\n    return result;\n  }\n\n  fileNames(): string[] {\n    const result = new Set<string>();\n    const visit = (treeItem: TreeItem) => {\n      if (treeItem.kind === 'group' && treeItem.subKind === 'file')\n        result.add(treeItem.id);\n      else\n        treeItem.children.forEach(visit);\n    };\n    visit(this.rootItem);\n    return [...result];\n  }\n\n  flatTreeItems(): TreeItem[] {\n    const result: TreeItem[] = [];\n    const visit = (treeItem: TreeItem) => {\n      result.push(treeItem);\n      treeItem.children.forEach(visit);\n    };\n    visit(this.rootItem);\n    return result;\n  }\n\n  treeItemById(id: string): TreeItem | undefined {\n    return this._treeItemById.get(id);\n  }\n\n  collectTestIds(treeItem?: TreeItem): Set<string> {\n    return treeItem ? collectTestIds(treeItem) : new Set();\n  }\n}\n\nexport function sortAndPropagateStatus(treeItem: TreeItem) {\n  for (const child of treeItem.children)\n    sortAndPropagateStatus(child);\n\n  if (treeItem.kind === 'group') {\n    treeItem.children.sort((a, b) => {\n      const fc = a.location.file.localeCompare(b.location.file);\n      return fc || a.location.line - b.location.line;\n    });\n  }\n\n  let allPassed = treeItem.children.length > 0;\n  let allSkipped = treeItem.children.length > 0;\n  let hasFailed = false;\n  let hasRunning = false;\n  let hasScheduled = false;\n\n  for (const child of treeItem.children) {\n    allSkipped = allSkipped && child.status === 'skipped';\n    allPassed = allPassed && (child.status === 'passed' || child.status === 'skipped');\n    hasFailed = hasFailed || child.status === 'failed';\n    hasRunning = hasRunning || child.status === 'running';\n    hasScheduled = hasScheduled || child.status === 'scheduled';\n  }\n\n  if (hasRunning)\n    treeItem.status = 'running';\n  else if (hasScheduled)\n    treeItem.status = 'scheduled';\n  else if (hasFailed)\n    treeItem.status = 'failed';\n  else if (allSkipped)\n    treeItem.status = 'skipped';\n  else if (allPassed)\n    treeItem.status = 'passed';\n}\n\nexport function collectTestIds(treeItem: TreeItem): Set<string> {\n  const testIds = new Set<string>();\n  const visit = (treeItem: TreeItem) => {\n    if (treeItem.kind === 'case')\n      treeItem.tests.map(t => t.id).forEach(id => testIds.add(id));\n    else if (treeItem.kind === 'test')\n      testIds.add(treeItem.id);\n    else\n      treeItem.children?.forEach(visit);\n  };\n  visit(treeItem);\n  return testIds;\n}\n\nexport const statusEx = Symbol('statusEx');\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TeleReporterReceiver, TeleSuite } from './teleReceiver';\nimport { statusEx } from './testTree';\nimport type { ReporterV2 } from '../reporters/reporterV2';\nimport type * as reporterTypes from '../../types/testReporter';\n\nexport type TeleSuiteUpdaterProgress = {\n  total: number;\n  passed: number;\n  failed: number;\n  skipped: number;\n};\n\nexport type TeleSuiteUpdaterTestModel = {\n  config: reporterTypes.FullConfig;\n  rootSuite: reporterTypes.Suite;\n  loadErrors: reporterTypes.TestError[];\n  progress: TeleSuiteUpdaterProgress;\n};\n\nexport type TeleSuiteUpdaterOptions = {\n  onUpdate: (force?: boolean) => void,\n  onError?: (error: reporterTypes.TestError) => void;\n  pathSeparator: string;\n};\n\nexport class TeleSuiteUpdater {\n  rootSuite: TeleSuite | undefined;\n  config: reporterTypes.FullConfig | undefined;\n  readonly loadErrors: reporterTypes.TestError[] = [];\n  readonly progress: TeleSuiteUpdaterProgress = {\n    total: 0,\n    passed: 0,\n    failed: 0,\n    skipped: 0,\n  };\n\n  private _receiver: TeleReporterReceiver;\n  private _lastRunReceiver: TeleReporterReceiver | undefined;\n  private _lastRunTestCount = 0;\n  private _options: TeleSuiteUpdaterOptions;\n  private _testResultsSnapshot: Map<string, reporterTypes.TestResult[]> | undefined;\n\n  constructor(options: TeleSuiteUpdaterOptions) {\n    this._receiver = new TeleReporterReceiver(this._createReporter(), {\n      mergeProjects: true,\n      mergeTestCases: true,\n      resolvePath: (rootDir, relativePath) => rootDir + options.pathSeparator + relativePath,\n      clearPreviousResultsWhenTestBegins: true,\n    });\n    this._options = options;\n  }\n\n  private _createReporter(): ReporterV2 {\n    return {\n      version: () => 'v2',\n\n      onConfigure: (c: reporterTypes.FullConfig) => {\n        this.config = c;\n        // TeleReportReceiver is merging everything into a single suite, so when we\n        // run one test, we still get many tests via rootSuite.allTests().length.\n        // To work around that, have a dedicated per-run receiver that will only have\n        // suite for a single test run, and hence will have correct total.\n        this._lastRunReceiver = new TeleReporterReceiver({\n          onBegin: (suite: reporterTypes.Suite) => {\n            this._lastRunTestCount = suite.allTests().length;\n            this._lastRunReceiver = undefined;\n          }\n        }, {\n          mergeProjects: true,\n          mergeTestCases: false,\n          resolvePath: (rootDir, relativePath) => rootDir + this._options.pathSeparator + relativePath,\n        });\n      },\n\n      onBegin: (suite: reporterTypes.Suite) => {\n        if (!this.rootSuite)\n          this.rootSuite = suite as TeleSuite;\n        // As soon as new test tree is built add previous results, before calling onUpdate\n        // to avoid flashing empty results in the UI.\n        if (this._testResultsSnapshot) {\n          for (const test of this.rootSuite.allTests())\n            test.results = this._testResultsSnapshot?.get(test.id) || test.results;\n          this._testResultsSnapshot = undefined;\n        }\n        this.progress.total = this._lastRunTestCount;\n        this.progress.passed = 0;\n        this.progress.failed = 0;\n        this.progress.skipped = 0;\n        this._options.onUpdate(true);\n      },\n\n      onEnd: () => {\n        this._options.onUpdate(true);\n      },\n\n      onTestBegin: (test: reporterTypes.TestCase, testResult: reporterTypes.TestResult) => {\n        (testResult as any)[statusEx] = 'running';\n        this._options.onUpdate();\n      },\n\n      onTestEnd: (test: reporterTypes.TestCase, testResult: reporterTypes.TestResult) => {\n        if (test.outcome() === 'skipped')\n          ++this.progress.skipped;\n        else if (test.outcome() === 'unexpected')\n          ++this.progress.failed;\n        else\n          ++this.progress.passed;\n        (testResult as any)[statusEx] = testResult.status;\n        this._options.onUpdate();\n      },\n\n      onError: (error: reporterTypes.TestError) => this._handleOnError(error),\n\n      printsToStdio: () => {\n        return false;\n      },\n\n      onStdOut: () => { },\n      onStdErr: () => { },\n      onExit: () => { },\n      onStepBegin: () => { },\n      onStepEnd: () => { },\n    };\n  }\n\n  processGlobalReport(report: any[]) {\n    const receiver = new TeleReporterReceiver({\n      onConfigure: (c: reporterTypes.FullConfig) => {\n        this.config = c;\n      },\n      onError: (error: reporterTypes.TestError) => this._handleOnError(error)\n    });\n    for (const message of report)\n      void receiver.dispatch(message);\n  }\n\n  processListReport(report: any[]) {\n    // Save test results and reset all projects, the results will be restored after\n    // new project structure is built.\n    const tests = this.rootSuite?.allTests() || [];\n    this._testResultsSnapshot = new Map(tests.map(test => [test.id, test.results]));\n    this._receiver.reset();\n    for (const message of report)\n      void this._receiver.dispatch(message);\n  }\n\n  processTestReportEvent(message: any) {\n    // The order of receiver dispatches matters here, we want to assign `lastRunTestCount`\n    // before we use it.\n    this._lastRunReceiver?.dispatch(message)?.catch(() => { });\n    this._receiver.dispatch(message)?.catch(() => { });\n  }\n\n  private _handleOnError(error: reporterTypes.TestError) {\n    this.loadErrors.push(error);\n    this._options.onError?.(error);\n    this._options.onUpdate();\n  }\n\n  asModel(): TeleSuiteUpdaterTestModel {\n    return {\n      rootSuite: this.rootSuite || new TeleSuite('', 'root'),\n      config: this.config!,\n      loadErrors: this.loadErrors,\n      progress: this.progress,\n    };\n  }\n}\n","/*\n  Copyright (c) Microsoft Corporation.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n*/\n\nimport * as React from 'react';\nimport './xtermWrapper.css';\nimport type { ITheme, Terminal } from 'xterm';\nimport type { FitAddon } from 'xterm-addon-fit';\nimport type { XtermModule } from './xtermModule';\nimport { currentTheme, addThemeListener, removeThemeListener } from '@web/theme';\nimport { useMeasure } from '@web/uiUtils';\n\nexport type XtermDataSource = {\n  pending: (string | Uint8Array)[];\n  clear: () => void,\n  write: (data: string | Uint8Array) => void;\n  resize: (cols: number, rows: number) => void;\n};\n\nexport const XtermWrapper: React.FC<{ source: XtermDataSource }> = ({\n  source,\n}) => {\n  const [measure, xtermElement] = useMeasure<HTMLDivElement>();\n  const [theme, setTheme] = React.useState(currentTheme());\n  const [modulePromise] = React.useState<Promise<XtermModule>>(import('./xtermModule').then(m => m.default));\n  const terminal = React.useRef<{ terminal: Terminal, fitAddon: FitAddon } | null>(null);\n\n  React.useEffect(() => {\n    addThemeListener(setTheme);\n    return () => removeThemeListener(setTheme);\n  }, []);\n\n  React.useEffect(() => {\n    const oldSourceWrite = source.write;\n    const oldSourceClear = source.clear;\n\n    (async () => {\n      // Always load the module first.\n      const { Terminal, FitAddon } = await modulePromise;\n      const element = xtermElement.current;\n      if (!element)\n        return;\n\n      const terminalTheme = theme === 'dark-mode' ? darkTheme : lightTheme;\n      if (terminal.current && terminal.current.terminal.options.theme === terminalTheme)\n        return;\n\n      if (terminal.current)\n        element.textContent = '';\n\n      const newTerminal = new Terminal({\n        convertEol: true,\n        fontSize: 13,\n        scrollback: 10000,\n        fontFamily: 'var(--vscode-editor-font-family)',\n        theme: terminalTheme,\n      });\n\n      const fitAddon = new FitAddon();\n      newTerminal.loadAddon(fitAddon);\n      for (const p of source.pending)\n        newTerminal.write(p);\n      source.write = (data => {\n        source.pending.push(data);\n        newTerminal.write(data);\n      });\n      source.clear = () => {\n        source.pending = [];\n        newTerminal.clear();\n      };\n      newTerminal.open(element);\n      fitAddon.fit();\n      terminal.current = { terminal: newTerminal, fitAddon };\n    })();\n    return () => {\n      source.clear = oldSourceClear;\n      source.write = oldSourceWrite;\n    };\n  }, [modulePromise, terminal, xtermElement, source, theme]);\n\n  React.useEffect(() => {\n    // Fit reads data from the terminal itself, which updates lazily, probably on some timer\n    // or mutation observer. Work around it.\n    setTimeout(() => {\n      if (!terminal.current)\n        return;\n      terminal.current.fitAddon.fit();\n      source.resize(terminal.current.terminal.cols, terminal.current.terminal.rows);\n    }, 250);\n  }, [measure, source]);\n\n  return <div data-testid='output' className='xterm-wrapper' style={{ flex: 'auto' }} ref={xtermElement}></div>;\n};\n\nconst lightTheme: ITheme = {\n  foreground: '#383a42',\n  background: '#fafafa',\n  cursor: '#383a42',\n  black: '#000000',\n  red: '#e45649',\n  green: '#50a14f',\n  yellow: '#c18401',\n  blue: '#4078f2',\n  magenta: '#a626a4',\n  cyan: '#0184bc',\n  white: '#a0a0a0',\n  brightBlack: '#000000',\n  brightRed: '#e06c75',\n  brightGreen: '#98c379',\n  brightYellow: '#d19a66',\n  brightBlue: '#4078f2',\n  brightMagenta: '#a626a4',\n  brightCyan: '#0184bc',\n  brightWhite: '#383a42',\n  selectionBackground: '#d7d7d7',\n  selectionForeground: '#383a42',\n};\n\nconst darkTheme: ITheme = {\n  foreground: '#f8f8f2',\n  background: '#1e1e1e',\n  cursor: '#f8f8f0',\n  black: '#000000',\n  red: '#ff5555',\n  green: '#50fa7b',\n  yellow: '#f1fa8c',\n  blue: '#bd93f9',\n  magenta: '#ff79c6',\n  cyan: '#8be9fd',\n  white: '#bfbfbf',\n  brightBlack: '#4d4d4d',\n  brightRed: '#ff6e6e',\n  brightGreen: '#69ff94',\n  brightYellow: '#ffffa5',\n  brightBlue: '#d6acff',\n  brightMagenta: '#ff92df',\n  brightCyan: '#a4ffff',\n  brightWhite: '#e6e6e6',\n  selectionBackground: '#44475a',\n  selectionForeground: '#f8f8f2',\n};\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@web/common.css';\nimport { Expandable } from '@web/components/expandable';\nimport '@web/third_party/vscode/codicon.css';\nimport { settings } from '@web/uiUtils';\nimport React from 'react';\nimport './uiModeFiltersView.css';\nimport type { TeleSuiteUpdaterTestModel } from '@testIsomorphic/teleSuiteUpdater';\n\nexport const FiltersView: React.FC<{\n  filterText: string;\n  setFilterText: (text: string) => void;\n  statusFilters: Map<string, boolean>;\n  setStatusFilters: (filters: Map<string, boolean>) => void;\n  projectFilters: Map<string, boolean>;\n  setProjectFilters: (filters: Map<string, boolean>) => void;\n  testModel: TeleSuiteUpdaterTestModel | undefined,\n  runTests: () => void;\n}> = ({ filterText, setFilterText, statusFilters, setStatusFilters, projectFilters, setProjectFilters, testModel, runTests }) => {\n  const [expanded, setExpanded] = React.useState(false);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  React.useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const statusLine = [...statusFilters.entries()].filter(([_, v]) => v).map(([s]) => s).join(' ') || 'all';\n  const projectsLine = [...projectFilters.entries()].filter(([_, v]) => v).map(([p]) => p).join(' ') || 'all';\n  return <div className='filters'>\n    <Expandable\n      expanded={expanded}\n      setExpanded={setExpanded}\n      title={<input ref={inputRef} type='search' placeholder='Filter (e.g. text, @tag)' spellCheck={false} value={filterText}\n        onChange={e => {\n          setFilterText(e.target.value);\n        }}\n        onKeyDown={e => {\n          if (e.key === 'Enter')\n            runTests();\n        }} />}>\n    </Expandable>\n    <div className='filter-summary' title={'Status: ' + statusLine + '\\nProjects: ' + projectsLine} onClick={() => setExpanded(!expanded)}>\n      <span className='filter-label'>Status:</span> {statusLine}\n      <span className='filter-label'>Projects:</span> {projectsLine}\n    </div>\n    {expanded && <div className='hbox' style={{ marginLeft: 14, maxHeight: 200, overflowY: 'auto' }}>\n      <div className='filter-list'>\n        {[...statusFilters.entries()].map(([status, value]) => {\n          return <div className='filter-entry' key={status}>\n            <label>\n              <input type='checkbox' checked={value} onClick={() => {\n                const copy = new Map(statusFilters);\n                copy.set(status, !copy.get(status));\n                setStatusFilters(copy);\n              }}/>\n              <div>{status}</div>\n            </label>\n          </div>;\n        })}\n      </div>\n      <div className='filter-list'>\n        {[...projectFilters.entries()].map(([projectName, value]) => {\n          return <div className='filter-entry' key={projectName}>\n            <label>\n              <input type='checkbox' checked={value} onClick={() => {\n                const copy = new Map(projectFilters);\n                copy.set(projectName, !copy.get(projectName));\n                setProjectFilters(copy);\n                const configFile = testModel?.config?.configFile;\n                if (configFile)\n                  settings.setObject(configFile + ':projects', [...copy.entries()].filter(([_, v]) => v).map(([k]) => k));\n              }}/>\n              <div>{projectName || 'untitled'}</div>\n            </label>\n          </div>;\n        })}\n      </div>\n    </div>}\n  </div>;\n};\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { clsx } from '@web/uiUtils';\nimport './tag.css';\n\nexport const TagView = ({ tag, style, onClick }: { tag: string, style?: React.CSSProperties, onClick?: (e: React.MouseEvent) => void }) => {\n  return <span\n    className={clsx('tag', `tag-color-${tagNameToColor(tag)}`)}\n    onClick={onClick}\n    style={{ margin: '6px 0 0 6px', ...style }}\n    title={`Click to filter by tag: ${tag}`}\n  >\n    {tag}\n  </span>;\n};\n\n// hash string to integer in range [0, 6] for color index, to get same color for same tag\nfunction tagNameToColor(str: string) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++)\n    hash = str.charCodeAt(i) + ((hash << 8) - hash);\n  return Math.abs(hash % 6);\n}\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { TreeItem } from '@testIsomorphic/testTree';\nimport type { TestTree } from '@testIsomorphic/testTree';\nimport '@web/common.css';\nimport { Toolbar } from '@web/components/toolbar';\nimport { ToolbarButton } from '@web/components/toolbarButton';\nimport type { TreeState } from '@web/components/treeView';\nimport { TreeView } from '@web/components/treeView';\nimport '@web/third_party/vscode/codicon.css';\nimport { msToString } from '@web/uiUtils';\nimport type * as reporterTypes from 'playwright/types/testReporter';\nimport React from 'react';\nimport type { SourceLocation } from './modelUtil';\nimport { testStatusIcon } from './testUtils';\nimport './uiModeTestListView.css';\nimport type { TestServerConnection } from '@testIsomorphic/testServerConnection';\nimport { TagView } from './tag';\nimport type { TeleSuiteUpdaterTestModel } from '@testIsomorphic/teleSuiteUpdater';\n\nconst TestTreeView = TreeView<TreeItem>;\n\nexport const TestListView: React.FC<{\n  filterText: string,\n  testTree: TestTree,\n  testServerConnection: TestServerConnection | undefined,\n  testModel?: TeleSuiteUpdaterTestModel,\n  runTests: (mode: 'bounce-if-busy' | 'queue-if-busy', testIds: Set<string>) => void,\n  runningState?: { testIds: Set<string>, itemSelectedByUser?: boolean, completed?: boolean },\n  watchAll: boolean,\n  watchedTreeIds: { value: Set<string> },\n  setWatchedTreeIds: (ids: { value: Set<string> }) => void,\n  isLoading?: boolean,\n  onItemSelected: (item: { treeItem?: TreeItem, testCase?: reporterTypes.TestCase, testFile?: SourceLocation }) => void,\n  requestedCollapseAllCount: number,\n  setFilterText: (text: string) => void,\n  onRevealSource: () => void,\n}> = ({ filterText, testModel, testServerConnection, testTree, runTests, runningState, watchAll, watchedTreeIds, setWatchedTreeIds, isLoading, onItemSelected, requestedCollapseAllCount, setFilterText, onRevealSource }) => {\n  const [treeState, setTreeState] = React.useState<TreeState>({ expandedItems: new Map() });\n  const [selectedTreeItemId, setSelectedTreeItemId] = React.useState<string | undefined>();\n  const [collapseAllCount, setCollapseAllCount] = React.useState(requestedCollapseAllCount);\n\n  // Look for a first failure within the run batch to select it.\n  React.useEffect(() => {\n    // If collapse was requested, clear the expanded items and return w/o selected item.\n    if (collapseAllCount !== requestedCollapseAllCount) {\n      treeState.expandedItems.clear();\n      for (const item of testTree.flatTreeItems())\n        treeState.expandedItems.set(item.id, false);\n      setCollapseAllCount(requestedCollapseAllCount);\n      setSelectedTreeItemId(undefined);\n      setTreeState({ ...treeState });\n      return;\n    }\n\n    if (!runningState || runningState.itemSelectedByUser)\n      return;\n    let selectedTreeItem: TreeItem | undefined;\n    const visit = (treeItem: TreeItem) => {\n      treeItem.children.forEach(visit);\n      if (selectedTreeItem)\n        return;\n      if (treeItem.status === 'failed') {\n        if (treeItem.kind === 'test' && runningState.testIds.has(treeItem.test.id))\n          selectedTreeItem = treeItem;\n        else if (treeItem.kind === 'case' && runningState.testIds.has(treeItem.tests[0]?.id))\n          selectedTreeItem = treeItem;\n      }\n    };\n    visit(testTree.rootItem);\n\n    if (selectedTreeItem)\n      setSelectedTreeItemId(selectedTreeItem.id);\n  }, [runningState, setSelectedTreeItemId, testTree, collapseAllCount, setCollapseAllCount, requestedCollapseAllCount, treeState, setTreeState]);\n\n  // Compute selected item.\n  const { selectedTreeItem } = React.useMemo(() => {\n    if (!testModel)\n      return { selectedTreeItem: undefined };\n    const selectedTreeItem = selectedTreeItemId ? testTree.treeItemById(selectedTreeItemId) : undefined;\n    const testFile = itemLocation(selectedTreeItem, testModel);\n    let selectedTest: reporterTypes.TestCase | undefined;\n    if (selectedTreeItem?.kind === 'test')\n      selectedTest = selectedTreeItem.test;\n    else if (selectedTreeItem?.kind === 'case' && selectedTreeItem.tests.length === 1)\n      selectedTest = selectedTreeItem.tests[0];\n    onItemSelected({ treeItem: selectedTreeItem, testCase: selectedTest, testFile });\n    return { selectedTreeItem };\n  }, [onItemSelected, selectedTreeItemId, testModel, testTree]);\n\n  // Update watch all.\n  React.useEffect(() => {\n    if (isLoading)\n      return;\n    if (watchAll) {\n      testServerConnection?.watchNoReply({ fileNames: testTree.fileNames() });\n    } else {\n      const fileNames = new Set<string>();\n      for (const itemId of watchedTreeIds.value) {\n        const treeItem = testTree.treeItemById(itemId);\n        const fileName = treeItem?.location.file;\n        if (fileName)\n          fileNames.add(fileName);\n      }\n      testServerConnection?.watchNoReply({ fileNames: [...fileNames] });\n    }\n  }, [isLoading, testTree, watchAll, watchedTreeIds, testServerConnection]);\n\n  const runTreeItem = (treeItem: TreeItem) => {\n    setSelectedTreeItemId(treeItem.id);\n    runTests('bounce-if-busy', testTree.collectTestIds(treeItem));\n  };\n\n  const handleTagClick = (e: React.MouseEvent, tag: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.metaKey || e.ctrlKey) {\n      const parts = filterText.split(' ');\n      if (parts.includes(tag))\n        setFilterText(parts.filter(t => t !== tag).join(' ').trim());\n      else\n        setFilterText((filterText + ' ' + tag).trim());\n    } else {\n      // Replace all existing tags with this tag.\n      setFilterText((filterText.split(' ').filter(t => !t.startsWith('@')).join(' ') + ' ' + tag).trim());\n    }\n  };\n\n  return <TestTreeView\n    name='tests'\n    treeState={treeState}\n    setTreeState={setTreeState}\n    rootItem={testTree.rootItem}\n    dataTestId='test-tree'\n    render={treeItem => {\n      return <div className='hbox ui-mode-list-item'>\n        <div className='ui-mode-list-item-title'>\n          <span title={treeItem.title}>{treeItem.title}</span>\n          {treeItem.kind === 'case' ? treeItem.tags.map(tag => <TagView key={tag} tag={tag.slice(1)} onClick={e => handleTagClick(e, tag)} />) : null}\n        </div>\n        {!!treeItem.duration && treeItem.status !== 'skipped' && <div className='ui-mode-list-item-time'>{msToString(treeItem.duration)}</div>}\n        <Toolbar noMinHeight={true} noShadow={true}>\n          <ToolbarButton icon='play' title='Run' onClick={() => runTreeItem(treeItem)} disabled={!!runningState && !runningState.completed}></ToolbarButton>\n          <ToolbarButton icon='go-to-file' title='Show source' onClick={onRevealSource} style={(treeItem.kind === 'group' && treeItem.subKind === 'folder') ? { visibility: 'hidden' } : {}}></ToolbarButton>\n          {!watchAll && <ToolbarButton icon='eye' title='Watch' onClick={() => {\n            if (watchedTreeIds.value.has(treeItem.id))\n              watchedTreeIds.value.delete(treeItem.id);\n            else\n              watchedTreeIds.value.add(treeItem.id);\n            setWatchedTreeIds({ ...watchedTreeIds });\n          }} toggled={watchedTreeIds.value.has(treeItem.id)}></ToolbarButton>}\n        </Toolbar>\n      </div>;\n    }}\n    icon={treeItem => testStatusIcon(treeItem.status)}\n    selectedItem={selectedTreeItem}\n    onAccepted={runTreeItem}\n    onSelected={treeItem => {\n      if (runningState)\n        runningState.itemSelectedByUser = true;\n      setSelectedTreeItemId(treeItem.id);\n    }}\n    isError={treeItem => treeItem.kind === 'group' ? treeItem.hasLoadErrors : false}\n    autoExpandDepth={filterText ? 5 : 1}\n    noItemsMessage={isLoading ? 'Loading\\u2026' : 'No tests'} />;\n};\n\nfunction itemLocation(item: TreeItem | undefined, model: TeleSuiteUpdaterTestModel | undefined): SourceLocation | undefined {\n  if (!item || !model)\n    return;\n  return {\n    file: item.location.file,\n    line: item.location.line,\n    column: item.location.column,\n    source: {\n      errors: model.loadErrors.filter(e => e.location?.file === item.location.file).map(e => ({ line: e.location!.line, message: e.message! })),\n      content: undefined,\n    }\n  };\n}\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function artifactsFolderName(workerIndex: number) {\n  return `.playwright-artifacts-${workerIndex}`;\n}\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { artifactsFolderName } from '@testIsomorphic/folders';\nimport type { TreeItem } from '@testIsomorphic/testTree';\nimport type { ActionTraceEvent } from '@trace/trace';\nimport '@web/common.css';\nimport '@web/third_party/vscode/codicon.css';\nimport type * as reporterTypes from 'playwright/types/testReporter';\nimport React from 'react';\nimport type { ContextEntry } from '../entries';\nimport type { SourceLocation } from './modelUtil';\nimport { idForAction, MultiTraceModel } from './modelUtil';\nimport { Workbench } from './workbench';\n\nexport const TraceView: React.FC<{\n  item: { treeItem?: TreeItem, testFile?: SourceLocation, testCase?: reporterTypes.TestCase },\n  rootDir?: string,\n  onOpenExternally?: (location: SourceLocation) => void,\n  revealSource?: boolean,\n}> = ({ item, rootDir, onOpenExternally, revealSource }) => {\n  const [model, setModel] = React.useState<{ model: MultiTraceModel, isLive: boolean } | undefined>();\n  const [counter, setCounter] = React.useState(0);\n  const pollTimer = React.useRef<NodeJS.Timeout | null>(null);\n\n  const { outputDir } = React.useMemo(() => {\n    const outputDir = item.testCase ? outputDirForTestCase(item.testCase) : undefined;\n    return { outputDir };\n  }, [item]);\n\n  // Preserve user selection upon live-reloading trace model by persisting the action id.\n  // This avoids auto-selection of the last action every time we reload the model.\n  const [selectedActionId, setSelectedActionId] = React.useState<string | undefined>();\n  const onSelectionChanged = React.useCallback((action: ActionTraceEvent) => setSelectedActionId(idForAction(action)), [setSelectedActionId]);\n  const initialSelection = selectedActionId ? model?.model.actions.find(a => idForAction(a) === selectedActionId) : undefined;\n\n  React.useEffect(() => {\n    if (pollTimer.current)\n      clearTimeout(pollTimer.current);\n\n    const result = item.testCase?.results[0];\n    if (!result) {\n      setModel(undefined);\n      return;\n    }\n\n    // Test finished.\n    const attachment = result && result.duration >= 0 && result.attachments.find(a => a.name === 'trace');\n    if (attachment && attachment.path) {\n      loadSingleTraceFile(attachment.path).then(model => setModel({ model, isLive: false }));\n      return;\n    }\n\n    if (!outputDir) {\n      setModel(undefined);\n      return;\n    }\n\n    const traceLocation = `${outputDir}/${artifactsFolderName(result!.workerIndex)}/traces/${item.testCase?.id}.json`;\n    // Start polling running test.\n    pollTimer.current = setTimeout(async () => {\n      try {\n        const model = await loadSingleTraceFile(traceLocation);\n        setModel({ model, isLive: true });\n      } catch {\n        setModel(undefined);\n      } finally {\n        setCounter(counter + 1);\n      }\n    }, 500);\n    return () => {\n      if (pollTimer.current)\n        clearTimeout(pollTimer.current);\n    };\n  }, [outputDir, item, setModel, counter, setCounter]);\n\n  return <Workbench\n    key='workbench'\n    model={model?.model}\n    showSourcesFirst={true}\n    rootDir={rootDir}\n    initialSelection={initialSelection}\n    onSelectionChanged={onSelectionChanged}\n    fallbackLocation={item.testFile}\n    isLive={model?.isLive}\n    status={item.treeItem?.status}\n    annotations={item.testCase?.annotations || []}\n    onOpenExternally={onOpenExternally}\n    revealSource={revealSource}\n  />;\n};\n\nconst outputDirForTestCase = (testCase: reporterTypes.TestCase): string | undefined => {\n  for (let suite: reporterTypes.Suite | undefined = testCase.parent; suite; suite = suite.parent) {\n    if (suite.project())\n      return suite.project()?.outputDir;\n  }\n  return undefined;\n};\n\nasync function loadSingleTraceFile(url: string): Promise<MultiTraceModel> {\n  const params = new URLSearchParams();\n  params.set('trace', url);\n  const response = await fetch(`contexts?${params.toString()}`);\n  const contextEntries = await response.json() as ContextEntry[];\n  return new MultiTraceModel(contextEntries);\n}\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@web/third_party/vscode/codicon.css';\nimport '@web/common.css';\nimport React from 'react';\nimport { TeleSuite } from '@testIsomorphic/teleReceiver';\nimport { TeleSuiteUpdater, type TeleSuiteUpdaterProgress, type TeleSuiteUpdaterTestModel } from '@testIsomorphic/teleSuiteUpdater';\nimport type { TeleTestCase } from '@testIsomorphic/teleReceiver';\nimport type * as reporterTypes from 'playwright/types/testReporter';\nimport { SplitView } from '@web/components/splitView';\nimport type { SourceLocation } from './modelUtil';\nimport './uiModeView.css';\nimport { ToolbarButton } from '@web/components/toolbarButton';\nimport { Toolbar } from '@web/components/toolbar';\nimport type { XtermDataSource } from '@web/components/xtermWrapper';\nimport { XtermWrapper } from '@web/components/xtermWrapper';\nimport { useDarkModeSetting } from '@web/theme';\nimport { clsx, settings, useSetting } from '@web/uiUtils';\nimport { statusEx, TestTree } from '@testIsomorphic/testTree';\nimport type { TreeItem  } from '@testIsomorphic/testTree';\nimport { TestServerConnection, WebSocketTestServerTransport } from '@testIsomorphic/testServerConnection';\nimport { FiltersView } from './uiModeFiltersView';\nimport { TestListView } from './uiModeTestListView';\nimport { TraceView } from './uiModeTraceView';\nimport { SettingsView } from './settingsView';\n\nconst pathSeparator = navigator.userAgent.toLowerCase().includes('windows') ? '\\\\' : '/';\n\nlet xtermSize = { cols: 80, rows: 24 };\nconst xtermDataSource: XtermDataSource = {\n  pending: [],\n  clear: () => {},\n  write: data => xtermDataSource.pending.push(data),\n  resize: () => {},\n};\n\nconst searchParams = new URLSearchParams(window.location.search);\nconst guid = searchParams.get('ws');\nconst wsURL = new URL(`../${guid}`, window.location.toString());\nwsURL.protocol = (window.location.protocol === 'https:' ? 'wss:' : 'ws:');\nconst queryParams = {\n  args: searchParams.getAll('arg'),\n  grep: searchParams.get('grep') || undefined,\n  grepInvert: searchParams.get('grepInvert') || undefined,\n  projects: searchParams.getAll('project'),\n  workers: searchParams.get('workers') || undefined,\n  timeout: searchParams.has('timeout') ? +searchParams.get('timeout')! : undefined,\n  headed: searchParams.has('headed'),\n  outputDir: searchParams.get('outputDir') || undefined,\n  updateSnapshots: (searchParams.get('updateSnapshots') as 'all' | 'none' | 'missing' | undefined) || undefined,\n  reporters: searchParams.has('reporter') ? searchParams.getAll('reporter') : undefined,\n};\nif (queryParams.updateSnapshots && !['all', 'none', 'missing'].includes(queryParams.updateSnapshots))\n  queryParams.updateSnapshots = undefined;\n\nconst isMac = navigator.platform === 'MacIntel';\n\nexport const UIModeView: React.FC<{}> = ({\n}) => {\n  const [filterText, setFilterText] = React.useState<string>('');\n  const [isShowingOutput, setIsShowingOutput] = React.useState<boolean>(false);\n  const [statusFilters, setStatusFilters] = React.useState<Map<string, boolean>>(new Map([\n    ['passed', false],\n    ['failed', false],\n    ['skipped', false],\n  ]));\n  const [projectFilters, setProjectFilters] = React.useState<Map<string, boolean>>(new Map());\n  const [testModel, setTestModel] = React.useState<TeleSuiteUpdaterTestModel>();\n  const [progress, setProgress] = React.useState<TeleSuiteUpdaterProgress & { total: number } | undefined>();\n  const [selectedItem, setSelectedItem] = React.useState<{ treeItem?: TreeItem, testFile?: SourceLocation, testCase?: reporterTypes.TestCase }>({});\n  const [visibleTestIds, setVisibleTestIds] = React.useState<Set<string>>(new Set());\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [runningState, setRunningState] = React.useState<{ testIds: Set<string>, itemSelectedByUser?: boolean, completed?: boolean } | undefined>();\n  const isRunningTest = runningState && !runningState.completed;\n\n  const [watchAll, setWatchAll] = useSetting<boolean>('watch-all', false);\n  const [watchedTreeIds, setWatchedTreeIds] = React.useState<{ value: Set<string> }>({ value: new Set() });\n  const commandQueue = React.useRef(Promise.resolve());\n  const runTestBacklog = React.useRef<Set<string>>(new Set());\n  const [collapseAllCount, setCollapseAllCount] = React.useState(0);\n  const [isDisconnected, setIsDisconnected] = React.useState(false);\n  const [hasBrowsers, setHasBrowsers] = React.useState(true);\n  const [testServerConnection, setTestServerConnection] = React.useState<TestServerConnection>();\n  const [teleSuiteUpdater, setTeleSuiteUpdater] = React.useState<TeleSuiteUpdater>();\n  const [settingsVisible, setSettingsVisible] = React.useState(false);\n  const [testingOptionsVisible, setTestingOptionsVisible] = React.useState(false);\n  const [revealSource, setRevealSource] = React.useState(false);\n  const onRevealSource = React.useCallback(() => setRevealSource(true), [setRevealSource]);\n\n  const showTestingOptions = false;\n  const [singleWorker, setSingleWorker] = React.useState(queryParams.workers === '1');\n  const [showBrowser, setShowBrowser] = React.useState(queryParams.headed);\n  const [updateSnapshots, setUpdateSnapshots] = React.useState(queryParams.updateSnapshots === 'all');\n  const [showRouteActions, setShowRouteActions] = useSetting('show-route-actions', true);\n  const [darkMode, setDarkMode] = useDarkModeSetting();\n\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const reloadTests = React.useCallback(() => {\n    setTestServerConnection(new TestServerConnection(new WebSocketTestServerTransport(wsURL)));\n  }, []);\n\n  // Load tests on startup.\n  React.useEffect(() => {\n    inputRef.current?.focus();\n    setIsLoading(true);\n    reloadTests();\n  }, [reloadTests]);\n\n  // Wire server connection to the auxiliary UI features.\n  React.useEffect(() => {\n    if (!testServerConnection)\n      return;\n    const disposables = [\n      testServerConnection.onStdio(params => {\n        if (params.buffer) {\n          const data = atob(params.buffer);\n          xtermDataSource.write(data);\n        } else {\n          xtermDataSource.write(params.text!);\n        }\n      }),\n      testServerConnection.onClose(() => setIsDisconnected(true))\n    ];\n    xtermDataSource.resize = (cols, rows) => {\n      xtermSize = { cols, rows };\n      testServerConnection.resizeTerminalNoReply({ cols, rows });\n    };\n    return () => {\n      for (const disposable of disposables)\n        disposable.dispose();\n    };\n  }, [testServerConnection]);\n\n  // This is the main routine, every time connection updates it starts the\n  // whole workflow.\n  React.useEffect(() => {\n    if (!testServerConnection)\n      return;\n\n    let throttleTimer: NodeJS.Timeout | undefined;\n    const teleSuiteUpdater = new TeleSuiteUpdater({\n      onUpdate: immediate => {\n        clearTimeout(throttleTimer);\n        throttleTimer = undefined;\n        if (immediate) {\n          setTestModel(teleSuiteUpdater.asModel());\n        } else if (!throttleTimer) {\n          throttleTimer = setTimeout(() => {\n            setTestModel(teleSuiteUpdater.asModel());\n          }, 250);\n        }\n      },\n      onError: error => {\n        xtermDataSource.write((error.stack || error.value || '') + '\\n');\n      },\n      pathSeparator,\n    });\n\n    setTeleSuiteUpdater(teleSuiteUpdater);\n\n    setTestModel(undefined);\n    setIsLoading(true);\n    setWatchedTreeIds({ value: new Set() });\n    (async () => {\n      try {\n        await testServerConnection.initialize({\n          interceptStdio: true,\n          watchTestDirs: true\n        });\n        const { status, report } = await testServerConnection.runGlobalSetup({\n          outputDir: queryParams.outputDir,\n        });\n        teleSuiteUpdater.processGlobalReport(report);\n        if (status !== 'passed')\n          return;\n\n        const result = await testServerConnection.listTests({ projects: queryParams.projects, locations: queryParams.args, grep: queryParams.grep, grepInvert: queryParams.grepInvert, outputDir: queryParams.outputDir });\n        teleSuiteUpdater.processListReport(result.report);\n\n        testServerConnection.onReport(params => {\n          teleSuiteUpdater.processTestReportEvent(params);\n        });\n\n        const { hasBrowsers } = await testServerConnection.checkBrowsers({});\n        setHasBrowsers(hasBrowsers);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n    return () => {\n      clearTimeout(throttleTimer);\n    };\n  }, [testServerConnection]);\n\n  // Update project filter default values.\n  React.useEffect(() => {\n    if (!testModel)\n      return;\n\n    const { config, rootSuite } = testModel;\n    const selectedProjects = config.configFile ? settings.getObject<string[] | undefined>(config.configFile + ':projects', undefined) : undefined;\n    const newFilter = new Map(projectFilters);\n    for (const projectName of newFilter.keys()) {\n      if (!rootSuite.suites.find(s => s.title === projectName))\n        newFilter.delete(projectName);\n    }\n    for (const projectSuite of rootSuite.suites) {\n      if (!newFilter.has(projectSuite.title))\n        newFilter.set(projectSuite.title, !!selectedProjects?.includes(projectSuite.title));\n    }\n    if (!selectedProjects && newFilter.size && ![...newFilter.values()].includes(true))\n      newFilter.set(newFilter.entries().next().value[0], true);\n    if (projectFilters.size !== newFilter.size || [...projectFilters].some(([k, v]) => newFilter.get(k) !== v))\n      setProjectFilters(newFilter);\n  }, [projectFilters, testModel]);\n\n  // Update progress.\n  React.useEffect(() => {\n    if (isRunningTest && testModel?.progress)\n      setProgress(testModel.progress);\n    else if (!testModel)\n      setProgress(undefined);\n  }, [testModel, isRunningTest]);\n\n  // Test tree is built from the model and filters.\n  const { testTree } = React.useMemo(() => {\n    if (!testModel)\n      return { testTree: new TestTree('', new TeleSuite('', 'root'), [], projectFilters, pathSeparator) };\n    const testTree = new TestTree('', testModel.rootSuite, testModel.loadErrors, projectFilters, pathSeparator);\n    testTree.filterTree(filterText, statusFilters, isRunningTest ? runningState?.testIds : undefined);\n    testTree.sortAndPropagateStatus();\n    testTree.shortenRoot();\n    testTree.flattenForSingleProject();\n    setVisibleTestIds(testTree.testIds());\n    return { testTree };\n  }, [filterText, testModel, statusFilters, projectFilters, setVisibleTestIds, runningState, isRunningTest]);\n\n  const runTests = React.useCallback((mode: 'queue-if-busy' | 'bounce-if-busy', testIds: Set<string>) => {\n    if (!testServerConnection || !testModel)\n      return;\n    if (mode === 'bounce-if-busy' && isRunningTest)\n      return;\n\n    runTestBacklog.current = new Set([...runTestBacklog.current, ...testIds]);\n    commandQueue.current = commandQueue.current.then(async () => {\n      const testIds = runTestBacklog.current;\n      runTestBacklog.current = new Set();\n      if (!testIds.size)\n        return;\n\n      // Clear test results.\n      {\n        for (const test of testModel.rootSuite?.allTests() || []) {\n          if (testIds.has(test.id)) {\n            test.results = [];\n            const result = (test as TeleTestCase)._createTestResult('pending');\n            (result as any)[statusEx] = 'scheduled';\n          }\n        }\n        setTestModel({ ...testModel });\n      }\n\n      const time = '  [' + new Date().toLocaleTimeString() + ']';\n      xtermDataSource.write('\\x1B[2m—'.repeat(Math.max(0, xtermSize.cols - time.length)) + time + '\\x1B[22m');\n      setProgress({ total: 0, passed: 0, failed: 0, skipped: 0 });\n      setRunningState({ testIds });\n\n      await testServerConnection.runTests({\n        locations: queryParams.args,\n        grep: queryParams.grep,\n        grepInvert: queryParams.grepInvert,\n        testIds: [...testIds],\n        projects: [...projectFilters].filter(([_, v]) => v).map(([p]) => p),\n        // When started with `--workers=1`, the setting allows to undo that.\n        // Otherwise, fallback to the cli `--workers=X` argument.\n        workers: singleWorker ? '1' : (queryParams.workers === '1' ? undefined : queryParams.workers),\n        timeout: queryParams.timeout,\n        headed: showBrowser,\n        outputDir: queryParams.outputDir,\n        updateSnapshots: updateSnapshots ? 'all' : queryParams.updateSnapshots,\n        reporters: queryParams.reporters,\n        trace: 'on',\n      });\n      // Clear pending tests in case of interrupt.\n      for (const test of testModel.rootSuite?.allTests() || []) {\n        if (test.results[0]?.duration === -1)\n          test.results = [];\n      }\n      setTestModel({ ...testModel });\n      setRunningState(oldState => oldState ? ({ ...oldState, completed: true }) : undefined);\n    });\n  }, [projectFilters, isRunningTest, testModel, testServerConnection, singleWorker, showBrowser, updateSnapshots]);\n\n  React.useEffect(() => {\n    if (!testServerConnection || !teleSuiteUpdater)\n      return;\n    const disposable = testServerConnection.onTestFilesChanged(async params => {\n      // fetch the new list of tests\n      commandQueue.current = commandQueue.current.then(async () => {\n        setIsLoading(true);\n        try {\n          const result = await testServerConnection.listTests({ projects: queryParams.projects, locations: queryParams.args, grep: queryParams.grep, grepInvert: queryParams.grepInvert, outputDir: queryParams.outputDir });\n          teleSuiteUpdater.processListReport(result.report);\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.log(e);\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      await commandQueue.current;\n\n      if (params.testFiles.length === 0)\n        return;\n\n      // run affected watched tests\n      const testModel = teleSuiteUpdater.asModel();\n      const testTree = new TestTree('', testModel.rootSuite, testModel.loadErrors, projectFilters, pathSeparator);\n\n      const testIds: string[] = [];\n      const set = new Set(params.testFiles);\n      if (watchAll) {\n        const visit = (treeItem: TreeItem) => {\n          const fileName = treeItem.location.file;\n          if (fileName && set.has(fileName))\n            testIds.push(...testTree.collectTestIds(treeItem));\n          if (treeItem.kind === 'group' && treeItem.subKind === 'folder')\n            treeItem.children.forEach(visit);\n        };\n        visit(testTree.rootItem);\n      } else {\n        for (const treeId of watchedTreeIds.value) {\n          const treeItem = testTree.treeItemById(treeId);\n          const fileName = treeItem?.location.file;\n          if (fileName && set.has(fileName))\n            testIds.push(...testTree.collectTestIds(treeItem));\n        }\n      }\n      runTests('queue-if-busy', new Set(testIds));\n    });\n    return () => disposable.dispose();\n  }, [runTests, testServerConnection, watchAll, watchedTreeIds, teleSuiteUpdater, projectFilters]);\n\n  // Shortcuts.\n  React.useEffect(() => {\n    if (!testServerConnection)\n      return;\n    const onShortcutEvent = (e: KeyboardEvent) => {\n      if (e.code === 'Backquote' && e.ctrlKey) {\n        e.preventDefault();\n        setIsShowingOutput(!isShowingOutput);\n      } else if (e.code === 'F5' && e.shiftKey) {\n        e.preventDefault();\n        testServerConnection?.stopTestsNoReply({});\n      } else if (e.code === 'F5') {\n        e.preventDefault();\n        runTests('bounce-if-busy', visibleTestIds);\n      }\n    };\n    addEventListener('keydown', onShortcutEvent);\n    return () => {\n      removeEventListener('keydown', onShortcutEvent);\n    };\n  }, [runTests, reloadTests, testServerConnection, visibleTestIds, isShowingOutput]);\n\n  const dialogRef = React.useRef<HTMLDialogElement>(null);\n  const openInstallDialog = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    dialogRef.current?.showModal();\n  }, []);\n  const closeInstallDialog = React.useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    dialogRef.current?.close();\n  }, []);\n  const installBrowsers = React.useCallback((e: React.MouseEvent) => {\n    closeInstallDialog(e);\n    setIsShowingOutput(true);\n    testServerConnection?.installBrowsers({}).then(async () => {\n      setIsShowingOutput(false);\n      const { hasBrowsers } = await testServerConnection?.checkBrowsers({});\n      setHasBrowsers(hasBrowsers);\n    });\n  }, [closeInstallDialog, testServerConnection]);\n\n  return <div className='vbox ui-mode'>\n    {!hasBrowsers && <dialog ref={dialogRef}>\n      <div className='title'><span className='codicon codicon-lightbulb'></span>Install browsers</div>\n      <div className='body'>\n        Playwright did not find installed browsers.\n        <br></br>\n        Would you like to run `playwright install`?\n        <br></br>\n        <button className='button' onClick={installBrowsers}>Install</button>\n        <button className='button secondary' onClick={closeInstallDialog}>Dismiss</button>\n      </div>\n    </dialog>}\n    {isDisconnected && <div className='disconnected'>\n      <div className='title'>UI Mode disconnected</div>\n      <div><a href='#' onClick={() => window.location.href = '/'}>Reload the page</a> to reconnect</div>\n    </div>}\n    <SplitView\n      sidebarSize={250}\n      minSidebarSize={150}\n      orientation='horizontal'\n      sidebarIsFirst={true}\n      settingName='testListSidebar'\n      main={<div className='vbox'>\n        <div className={clsx('vbox', !isShowingOutput && 'hidden')}>\n          <Toolbar>\n            <div className='section-title' style={{ flex: 'none' }}>Output</div>\n            <ToolbarButton icon='circle-slash' title='Clear output' onClick={() => xtermDataSource.clear()}></ToolbarButton>\n            <div className='spacer'></div>\n            <ToolbarButton icon='close' title='Close' onClick={() => setIsShowingOutput(false)}></ToolbarButton>\n          </Toolbar>\n          <XtermWrapper source={xtermDataSource}></XtermWrapper>\n        </div>\n        <div className={clsx('vbox', isShowingOutput && 'hidden')}>\n          <TraceView\n            item={selectedItem}\n            rootDir={testModel?.config?.rootDir}\n            revealSource={revealSource}\n            onOpenExternally={location => testServerConnection?.openNoReply({ location: { file: location.file, line: location.line, column: location.column } })}\n          />\n        </div>\n      </div>}\n      sidebar={<div className='vbox ui-mode-sidebar'>\n        <Toolbar noShadow={true} noMinHeight={true}>\n          <img src='playwright-logo.svg' alt='Playwright logo' />\n          <div className='section-title'>Playwright</div>\n          <ToolbarButton icon='refresh' title='Reload' onClick={() => reloadTests()} disabled={isRunningTest || isLoading}></ToolbarButton>\n          <ToolbarButton icon='terminal' title={'Toggle output — ' + (isMac ? '⌃`' : 'Ctrl + `')} toggled={isShowingOutput} onClick={() => { setIsShowingOutput(!isShowingOutput); }} />\n          {!hasBrowsers && <ToolbarButton icon='lightbulb-autofix' style={{ color: 'var(--vscode-list-warningForeground)' }} title='Playwright browsers are missing' onClick={openInstallDialog} />}\n        </Toolbar>\n        <FiltersView\n          filterText={filterText}\n          setFilterText={setFilterText}\n          statusFilters={statusFilters}\n          setStatusFilters={setStatusFilters}\n          projectFilters={projectFilters}\n          setProjectFilters={setProjectFilters}\n          testModel={testModel}\n          runTests={() => runTests('bounce-if-busy', visibleTestIds)} />\n        <Toolbar noMinHeight={true}>\n          {!isRunningTest && !progress && <div className='section-title'>Tests</div>}\n          {!isRunningTest && progress && <div data-testid='status-line' className='status-line'>\n            <div>{progress.passed}/{progress.total} passed ({(progress.passed / progress.total) * 100 | 0}%)</div>\n          </div>}\n          {isRunningTest && progress && <div data-testid='status-line' className='status-line'>\n            <div>Running {progress.passed}/{runningState.testIds.size} passed ({(progress.passed / runningState.testIds.size) * 100 | 0}%)</div>\n          </div>}\n          <ToolbarButton icon='play' title='Run all — F5' onClick={() => runTests('bounce-if-busy', visibleTestIds)} disabled={isRunningTest || isLoading}></ToolbarButton>\n          <ToolbarButton icon='debug-stop' title={'Stop — ' + (isMac ? '⇧F5' : 'Shift + F5')} onClick={() => testServerConnection?.stopTests({})} disabled={!isRunningTest || isLoading}></ToolbarButton>\n          <ToolbarButton icon='eye' title='Watch all' toggled={watchAll} onClick={() => {\n            setWatchedTreeIds({ value: new Set() });\n            setWatchAll(!watchAll);\n          }}></ToolbarButton>\n          <ToolbarButton icon='collapse-all' title='Collapse all' onClick={() => {\n            setCollapseAllCount(collapseAllCount + 1);\n          }} />\n        </Toolbar>\n        <TestListView\n          filterText={filterText}\n          testModel={testModel}\n          testTree={testTree}\n          testServerConnection={testServerConnection}\n          runningState={runningState}\n          runTests={runTests}\n          onItemSelected={setSelectedItem}\n          watchAll={watchAll}\n          watchedTreeIds={watchedTreeIds}\n          setWatchedTreeIds={setWatchedTreeIds}\n          isLoading={isLoading}\n          requestedCollapseAllCount={collapseAllCount}\n          setFilterText={setFilterText}\n          onRevealSource={onRevealSource}\n        />\n        {showTestingOptions && <>\n          <Toolbar noShadow={true} noMinHeight={true} className='settings-toolbar' onClick={() => setTestingOptionsVisible(!testingOptionsVisible)}>\n            <span\n              className={`codicon codicon-${testingOptionsVisible ? 'chevron-down' : 'chevron-right'}`}\n              style={{ marginLeft: 5 }}\n              title={testingOptionsVisible ? 'Hide Testing Options' : 'Show Testing Options'}\n            />\n            <div className='section-title'>Testing Options</div>\n          </Toolbar>\n          {testingOptionsVisible && <SettingsView settings={[\n            { value: singleWorker, set: setSingleWorker, title: 'Single worker' },\n            { value: showBrowser, set: setShowBrowser, title: 'Show browser' },\n            { value: updateSnapshots, set: setUpdateSnapshots, title: 'Update snapshots' },\n          ]} />}\n        </>}\n        <Toolbar noShadow={true} noMinHeight={true} className='settings-toolbar' onClick={() => setSettingsVisible(!settingsVisible)}>\n          <span\n            className={`codicon codicon-${settingsVisible ? 'chevron-down' : 'chevron-right'}`}\n            style={{ marginLeft: 5 }}\n            title={settingsVisible ? 'Hide Settings' : 'Show Settings'}\n          />\n          <div className='section-title'>Settings</div>\n        </Toolbar>\n        {settingsVisible && <SettingsView settings={[\n          { value: darkMode, set: setDarkMode, title: 'Dark mode' },\n          { value: showRouteActions, set: setShowRouteActions, title: 'Show route actions' },\n        ]} />}\n      </div>\n      }\n    />\n  </div>;\n};\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@web/common.css';\nimport { applyTheme } from '@web/theme';\nimport '@web/third_party/vscode/codicon.css';\nimport * as ReactDOM from 'react-dom/client';\nimport { UIModeView } from './ui/uiModeView';\n\n(async () => {\n  applyTheme();\n  if (window.location.protocol !== 'file:') {\n    if (window.location.href.includes('isUnderTest=true'))\n      await new Promise(f => setTimeout(f, 1000));\n    if (!navigator.serviceWorker)\n      throw new Error(`Service workers are not supported.\\nMake sure to serve the website (${window.location}) via HTTPS or localhost.`);\n    navigator.serviceWorker.register('sw.bundle.js');\n    if (!navigator.serviceWorker.controller) {\n      await new Promise<void>(f => {\n        navigator.serviceWorker.oncontrollerchange = () => f();\n      });\n    }\n\n    // Keep SW running.\n    setInterval(function() { fetch('ping'); }, 10000);\n  }\n\n  ReactDOM.createRoot(document.querySelector('#root')!).render(<UIModeView/>);\n})();\n"],"file":"uiMode.D-tg1Oci.js"}