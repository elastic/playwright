{"version":3,"file":"testServerConnection-D-tXL3sj.js","sources":["../../../../../playwright/src/isomorphic/events.ts","../../../../../playwright/src/isomorphic/testServerConnection.ts"],"sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport namespace Disposable {\n  export function disposeAll(disposables: Disposable[]): void {\n    for (const disposable of disposables.splice(0))\n      disposable.dispose();\n  }\n}\n\nexport type Disposable = {\n  dispose(): void;\n};\n\nexport interface Event<T> {\n  (listener: (e: T) => any, disposables?: Disposable[]): Disposable;\n}\n\nexport class EventEmitter<T> {\n  public event: Event<T>;\n\n  private _deliveryQueue?: {listener: (e: T) => void, event: T}[];\n  private _listeners = new Set<(e: T) => void>();\n\n  constructor() {\n    this.event = (listener: (e: T) => any, disposables?: Disposable[]) => {\n      this._listeners.add(listener);\n      let disposed = false;\n      const self = this;\n      const result: Disposable = {\n        dispose() {\n          if (!disposed) {\n            disposed = true;\n            self._listeners.delete(listener);\n          }\n        }\n      };\n      if (disposables)\n        disposables.push(result);\n      return result;\n    };\n  }\n\n  fire(event: T): void {\n    const dispatch = !this._deliveryQueue;\n    if (!this._deliveryQueue)\n      this._deliveryQueue = [];\n    for (const listener of this._listeners)\n      this._deliveryQueue.push({ listener, event });\n    if (!dispatch)\n      return;\n    for (let index = 0; index < this._deliveryQueue.length; index++) {\n      const { listener, event } = this._deliveryQueue[index];\n      listener.call(null, event);\n    }\n    this._deliveryQueue = undefined;\n  }\n\n  dispose() {\n    this._listeners.clear();\n    if (this._deliveryQueue)\n      this._deliveryQueue = [];\n  }\n}\n","/**\n * Copyright (c) Microsoft Corporation.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { TestServerInterface, TestServerInterfaceEvents } from '@testIsomorphic/testServerInterface';\nimport * as events from './events';\n\n// -- Reuse boundary -- Everything below this line is reused in the vscode extension.\n\nexport interface TestServerTransport {\n  onmessage(listener: (message: string) => void): void;\n  onopen(listener: () => void): void;\n  onerror(listener: () => void): void;\n  onclose(listener: () => void): void;\n\n  send(data: string): void;\n  close(): void;\n}\n\nexport class WebSocketTestServerTransport implements TestServerTransport {\n  private _ws: WebSocket;\n\n  constructor(url: string | URL) {\n    this._ws = new WebSocket(url);\n  }\n\n  onmessage(listener: (message: string) => void) {\n    this._ws.addEventListener('message', event => listener(event.data));\n  }\n\n  onopen(listener: () => void) {\n    this._ws.addEventListener('open', listener);\n  }\n\n  onerror(listener: () => void) {\n    this._ws.addEventListener('error', listener);\n  }\n\n  onclose(listener: () => void) {\n    this._ws.addEventListener('close', listener);\n  }\n\n  send(data: string) {\n    this._ws.send(data);\n  }\n\n  close() {\n    this._ws.close();\n  }\n}\n\nexport class TestServerConnection implements TestServerInterface, TestServerInterfaceEvents {\n  readonly onClose: events.Event<void>;\n  readonly onReport: events.Event<any>;\n  readonly onStdio: events.Event<{ type: 'stderr' | 'stdout'; text?: string | undefined; buffer?: string | undefined; }>;\n  readonly onTestFilesChanged: events.Event<{ testFiles: string[] }>;\n  readonly onLoadTraceRequested: events.Event<{ traceUrl: string }>;\n\n  private _onCloseEmitter = new events.EventEmitter<void>();\n  private _onReportEmitter = new events.EventEmitter<any>();\n  private _onStdioEmitter = new events.EventEmitter<{ type: 'stderr' | 'stdout'; text?: string | undefined; buffer?: string | undefined; }>();\n  private _onTestFilesChangedEmitter = new events.EventEmitter<{ testFiles: string[] }>();\n  private _onLoadTraceRequestedEmitter = new events.EventEmitter<{ traceUrl: string }>();\n\n  private _lastId = 0;\n  private _transport: TestServerTransport;\n  private _callbacks = new Map<number, { resolve: (arg: any) => void, reject: (arg: Error) => void }>();\n  private _connectedPromise: Promise<void>;\n  private _isClosed = false;\n\n  constructor(transport: TestServerTransport) {\n    this.onClose = this._onCloseEmitter.event;\n    this.onReport = this._onReportEmitter.event;\n    this.onStdio = this._onStdioEmitter.event;\n    this.onTestFilesChanged = this._onTestFilesChangedEmitter.event;\n    this.onLoadTraceRequested = this._onLoadTraceRequestedEmitter.event;\n\n    this._transport = transport;\n    this._transport.onmessage(data => {\n      const message = JSON.parse(data);\n      const { id, result, error, method, params } = message;\n      if (id) {\n        const callback = this._callbacks.get(id);\n        if (!callback)\n          return;\n        this._callbacks.delete(id);\n        if (error)\n          callback.reject(new Error(error));\n        else\n          callback.resolve(result);\n      } else {\n        this._dispatchEvent(method, params);\n      }\n    });\n    const pingInterval = setInterval(() => this._sendMessage('ping').catch(() => { }), 30000);\n    this._connectedPromise = new Promise<void>((f, r) => {\n      this._transport.onopen(f);\n      this._transport.onerror(r);\n    });\n    this._transport.onclose(() => {\n      this._isClosed = true;\n      this._onCloseEmitter.fire();\n      clearInterval(pingInterval);\n    });\n  }\n\n  isClosed(): boolean {\n    return this._isClosed;\n  }\n\n  private async _sendMessage(method: string, params?: any): Promise<any> {\n    const logForTest = (globalThis as any).__logForTest;\n    logForTest?.({ method, params });\n\n    await this._connectedPromise;\n    const id = ++this._lastId;\n    const message = { id, method, params };\n    this._transport.send(JSON.stringify(message));\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, { resolve, reject });\n    });\n  }\n\n  private _sendMessageNoReply(method: string, params?: any) {\n    this._sendMessage(method, params).catch(() => { });\n  }\n\n  private _dispatchEvent(method: string, params?: any) {\n    if (method === 'report')\n      this._onReportEmitter.fire(params);\n    else if (method === 'stdio')\n      this._onStdioEmitter.fire(params);\n    else if (method === 'testFilesChanged')\n      this._onTestFilesChangedEmitter.fire(params);\n    else if (method === 'loadTraceRequested')\n      this._onLoadTraceRequestedEmitter.fire(params);\n  }\n\n  async initialize(params: Parameters<TestServerInterface['initialize']>[0]): ReturnType<TestServerInterface['initialize']> {\n    await this._sendMessage('initialize', params);\n  }\n\n  async ping(params: Parameters<TestServerInterface['ping']>[0]): ReturnType<TestServerInterface['ping']> {\n    await this._sendMessage('ping', params);\n  }\n\n  async pingNoReply(params: Parameters<TestServerInterface['ping']>[0]) {\n    this._sendMessageNoReply('ping', params);\n  }\n\n  async watch(params: Parameters<TestServerInterface['watch']>[0]): ReturnType<TestServerInterface['watch']> {\n    await this._sendMessage('watch', params);\n  }\n\n  watchNoReply(params: Parameters<TestServerInterface['watch']>[0]) {\n    this._sendMessageNoReply('watch', params);\n  }\n\n  async open(params: Parameters<TestServerInterface['open']>[0]): ReturnType<TestServerInterface['open']> {\n    await this._sendMessage('open', params);\n  }\n\n  openNoReply(params: Parameters<TestServerInterface['open']>[0]) {\n    this._sendMessageNoReply('open', params);\n  }\n\n  async resizeTerminal(params: Parameters<TestServerInterface['resizeTerminal']>[0]): ReturnType<TestServerInterface['resizeTerminal']> {\n    await this._sendMessage('resizeTerminal', params);\n  }\n\n  resizeTerminalNoReply(params: Parameters<TestServerInterface['resizeTerminal']>[0]) {\n    this._sendMessageNoReply('resizeTerminal', params);\n  }\n\n  async checkBrowsers(params: Parameters<TestServerInterface['checkBrowsers']>[0]): ReturnType<TestServerInterface['checkBrowsers']> {\n    return await this._sendMessage('checkBrowsers', params);\n  }\n\n  async installBrowsers(params: Parameters<TestServerInterface['installBrowsers']>[0]): ReturnType<TestServerInterface['installBrowsers']> {\n    await this._sendMessage('installBrowsers', params);\n  }\n\n  async runGlobalSetup(params: Parameters<TestServerInterface['runGlobalSetup']>[0]): ReturnType<TestServerInterface['runGlobalSetup']> {\n    return await this._sendMessage('runGlobalSetup', params);\n  }\n\n  async runGlobalTeardown(params: Parameters<TestServerInterface['runGlobalTeardown']>[0]): ReturnType<TestServerInterface['runGlobalTeardown']> {\n    return await this._sendMessage('runGlobalTeardown', params);\n  }\n\n  async startDevServer(params: Parameters<TestServerInterface['startDevServer']>[0]): ReturnType<TestServerInterface['startDevServer']> {\n    return await this._sendMessage('startDevServer', params);\n  }\n\n  async stopDevServer(params: Parameters<TestServerInterface['stopDevServer']>[0]): ReturnType<TestServerInterface['stopDevServer']> {\n    return await this._sendMessage('stopDevServer', params);\n  }\n\n  async clearCache(params: Parameters<TestServerInterface['clearCache']>[0]): ReturnType<TestServerInterface['clearCache']> {\n    return await this._sendMessage('clearCache', params);\n  }\n\n  async listFiles(params: Parameters<TestServerInterface['listFiles']>[0]): ReturnType<TestServerInterface['listFiles']> {\n    return await this._sendMessage('listFiles', params);\n  }\n\n  async listTests(params: Parameters<TestServerInterface['listTests']>[0]): ReturnType<TestServerInterface['listTests']> {\n    return await this._sendMessage('listTests', params);\n  }\n\n  async runTests(params: Parameters<TestServerInterface['runTests']>[0]): ReturnType<TestServerInterface['runTests']> {\n    return await this._sendMessage('runTests', params);\n  }\n\n  async findRelatedTestFiles(params: Parameters<TestServerInterface['findRelatedTestFiles']>[0]): ReturnType<TestServerInterface['findRelatedTestFiles']> {\n    return await this._sendMessage('findRelatedTestFiles', params);\n  }\n\n  async stopTests(params: Parameters<TestServerInterface['stopTests']>[0]): ReturnType<TestServerInterface['stopTests']> {\n    await this._sendMessage('stopTests', params);\n  }\n\n  stopTestsNoReply(params: Parameters<TestServerInterface['stopTests']>[0]) {\n    this._sendMessageNoReply('stopTests', params);\n  }\n\n  async closeGracefully(params: Parameters<TestServerInterface['closeGracefully']>[0]): ReturnType<TestServerInterface['closeGracefully']> {\n    await this._sendMessage('closeGracefully', params);\n  }\n\n  close() {\n    try {\n      this._transport.close();\n    } catch {\n    }\n  }\n}\n"],"names":["Disposable","event","events.EventEmitter"],"mappings":"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"}